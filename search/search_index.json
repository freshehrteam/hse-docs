{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This set of documentation will introduce you to some of the principles behind openEHR and how to start working with the APIs and data formats that the various openEHR CDRs (Clinical Data Repositories) support.</p>"},{"location":"#postman","title":"Postman","text":"<p>We strongly recommend that you orientate yourselves using the free Postman tool, as this will let you easily play with the various API calls without writing any code. Once you understand the principles it will be much easier to write code for your own environment, and better still, Postman can often generate code examples in a variety of languages.</p> <p>To make life easier, we have prepared a <code>Postman collection</code> which is essentially a pre-cooked set of openEHR API calls, for which when used with Postman environment files, can be used to point very quickly at an endpoint and get playing.</p> <p>Click the 'Run Postman Button' to import the Postman 'Apperta C4H openEHR REST APIs' collection and the associated Postman environment..</p> <p></p>"},{"location":"#which-api-to-use","title":"Which API to use?","text":"<p>For more information on the various APIs  see Overview of the different CDR APIs.</p> <p>Our current position is to suggest using the openEHR REST API for most of the calls, but using the Ehrscape endpoint (supported by both Better CDR and Vitasystems EhrBase) for the /composition calls. Thisi because currently the FLAT JSON format that we prefer is not currently supported by either CDR as part of the openEHR Rest API call, though it is nw part of the standard.</p>"},{"location":"#key-content","title":"Key content","text":"<p>Getting started with Postman and the openEHR REST collection</p> <p>Introduction to openEHR</p> <p>Overview of the different CDR APIs</p> <p>Working with the openEHR REST API</p> <p>Working with the Ehrscape API</p> <p>Overview of the HSE project</p>"},{"location":"ehrscape/ECDR1-authentication/","title":"Getting started - Authentication","text":"<p>Let's get started by hooking up to an openEHR CDR via the Better Ehrscape API. </p> <p>This API is supported by Better (along with the openEHR REST API) and Ripple Ethercis.</p> <p>We have included examples for the Better CDR used by the Apperta Code4Health platform.</p>"},{"location":"ehrscape/ECDR1-authentication/#authentication","title":"Authentication","text":"<p>All of the openEHR CDR API calls require some sort of authentication in the header. In production this is likely to be something like <code>JSON Web Tokens</code> (JWT) but for demo purposes both ehrBase and betterCDR support <code>Basic Auth</code> based on a Username and Password.</p>"},{"location":"ehrscape/ECDR1-authentication/#basic-authentication","title":"Basic Authentication","text":"<p>If you have a Postman environment file related to your CDR, you should be able to find the Username and Password, and possibly the Basic Auth token, pre-calculated.</p> <p>If it is not pre-calculated, it is easy to do so with code like this in javascript.</p> <pre><code> const authString = btoa(`${username}:${password}`)\nconst authToken = `Basic: ${authString}`\n</code></pre> <p>You then need to send that token in the Authorization header of your REST call e.g. </p> <pre><code>curl --location --request GET 'https://cdr.code4health.org/rest/v1/template' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: {{ authToken }}'\n</code></pre>"},{"location":"ehrscape/ECDR1-authentication/#connecting-to-the-cdr","title":"Connecting to the CDR","text":"<p>To test our basic connection to the CDR, we will perform a very simple <code>List templates</code> call to list the openEHR templates currently registered with the CDR -&gt; Working with openEHR Templates</p>"},{"location":"ehrscape/ECDR2-openehr-templates/","title":"Working with openEHR Templates","text":"<p>openEHR templates are aggregations of logical archetype models that along with the basic Reference model, act as the validation schema for any patient data submitted to the CDR. You cannot submit any information to a CDR without first registering the template which will be used to validate it.</p> <p>This section will test our connection the CDR by running a <code>List templates</code> call, then upload a new template to the CDR via an <code>Upload a template</code> call.</p>"},{"location":"ehrscape/ECDR2-openehr-templates/#a-list-available-templates","title":"A. List available templates","text":"<p>This call simply returns a list of the templates currently registered with the CDR, each with a unique <code>templateId</code>.</p> cURLNodeJS/AxiosPython/requests <pre><code>  curl --location --request GET '{{ ehrscapeBaseUrl }}/template' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: {{ authToken }}'\n</code></pre> <pre><code>  var axios = require('axios');\nvar config = {\nmethod: 'get',\nurl: '{{ ehrscapeBaseUrl }}/template',\nheaders: { 'Accept': 'application/json', 'Authorization': '{{ authToken }}'\n}\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"{{ ehrscapeBaseUrl }}/template\"\npayload = {}\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': ' {{ authToken }}'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"ehrscape/ECDR2-openehr-templates/#response","title":"Response","text":"<p>If your CDR is already provisioned with some templates, you will get a <code>200</code> code and some output like this...</p> <pre><code>{\n\"templates\": [\n{\n\"templateId\": \"DHCI - Suspected Covid-19 assessment.v0\",\n\"createdOn\": \"2020-03-03T18:26:47.943Z\"\n},\n{\n\"templateId\": \"Vital Signs Encounter (Composition)\",\n\"createdOn\": \"2019-10-29T18:01:30.819Z\"\n},\n{\n\"templateId\": \"WHO - Suspected Covid-19 assessment.v0\",\n\"createdOn\": \"2020-02-28T18:46:29.960Z\"\n}\n]\n}\n</code></pre> <p>otherwise you should get a <code>204</code> code and an empty array.</p> <p>If you get some other error, this is likely to be that you have not set the baseEhrscapeURL correctly, or that the Authorization token is incorrect.</p>"},{"location":"ehrscape/ECDR2-openehr-templates/#b-upload-an-operational-template-xml","title":"B. Upload an operational template (XML)","text":"<p>You should be able to find an example 'operational' template in the <code>\\technical\\templates</code> folder. This is an XML file which contains the 'constraints' information required by the CDR to correctly validate anty information that is committed.</p> <p>The template example with <code>templateId : 'DHI - Urology_PROMs-v0'</code> represents a simple data-entry dataset to allow patients with Prostate cancer to record how they are feeling, and then share this with their care team.</p> <p>Don't worry for now about the format of the file itself. It follows the Archetype Object Model (1.4), but is always generated automatically by tools such as the openEHR Archetype Designer. </p> cURLNodeJS/AxiosPython/requests <pre><code>    curl --location --request POST '{{ ehrscapeBaseUrl }}/template/' \\\n--header 'Content-Type: application/xml' \\\n--header 'Authorization: {{ authToken }}' \\\n--data-raw '&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\n    &lt;template xmlns=\"http://schemas.openehr.org/v1\"&gt;\n      &lt;!-- Snipped for brevity --&gt;\n    &lt;/template&gt;\n    '\n</code></pre> <p>```js   var axios = require('axios');   var data = '&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\\n\\n\\n TRIMMED for Brevity...... \\n';</p> <p>var config = {     method: 'post',     url: '{{ ehrscapeBaseUrl }}/template/',     headers: {        'Accept': 'application/json',        'Content-Type': 'application/xml',       'Authorization': '{{ authToken }}'     },     data : data   };</p> <p>axios(config)   .then(function (response) {     console.log(JSON.stringify(response.data));   })   .catch(function (error) {     console.log(error);   }); ``</p> <pre><code>import requests\nurl = \"{{ ehrscapeBaseUrl }}/template/\"\npayload = \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?&gt;\\n&lt;template xmlns=\\\"http://schemas.openehr.org/v1\\\"&gt;\\n    &lt;language&gt;\\n        &lt;terminology_id&gt;\\n            &lt;value&gt;ISO_639-1&lt;/value&gt;\\n        &lt;/terminology_id&gt;\\n        &lt;code_string&gt;en&lt;/code_string&gt;\\n    &lt;/language&gt;\\n    &lt;description&gt;\\n -- Trimmed for brevity --- &lt;/template&gt;\"\nheaders = {\n'Content-Type': 'application/xml',\n'Authorization': '{{ authToken }}'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"ehrscape/ECDR2-openehr-templates/#response_1","title":"Response","text":"<p>Better CDR will give a <code>201</code> response code and return the <code>templateID</code>.</p> <pre><code>{\n\"action\": \"CREATE\",\n\"templateId\": \"NES-ACP_COVID.v0.0\"\n}\n</code></pre>"},{"location":"ehrscape/ECDR2-openehr-templates/#overwriting-an-existing-template","title":"Overwriting an existing template","text":"<p>The BetterCDR allows templates to be over-written by simply re-sending the <code>POST</code> call and returns a <code>201</code> code.</p>"},{"location":"ehrscape/ECDR2-openehr-templates/#better-web-templates","title":"Better 'Web templates'","text":"<p>As well as being used to validate patient records when they are commited to the CDR, templates are used as the basis for many other types of technical artefact, such as automatic forms builders, class library generation, and for client-side validation in UI.</p> <p>Although formally aligned with the in-memory AOM, the operational template can be hard to parse and understand, particularly if you are just trying to understand the various schema constraints.</p> <p>For this purpose, you may find it helpful to generate a 'Web template' - this is a much simpler JSON format, itself based on the operational template, and which can be exported from the openEHR Archetype Designer via the Export menu or retrieved via the Get Web Template (JSON) call.</p> cURLNodeJS/AxiosPython/requests <p><code>bash   curl --location --request GET '{{ ehrscapeBaseUrl }}/template/{{ templateId }}' \\   --header 'Content-Type: application/json' \\   --header 'Authorization: {{ authToken }}</code></p> <pre><code>var axios = require('axios');\nvar config = {\nmethod: 'get',\nurl: '{{ ehrscapeBaseUrl }}/template/{{ templateId }}',\nheaders: { 'Content-Type': 'application/json', 'Authorization': '{{ authToken }}', }\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"{{ ehrscapeBaseUrl }}/template/{{ templateId }}\"\npayload = {}\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': '{{ authToken }}',\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre> <p>Now that we have a valid template uploaded, we can Commit a Composition of patient data to the CDR.</p>"},{"location":"ehrscape/ECDR3-committing-a-composition/","title":"Committing openEHR data","text":"<p>All data committed to an openEHR CDR is done so via a <code>POST /composition</code> call - as a JSON or XML 'blob'. </p> <p>As it is committed, the data will be validated against both the appropriate openEHR template and the underlying Reference Model schema.</p> <p>If the data is valid, it will be stored in the CDR and is allocated a unique <code>compositionID</code>, which is returned by the POST /composition call on a successful call.</p> <p>This section will submit an example Composition to the CDR by running a <code>POST /composition - Commit composition</code> call.</p> <p>A number of data serialisation options can be used. In this case we will use the Better <code>STRUCTURED JSON</code> format, as it is somewhat easier to use than the current openEHR <code>CANONICAL JSON</code> format.</p>"},{"location":"ehrscape/ECDR3-committing-a-composition/#better-ehrscape-post-composition-commit-composition-structured","title":"Better Ehrscape: `POST /composition - Commit Composition STRUCTURED'","text":""},{"location":"ehrscape/ECDR3-committing-a-composition/#parameters","title":"Parameters","text":"<p><code>ehrId</code>:  This is is the internal CDR identifier for a specific patient. When a patient is registered with the CDR,an EHR object is created with a unique <code>ehr_id</code> identifier, and is associated with an external <code>subjectId</code> and subjectNamespace e.g an NHS Number, CHI number, or a local hospital number.</p> <p>We will find out how to work out the correct <code>ehrId</code> for a patient in a future section.</p> <p>Generally when you first open a patient record session, you will retrieve their <code>ehrId</code> via their <code>subjectID</code> and <code>subjectNamespace</code>. We will explain how to do that in the next section.</p> <p>For testing purposes, you should use a known <code>ehrId</code>. If you have a Postman environment file, an example will be in there, otherwise you can find out how to identify valid ehrIds here</p> <p><code>templateId</code>: This is the identifier of the openEHR template, against which you need to validate the composition, in this case <code>DHI - Urology_PROMs-v0</code> </p> <p><code>format</code>: This defines the format of JSON or XML that you are sending. Use <code>STRUCTURED</code> for this example.</p>"},{"location":"ehrscape/ECDR3-committing-a-composition/#request","title":"Request","text":"PostmancURLNodeJS/AxiosPython/requests <pre><code>    curl --location \\\n--request POST 'https://rest.ehrscape.com/rest/v1/v1/composition?ehrId=3e674739-950c-4b8a-976b-5aef21c618c5&amp;templateId=DHI%20-%20Urology_PROMs-v0&amp;format=STRUCTURED' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==' \\\n--data-raw '{\n   {\n    \"prostate_cancer_proms_report\": {\n        \"language\": [\n            {\n                \"|code\": \"en\",\n                \"|terminology\": \"ISO_639-1\"\n            }\n        ],\n        \"territory\": [\n            {\n                \"|code\": \"EN\",\n                \"|terminology\": \"ISO_3166-1\"\n            }\n        ],\n        \"context\": [\n            {\n                \"xds_metadata\": [\n                    {\n                        \"document_type\": [\n                            \"Patient recorded outcome measures\"\n                        ]\n                    }\n                ],\n                \"start_time\": [\n                    \"2020-07-05T13:32:56.186Z\"\n                ],\n                \"setting\": [\n                    {\n                        \"|code\": \"238\",\n                        \"|value\": \"other care\",\n                        \"|terminology\": \"openehr\"\n                    }\n                ]\n            }\n        ],\n         \"what_matters_to_me\": [\n                {\n                    \"what_matters_to_me\": [\n                    \"Parents\",\n                    \"Mood\",\n                    \"Isolation\",\n                    \"Eating\",\n                    \"Family\",\n                    \"Safety\"\n                    ]\n                }\n                ],\n        \"howru_score\": [ {\n            \"pain_or_discomfort\": [\n                {\n                    \"|code\": \"at0041\",\n                    \"|value\": \"slight\",\n                    \"|ordinal\": 1\n                }\n            ],\n            \"feeling_low_or_worried\": [\n                {\n                    \"|code\": \"at0042\",\n                    \"|value\": \"quite a lot\",\n                    \"|ordinal\": 2\n                }\n            ],\n            \"limited_in_what_i_can_do\": [\n                {\n                    \"|code\": \"at0041\",\n                    \"|value\": \"slight\",\n                    \"|ordinal\": 1\n                }\n            ],\n            \"dependent_on_others\": [\n                {\n                    \"|code\": \"at0043\",\n                    \"|value\": \"extreme\",\n                    \"|ordinal\": 3\n                }\n            ],\n            \"summary_score\": [\n                4\n            ],\n            \"time\": [\n                \"2020-07-21T15:41:54.175Z\"\n            ],\n            \"language\": [\n                {\n                    \"|code\": \"en\",\n                    \"|terminology\": \"ISO_639-1\"\n                }\n            ],\n            \"encoding\": [\n                {\n                    \"|code\": \"UTF-8\",\n                    \"|terminology\": \"IANA_character-sets\"\n                }\n            ]\n        }\n    ], \n        \"eortc_qlq-c30\": [\n                    {\n                        \"trouble_doing_strenuous_activities\": [\n                            {\n                                \"|code\": \"at0007\",\n                                \"|value\": \"Quite a bit\",\n                                \"|ordinal\": 3\n                            }\n                        ],\n                        \"trouble_taking_a_long_walk\": [\n                            {\n                                \"|code\": \"at0040\",\n                                \"|value\": \"Quite a bit\",\n                                \"|ordinal\": 3\n                            }\n                        ],\n                        \"trouble_taking_a_short_walk_outside_of_the_house\": [\n                            {\n                                \"|code\": \"at0044\",\n                                \"|value\": \"Quite a bit\",\n                                \"|ordinal\": 3\n                            }\n                        ],\n                        \"need_to_stay_in_bed_or_a_chair_during_the_day\": [\n                            {\n                                \"|code\": \"at0049\",\n                                \"|value\": \"Very much\",\n                                \"|ordinal\": 4\n                            }\n                        ],\n                        \"need_help_with_eating_dressing_washing_yourself_or_using_the_toilet\": [\n                            {\n                                \"|code\": \"at0051\",\n                                \"|value\": \"A little\",\n                                \"|ordinal\": 2\n                            }\n                        ],\n                        \"during_the_past_week_were_limited_in_doing_either_work_or_other_daily_activities\": [\n                            {\n                                \"|code\": \"at0056\",\n                                \"|value\": \"Quite a bit\",\n                                \"|ordinal\": 3\n                            }\n                        ],\n                        \"during_the_past_week_were_limited_in_pursuing_hobbies_or_other_leisure_time_activities\": [\n                            {\n                                \"|code\": \"at0060\",\n                                \"|value\": \"Quite a bit\",\n                                \"|ordinal\": 3\n                            }\n                        ],\n                        \"during_the_past_week_had_short_of_breath\": [\n                            {\n                                \"|code\": \"at0064\",\n                                \"|value\": \"Quite a bit\",\n                                \"|ordinal\": 3\n                            }\n                        ],\n                        \"during_the_past_week_had_pain\": [\n                            {\n                                \"|code\": \"at0067\",\n                                \"|value\": \"A little\",\n                                \"|ordinal\": 2\n                            }\n                        ],\n                        \"during_the_past_week_need_to_rest\": [\n                            {\n                                \"|code\": \"at0072\",\n                                \"|value\": \"Quite a bit\",\n                                \"|ordinal\": 3\n                            }\n                        ],\n                        \"during_the_past_week_had_trouble_sleeping\": [\n                            {\n                                \"|code\": \"at0076\",\n                                \"|value\": \"Quite a bit\",\n                                \"|ordinal\": 3\n                            }\n                        ],\n                        \"during_the_past_week_felt_weak\": [\n                            {\n                                \"|code\": \"at0078\",\n                                \"|value\": \"Not at all\",\n                                \"|ordinal\": 1\n                            }\n                        ],\n                        \"during_the_past_week_lacked_appetite\": [\n                            {\n                                \"|code\": \"at0084\",\n                                \"|value\": \"Quite a bit\",\n                                \"|ordinal\": 3\n                            }\n                        ],\n                        \"during_the_past_week_felt_nauseated\": [\n                            {\n                                \"|code\": \"at0086\",\n                                \"|value\": \"Not at all\",\n                                \"|ordinal\": 1\n                            }\n                        ],\n                        \"during_the_past_week_had_vomited\": [\n                            {\n                                \"|code\": \"at0090\",\n                                \"|value\": \"Not at all\",\n                                \"|ordinal\": 1\n                            }\n                        ],\n                        \"during_the_past_week_have_been_constipated\": [\n                            {\n                                \"|code\": \"at0097\",\n                                \"|value\": \"Very much\",\n                                \"|ordinal\": 4\n                            }\n                        ],\n                        \"during_the_past_week_had_diarrhea\": [\n                            {\n                                \"|code\": \"at0099\",\n                                \"|value\": \"A little\",\n                                \"|ordinal\": 2\n                            }\n                        ],\n                        \"during_the_past_week_were_tired\": [\n                            {\n                                \"|code\": \"at0102\",\n                                \"|value\": \"Not at all\",\n                                \"|ordinal\": 1\n                            }\n                        ],\n                        \"during_the_past_week_pain_interfere_with_daily_activities\": [\n                            {\n                                \"|code\": \"at0109\",\n                                \"|value\": \"Very much\",\n                                \"|ordinal\": 4\n                            }\n                        ],\n                        \"during_the_past_week_had_difficulty_in_concentrating\": [\n                            {\n                                \"|code\": \"at0110\",\n                                \"|value\": \"Not at all\",\n                                \"|ordinal\": 1\n                            }\n                        ],\n                        \"during_the_past_week_felt_tense\": [\n                            {\n                                \"|code\": \"at0115\",\n                                \"|value\": \"A little\",\n                                \"|ordinal\": 2\n                            }\n                        ],\n                        \"during_the_past_week_were_worried\": [\n                            {\n                                \"|code\": \"at0121\",\n                                \"|value\": \"Very much\",\n                                \"|ordinal\": 4\n                            }\n                        ],\n                        \"during_the_past_week_felt_irritable\": [\n                            {\n                                \"|code\": \"at0123\",\n                                \"|value\": \"A little\",\n                                \"|ordinal\": 2\n                            }\n                        ],\n                        \"during_the_past_week_felt_depressed\": [\n                            {\n                                \"|code\": \"at0128\",\n                                \"|value\": \"Quite a bit\",\n                                \"|ordinal\": 3\n                            }\n                        ],\n                        \"during_the_past_week_had_difficulty_remembering_things\": [\n                            {\n                                \"|code\": \"at0133\",\n                                \"|value\": \"Very much\",\n                                \"|ordinal\": 4\n                            }\n                        ],\n                        \"during_the_past_week_physical_condition_or_medical_treatment_interfered_with_family_life\": [\n                            {\n                                \"|code\": \"at0135\",\n                                \"|value\": \"A little\",\n                                \"|ordinal\": 2\n                            }\n                        ],\n                        \"during_the_past_week_physical_condition_or_medical_treatment_interfered_with_social_activities\": [\n                            {\n                                \"|code\": \"at0138\",\n                                \"|value\": \"Not at all\",\n                                \"|ordinal\": 1\n                            }\n                        ],\n                        \"during_the_past_week_physical_condition_or_medical_treatment_caused_financial_difficulties\": [\n                            {\n                                \"|code\": \"at0143\",\n                                \"|value\": \"A little\",\n                                \"|ordinal\": 2\n                            }\n                        ],\n                        \"rate_overall_health_during_the_past_week\": [\n                            {\n                                \"|code\": \"at0147\",\n                                \"|value\": \"2\",\n                                \"|ordinal\": 2\n                            }\n                        ],\n                        \"rate_overall_quality_of_life_during_the_past_week\": [\n                            {\n                                \"|code\": \"at0157\",\n                                \"|value\": \"5\",\n                                \"|ordinal\": 5\n                            }\n                        ],\n                        \"total_score\": [\n                            61\n                        ],\n                        \"time\": [\n                            \"2020-07-15T16:47:06.320Z\"\n                        ],\n                \"language\": [\n                    {\n                        \"|code\": \"en\",\n                        \"|terminology\": \"ISO_639-1\"\n                    }\n                ],\n                \"encoding\": [\n                    {\n                        \"|code\": \"UTF-8\",\n                        \"|terminology\": \"IANA_character-sets\"\n                    }\n                ]\n            }\n        ],\n        \"i-pss_prostate_score\": [\n            {\n                \"a1._incomplete_emptying\": [\n                    {\n                        \"|code\": \"at0015\",\n                        \"|value\": \"Less Than 1 Time In 5\",\n                        \"|ordinal\": 1\n                    }\n                ],\n                \"a2._frequency\": [\n                    {\n                        \"|code\": \"at0016\",\n                        \"|value\": \"Less Than Half The Time\",\n                        \"|ordinal\": 2\n                    }\n                ],\n                \"a3._intermittency\": [\n                    {\n                        \"|code\": \"at0017\",\n                        \"|value\": \"About Half The Time\",\n                        \"|ordinal\": 3\n                    }\n                ],\n                \"a4._urgency\": [\n                    {\n                        \"|code\": \"at0017\",\n                        \"|value\": \"About Half The Time\",\n                        \"|ordinal\": 3\n                    }\n                ],\n                \"a5._weak_stream\": [\n                    {\n                        \"|code\": \"at0016\",\n                        \"|value\": \"Less Than Half The Time\",\n                        \"|ordinal\": 2\n                    }\n                ],\n                \"a6._straining\": [\n                    {\n                        \"|code\": \"at0018\",\n                        \"|value\": \"More Than Half The Time\",\n                        \"|ordinal\": 4\n                    }\n                ],\n                \"a7._nocturia\": [\n                    {\n                        \"|code\": \"at0060\",\n                        \"|value\": \"3 times\",\n                        \"|ordinal\": 3\n                    }\n                ],\n                \"total_i-pss_score\": [\n                    18\n                ],\n                \"i-pss_score_grade\": [\n                    {\n                        \"|code\": \"at0087\",\n                        \"|value\": \"8-19 Moderate\",\n                        \"|terminology\": \"local\"\n                    }\n                ],\n                \"time\": [\n                    \"2020-07-05T13:32:56.186Z\"\n                ],\n                \"language\": [\n                    {\n                        \"|code\": \"en\",\n                        \"|terminology\": \"ISO_639-1\"\n                    }\n                ],\n                \"encoding\": [\n                    {\n                        \"|code\": \"UTF-8\",\n                        \"|terminology\": \"IANA_character-sets\"\n                    }\n                ]\n            }\n        ],\n        \"category\": [\n            {\n                \"|code\": \"433\",\n                \"|value\": \"event\",\n                \"|terminology\": \"openehr\"\n            }\n        ],\n        \"composer\": [\n            {\n                \"|name\": \"John Smith\"\n            }\n        ]\n    }\n}'\n</code></pre> <pre><code>    var axios = require('axios');\nvar data = JSON.stringify({\"prostate_cancer_proms_report\": // trimmed for brevity}\");\nvar config = {\nmethod: 'post',\nurl: 'https://rest.ehrscape.com/rest/v1/v1/composition?ehrId=3e674739-950c-4b8a-976b-5aef21c618c5&amp;templateId=DHI - Urology_PROMs-v0&amp;format=STRUCTURED',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==', data : data\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>```python\nimport requests\n\nurl = \"https://rest.ehrscape.com/rest/v1/v1/composition?ehrId=3e674739-950c-4b8a-976b-5aef21c618c5&amp;templateId=DHI - Urology_PROMs-v0&amp;format=STRUCTURED\"\n\npayload = \"{\\n    \\\"prostate_cancer_proms_report\\\": {\\n              \\\"composer\\\": [\\n              {\\n                  \\\"|name\\\": \\\"John Smith\\\"\\n              }\\n          ]\\n      }\\n TRIMMED for BREVITY }\"\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==',\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\n\nprint(response.text.encode('utf8'))\n</code></pre> <p>```</p>"},{"location":"ehrscape/ECDR3-committing-a-composition/#response","title":"Response","text":"<pre><code>{\n\"meta\": {\n\"href\": \"https://rest.ehrscape.com/rest/v1/v1/composition/59e8f5a2-6fb6-47d5-9acd-ae6309d0f1dd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::1\"\n},\n\"action\": \"CREATE\",\n\"compositionUid\": \"59e8f5a2-6fb6-47d5-9acd-ae6309d0f1dd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::1\"\n}\n</code></pre> <p>A successful commit will give a <code>200</code> response code. </p> <p>If the JSON is incorrectly formatted or there is a data validation error, you will get an error message. Interpreting validation error messages can be quite challenging for those new to openEHR, so we will cover this in a separate section later.</p> <p>The <code>Composition Id</code> and versioning</p> <p>The <code>compositionId</code> (sometimes <code>uid</code> or <code>compositionUid</code>) is the unique identifier allocated to (and held within) every composition stored within the CDR.</p> <p>You will see that it ends in <code>...::1</code>. The <code>1</code> is the version of this composition instance. If you need to update the instance (perhaps because of an error), you need to do so via a PUT / composition call and if successful the composition version number will clock up to <code>::2</code>.</p> <p>In essence every commit is versioned and retained for medico-legal reasons.</p> <p>Initial version <code>2cf04d6c-31e8-4599-a14b-9a0add4de5d9::fivium.ehrscape.com::1</code></p> <p>Revised version <code>2cf04d6c-31e8-4599-a14b-9a0add4de5d9::fivium.ehrscape.com::2</code></p> <p>If you need to retrieve a composition, it is normally ok to simply use the root part <code>2cf04d6c-31e8-4599-a14b-9a0add4de5d9</code> which will return the latest revision in the current repository.</p> <p>Similarly, when a composition is deleted, this is a logical delete and the composition can always be retrieved, though is not normally accessible via querying.</p> <p>We will go through the process of updating a composition, via a <code>PUT /composition</code> call later.</p> <p>For now let's just retrieve the composition we just committed, via the <code>GET /composition</code> call.</p>"},{"location":"ehrscape/ECDR4-retrieving-a-composition/","title":"Retrieving an openEHR Composition","text":"<p>All data committed to an openEHR CDR is done so via a POST or PUT /composition call - as a JSON or XML 'blob'. </p> <p>This section will cover how to retrieve a previously stored Composition by running a <code>GET / composition</code> call.</p> <p>A number of data serialisation options, can be used on retrieval. In this case we will ask for the Better <code>STRUCTURED JSON</code> format, as this is what we used when committing the composition, but you can commit and retrieve using different formats if you wish.</p>"},{"location":"ehrscape/ECDR4-retrieving-a-composition/#ehrscape-get-composition-example","title":"Ehrscape GET /composition example","text":""},{"location":"ehrscape/ECDR4-retrieving-a-composition/#parameters","title":"Parameters","text":"<p><code>compositionId</code>: </p> <p>This is is the composition UID for the composition you wish to retrieve. Don't worry about how we find that out for now. Just use the UID for the composition you just committed in the last section. </p> <p>We will find out how to find compositionIds in a subsequent section.</p> <p><code>format</code>:</p> <p>This defines the format of JSON or XML that you are requesting. Use <code>STRUCTURED</code> for this example.</p>"},{"location":"ehrscape/ECDR4-retrieving-a-composition/#a-retrieve-an-openehr-composition-structured-json","title":"A. Retrieve an openEHR Composition (<code>STRUCTURED JSON</code>)","text":"PostmancURLNodeJS/AxiosPython/requests <pre><code>    curl --location --request GET 'https://rest.ehrscape.com/rest/v1/composition/{{ compositionId }}?format=STRUCTURED' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: {{ authToken }}'\n</code></pre> <pre><code>  var axios = require('axios');\nvar config = {\nmethod: 'get',\nurl: 'https://rest.ehrscape.com/rest/v1/composition/{{ compositionId }}?format=STRUCTURED',\nheaders: { 'Content-Type': 'application/json', 'Authorization': '{{ authToken }}'\n}\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>  import requests\nurl = \"https://rest.ehrscape.com/rest/v1/composition/{{ compositionId }}?format=STRUCTURED\"\npayload = {}\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': '{{ authToken }}'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"ehrscape/ECDR4-retrieving-a-composition/#response","title":"Response","text":"<p>If the composition is found a <code>200</code> code will be returned along with the composition object , which you will note now includes the uid, but should otherwise be identical to that which you previously submitted.</p> <pre><code>  {\n\"meta\": {\n\"href\": \"https://rest.ehrscape.com/rest/v1/v1/composition/e921fde4-3800-44c7-b39a-e2c8769a9c1d::a81f47c6-a757-4e34-b644-3ccc62b4a01c::1\"\n},\n\"compositionUid\": \"e921fde4-3800-44c7-b39a-e2c8769a9c1d::a81f47c6-a757-4e34-b644-3ccc62b4a01c::1\",\n\"format\": \"STRUCTURED\",\n\"templateId\": \"DHI - Urology_PROMs-v0\",\n\"composition\": {\n\"prostate_cancer_proms_report\": {\n\"_uid\": [\n\"e921fde4-3800-44c7-b39a-e2c8769a9c1d::a81f47c6-a757-4e34-b644-3ccc62b4a01c::1\"\n]\n// ..... Snipped for brevity\n\"composer\": [\n{\n\"|name\": \"John Smith\"\n}\n]\n}\n},\n\"deleted\": false,\n\"lastVersion\": true,\n\"ehrId\": \"3e674739-950c-4b8a-976b-5aef21c618c5\",\n\"lifecycleState\": \"COMPLETE\"\n}\n</code></pre> <p>Other data formats</p> <p>The Better Ehrscape API offers several other serialisation formats. You can have a look at these by simply changing the <code>format</code> parameter on the <code>GET / composition</code> call, and the call Header <code>Accept</code> to switch between JSON and XML.</p>"},{"location":"ehrscape/ECDR4-retrieving-a-composition/#flat-json","title":"'FLAT JSON'","text":"<p>This uses the same path-shortening mechanism as structured JSON but flattens all of the tree structure to a set of name-value pairs. Some developers prefer this to the STRUCTURED format.</p> <pre><code>format=FLAT\nAccept : `application/json'\n</code></pre>"},{"location":"ehrscape/ECDR4-retrieving-a-composition/#raw-json","title":"'RAW JSON'","text":"<p>This is very similar to, but not identical to the openEHR Canonical JSON format, which essentially supersedes it. It very closely adheres to the openEHR Reference model specification but is pretty voluminous.</p> <pre><code>format=RAW\nAccept : `application/json'\n</code></pre>"},{"location":"ehrscape/ECDR4-retrieving-a-composition/#raw-xml","title":"'RAW XML'","text":"<p>This is 'canonical' openEHR XML which is also accepted by the openEHR REST  API. It is the lingu-franca for all openEHR CDRs, even those which do not support the REST CDR API, will normally accept and expose data in this XML format. </p> <pre><code>format=RAW\nAccept : `application/xml'\n</code></pre>"},{"location":"ehrscape/ECDR5-retrieving-an-ehrId/","title":"Retrieving the patient's ehrId","text":"<p>When a patient is registered with a CDR, by supplying their '<code>subjectId</code> (normally a real-word identifier like an NHS number, CHI number or hospital MRI), a top-level <code>EHR</code> object is created in the datastore along with a unique identifier for that patient.</p> <p>Most of the CDR API calls require an <code>ehrId</code> to identify the correct patient ,so normally the first activity required if interacting with a patient record is to retrieve their <code>ehrId</code>.</p> <p>Hint</p> <p>The only datapoint you really need to retrieve is <code>ehrId</code>.  You want to consider caching this for the session, so that it can be used for a number of subsequent calls.</p>"},{"location":"ehrscape/ECDR5-retrieving-an-ehrId/#better-ehrscape-get-ehr-get-ehrstatus-from-subjectid","title":"Better Ehrscape: <code>GET /ehr - Get ehrStatus from SubjectId</code>","text":""},{"location":"ehrscape/ECDR5-retrieving-an-ehrId/#parameters","title":"Parameters","text":""},{"location":"ehrscape/ECDR5-retrieving-an-ehrId/#subjectid","title":"<code>subjectId</code>:","text":"<p>This is the external identifier by which the patient is known within the CDR. It is normally a real-word identifier like an NHS number, CHI number or Hospital 'MRI' number, and will have been supplied to the CDR when the patients' <code>EHR</code> object was created in the datastore.</p> <p>Example value : <code>9999999000</code></p>"},{"location":"ehrscape/ECDR5-retrieving-an-ehrId/#subjectnamespace","title":"<code>subjectNamespace</code>:","text":"<p>This is just a unique string used to identify the numbering scheme used for the <code>subjectId</code>. It will commonly be some sort of URI such as <code>uk.nhs.nhs_number</code> and will have been agreed at national level.</p> <p>Example value : <code>uk.nhs.nhs_number</code></p> PostmancURLNodeJs - AxiosPython/requests <p></p> <pre><code>    curl --location \\\n--request GET 'https://rest.ehrscape.com/rest/v1/ehr/?subjectId=9999999000&amp;subjectNamespace=uk.nhs.nhs_number' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n</code></pre> <pre><code>  var axios = require('axios');\nvar config = {\nmethod: 'get',\nurl: ' https://rest.ehrscape.com/rest/v1/v1/ehr/?subjectId=9999999000&amp;subjectNamespace=uk.nhs.nhs_number',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"https://rest.ehrscape.com/rest/v1/ehr/?subjectId=9999999000&amp;subjectNamespace=uk.nhs.nhs_number\"\npayload = {}\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==',\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"ehrscape/ECDR5-retrieving-an-ehrId/#response","title":"Response","text":"<p>Better CDR will give a <code>200</code> response code and this structure.</p> <pre><code>{\n\"meta\": {\n\"href\": \"https://cdr.code4health.org/rest/v1/ehr/3e674739-950c-4b8a-976b-5aef21c618c5\"\n},\n\"ehrStatus\": {\n\"subjectId\": \"9999999000\",\n\"subjectNamespace\": \"uk.nhs.nhs_number\",\n\"queryable\": true,\n\"modifiable\": true,\n\"otherDetails\": {\n\"@class\": \"ITEM_TREE\",\n\"items\": [\n{\n\"@class\": \"CLUSTER\",\n\"archetype_details\": {\n\"@class\": \"ARCHETYPED\",\n\"archetype_id\": {\n\"@class\": \"ARCHETYPE_ID\",\n\"value\": \"openEHR-EHR-CLUSTER.person_anonymised_parent.v1\"\n},\n\"rm_version\": \"1.0.1\"\n},\n\"archetype_node_id\": \"openEHR-EHR-CLUSTER.person_anonymised_parent.v1\",\n\"items\": [\n{\n\"@class\": \"ELEMENT\",\n\"name\": {\n\"@class\": \"DV_TEXT\",\n\"value\": \"Administrative Gender\"\n},\n\"archetype_node_id\": \"at0001\",\n\"value\": {\n\"@class\": \"DV_CODED_TEXT\",\n\"value\": \"Male\",\n\"defining_code\": {\n\"@class\": \"CODE_PHRASE\",\n\"terminology_id\": {\n\"@class\": \"TERMINOLOGY_ID\",\n\"value\": \"local\"\n},\n\"code_string\": \"at0009\"\n}\n}\n},\n{\n\"@class\": \"ELEMENT\",\n\"name\": {\n\"@class\": \"DV_TEXT\",\n\"value\": \"Birth Sex\"\n},\n\"archetype_node_id\": \"at0002\",\n\"value\": {\n\"@class\": \"DV_CODED_TEXT\",\n\"value\": \"Male\",\n\"defining_code\": {\n\"@class\": \"CODE_PHRASE\",\n\"terminology_id\": {\n\"@class\": \"TERMINOLOGY_ID\",\n\"value\": \"local\"\n},\n\"code_string\": \"at0009\"\n}\n}\n},\n{\n\"@class\": \"ELEMENT\",\n\"name\": {\n\"@class\": \"DV_TEXT\",\n\"value\": \"Vital Status\"\n},\n\"archetype_node_id\": \"at0003\",\n\"value\": {\n\"@class\": \"DV_CODED_TEXT\",\n\"value\": \"Alive\",\n\"defining_code\": {\n\"@class\": \"CODE_PHRASE\",\n\"terminology_id\": {\n\"@class\": \"TERMINOLOGY_ID\",\n\"value\": \"local\"\n},\n\"code_string\": \"at0004\"\n}\n}\n},\n{\n\"@class\": \"ELEMENT\",\n\"name\": {\n\"@class\": \"DV_TEXT\",\n\"value\": \"Birth Year\"\n},\n\"archetype_node_id\": \"at0014\",\n\"value\": {\n\"@class\": \"DV_DATE\",\n\"value\": \"1944\"\n}\n}\n]\n}\n]\n}\n},\n\"ehrId\": \"3e674739-950c-4b8a-976b-5aef21c618c5\"\n}\n</code></pre>"},{"location":"ehrscape/ECDR6-updating-a-composition/","title":"Updating an openEHR Composition","text":"<p>All new data committed to an openEHR CDR is done so via a <code>POST /composition call</code> - as a JSON or XML 'blob'.</p> <p>Most compositions will only need to be updated if an error or omission needs to be corrected. All openEHR data is strictly audited and version controlled, so an Update operation requires a <code>PUT /composition call</code>.</p> <p>You will nearly always with to first retrieve the original version of the composition via a <code>GET /composition</code> call, update the JSON or XML object and then perform the <code>PUT</code></p>"},{"location":"ehrscape/ECDR6-updating-a-composition/#better-ehrscape-put-composition-update-composition","title":"Better Ehrscape <code>PUT /composition - Update composition</code>","text":""},{"location":"ehrscape/ECDR6-updating-a-composition/#parameters","title":"Parameters","text":"<p><code>compositionId</code>:  This is is the <code>composition UID</code> for the previous version of the composition i.e the version that you are about to overwrite. Don't worry about how we find this, just use the <code>uid</code> for the composition you just committed in the last section.</p> <p><code>format</code>: This defines the format of JSON or XML that you are requesting. Use <code>STRUCTURED</code> for this example.</p> <p><code>templateId</code>:  This is the identifier of the openEHR template, against which you need to validate the composition, in this case, <code>DHI - Urology_PROMs-v0</code>.</p>"},{"location":"ehrscape/ECDR6-updating-a-composition/#request","title":"Request","text":"PostmancURLNodeJS/AxiosPython/requests <pre><code>   curl --location --request PUT 'https://rest.ehrscape.com/rest/v1/rest/v1/composition/b0d7f6cb-a429-49b2-b5f3-9637b409eebd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::1?format=STRUCTURED&amp;templateId=DHI%20-%20Urology_PROMs-v0' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==' \\\n--data-raw '{\n        \"prostate_cancer_proms_report\": {\n            \"language\": [\n                {\n                    \"|code\": \"en\",\n                    \"|terminology\": \"ISO_639-1\"\n                }\n            ],\n            \"territory\": [\n                {\n                    \"|code\": \"EN\",\n                    \"|terminology\": \"ISO_3166-1\"\n                }\n            ],\n            \"context\": [\n                {\n                    \"xds_metadata\": [\n                        {\n                            \"document_type\": [\n                                \"Patient recorded outcome measures\"\n                            ]\n                        }\n                    ],\n                    \"start_time\": [\n                        \"2020-07-05T13:32:56.186Z\"\n                    ],\n                    \"setting\": [\n                        {\n                            \"|code\": \"238\",\n                            \"|value\": \"other care\",\n                            \"|terminology\": \"openehr\"\n                        }\n                    ]\n                }\n            ],\n            \"what_matters_to_me\": [\n                {\n                    \"what_matters_to_me\": [\n                    \"Parents\",\n                    \"Mood\",\n                    \"Isolation\",\n                    \"Eating\",\n                    \"Family\",\n                    \"Safety\"\n                    ]\n                }\n                ],\n                \"howru_score\": [ {\n                \"pain_or_discomfort\": [\n                    {\n                        \"|code\": \"at0041\",\n                        \"|value\": \"slight\",\n                        \"|ordinal\": 1\n                    }\n                ],\n                \"feeling_low_or_worried\": [\n                    {\n                        \"|code\": \"at0042\",\n                        \"|value\": \"quite a lot\",\n                        \"|ordinal\": 2\n                    }\n                ],\n                \"limited_in_what_i_can_do\": [\n                    {\n                        \"|code\": \"at0041\",\n                        \"|value\": \"slight\",\n                        \"|ordinal\": 1\n                    }\n                ],\n                \"dependent_on_others\": [\n                    {\n                        \"|code\": \"at0043\",\n                        \"|value\": \"extreme\",\n                        \"|ordinal\": 3\n                    }\n                ],\n                \"summary_score\": [\n                    4\n                ],\n                \"time\": [\n                    \"2020-07-21T15:41:54.175Z\"\n                ],\n                \"language\": [\n                    {\n                        \"|code\": \"en\",\n                        \"|terminology\": \"ISO_639-1\"\n                    }\n                ],\n                \"encoding\": [\n                    {\n                        \"|code\": \"UTF-8\",\n                        \"|terminology\": \"IANA_character-sets\"\n                    }\n                ]\n            }\n        ],\n            \"eortc_qlq-c30\": [\n                        {\n                            \"trouble_doing_strenuous_activities\": [\n                                {\n                                    \"|code\": \"at0007\",\n                                    \"|value\": \"Quite a bit\",\n                                    \"|ordinal\": 3\n                                }\n                            ],\n                            \"trouble_taking_a_long_walk\": [\n                                {\n                                    \"|code\": \"at0040\",\n                                    \"|value\": \"Quite a bit\",\n                                    \"|ordinal\": 3\n                                }\n                            ],\n                            \"trouble_taking_a_short_walk_outside_of_the_house\": [\n                                {\n                                    \"|code\": \"at0044\",\n                                    \"|value\": \"Quite a bit\",\n                                    \"|ordinal\": 3\n                                }\n                            ],\n                            \"need_to_stay_in_bed_or_a_chair_during_the_day\": [\n                                {\n                                    \"|code\": \"at0049\",\n                                    \"|value\": \"Very much\",\n                                    \"|ordinal\": 4\n                                }\n                            ],\n                            \"need_help_with_eating_dressing_washing_yourself_or_using_the_toilet\": [\n                                {\n                                    \"|code\": \"at0051\",\n                                    \"|value\": \"A little\",\n                                    \"|ordinal\": 2\n                                }\n                            ],\n                            \"during_the_past_week_were_limited_in_doing_either_work_or_other_daily_activities\": [\n                                {\n                                    \"|code\": \"at0056\",\n                                    \"|value\": \"Quite a bit\",\n                                    \"|ordinal\": 3\n                                }\n                            ],\n                            \"during_the_past_week_were_limited_in_pursuing_hobbies_or_other_leisure_time_activities\": [\n                                {\n                                    \"|code\": \"at0060\",\n                                    \"|value\": \"Quite a bit\",\n                                    \"|ordinal\": 3\n                                }\n                            ],\n                            \"during_the_past_week_had_short_of_breath\": [\n                                {\n                                    \"|code\": \"at0064\",\n                                    \"|value\": \"Quite a bit\",\n                                    \"|ordinal\": 3\n                                }\n                            ],\n                            \"during_the_past_week_had_pain\": [\n                                {\n                                    \"|code\": \"at0067\",\n                                    \"|value\": \"A little\",\n                                    \"|ordinal\": 2\n                                }\n                            ],\n                            \"during_the_past_week_need_to_rest\": [\n                                {\n                                    \"|code\": \"at0072\",\n                                    \"|value\": \"Quite a bit\",\n                                    \"|ordinal\": 3\n                                }\n                            ],\n                            \"during_the_past_week_had_trouble_sleeping\": [\n                                {\n                                    \"|code\": \"at0076\",\n                                    \"|value\": \"Quite a bit\",\n                                    \"|ordinal\": 3\n                                }\n                            ],\n                            \"during_the_past_week_felt_weak\": [\n                                {\n                                    \"|code\": \"at0078\",\n                                    \"|value\": \"Not at all\",\n                                    \"|ordinal\": 1\n                                }\n                            ],\n                            \"during_the_past_week_lacked_appetite\": [\n                                {\n                                    \"|code\": \"at0084\",\n                                    \"|value\": \"Quite a bit\",\n                                    \"|ordinal\": 3\n                                }\n                            ],\n                            \"during_the_past_week_felt_nauseated\": [\n                                {\n                                    \"|code\": \"at0086\",\n                                    \"|value\": \"Not at all\",\n                                    \"|ordinal\": 1\n                                }\n                            ],\n                            \"during_the_past_week_had_vomited\": [\n                                {\n                                    \"|code\": \"at0090\",\n                                    \"|value\": \"Not at all\",\n                                    \"|ordinal\": 1\n                                }\n                            ],\n                            \"during_the_past_week_have_been_constipated\": [\n                                {\n                                    \"|code\": \"at0097\",\n                                    \"|value\": \"Very much\",\n                                    \"|ordinal\": 4\n                                }\n                            ],\n                            \"during_the_past_week_had_diarrhea\": [\n                                {\n                                    \"|code\": \"at0099\",\n                                    \"|value\": \"A little\",\n                                    \"|ordinal\": 2\n                                }\n                            ],\n                            \"during_the_past_week_were_tired\": [\n                                {\n                                    \"|code\": \"at0102\",\n                                    \"|value\": \"Not at all\",\n                                    \"|ordinal\": 1\n                                }\n                            ],\n                            \"during_the_past_week_pain_interfere_with_daily_activities\": [\n                                {\n                                    \"|code\": \"at0109\",\n                                    \"|value\": \"Very much\",\n                                    \"|ordinal\": 4\n                                }\n                            ],\n                            \"during_the_past_week_had_difficulty_in_concentrating\": [\n                                {\n                                    \"|code\": \"at0110\",\n                                    \"|value\": \"Not at all\",\n                                    \"|ordinal\": 1\n                                }\n                            ],\n                            \"during_the_past_week_felt_tense\": [\n                                {\n                                    \"|code\": \"at0115\",\n                                    \"|value\": \"A little\",\n                                    \"|ordinal\": 2\n                                }\n                            ],\n                            \"during_the_past_week_were_worried\": [\n                                {\n                                    \"|code\": \"at0121\",\n                                    \"|value\": \"Very much\",\n                                    \"|ordinal\": 4\n                                }\n                            ],\n                            \"during_the_past_week_felt_irritable\": [\n                                {\n                                    \"|code\": \"at0123\",\n                                    \"|value\": \"A little\",\n                                    \"|ordinal\": 2\n                                }\n                            ],\n                            \"during_the_past_week_felt_depressed\": [\n                                {\n                                    \"|code\": \"at0128\",\n                                    \"|value\": \"Quite a bit\",\n                                    \"|ordinal\": 3\n                                }\n                            ],\n                            \"during_the_past_week_had_difficulty_remembering_things\": [\n                                {\n                                    \"|code\": \"at0133\",\n                                    \"|value\": \"Very much\",\n                                    \"|ordinal\": 4\n                                }\n                            ],\n                            \"during_the_past_week_physical_condition_or_medical_treatment_interfered_with_family_life\": [\n                                {\n                                    \"|code\": \"at0135\",\n                                    \"|value\": \"A little\",\n                                    \"|ordinal\": 2\n                                }\n                            ],\n                            \"during_the_past_week_physical_condition_or_medical_treatment_interfered_with_social_activities\": [\n                                {\n                                    \"|code\": \"at0138\",\n                                    \"|value\": \"Not at all\",\n                                    \"|ordinal\": 1\n                                }\n                            ],\n                            \"during_the_past_week_physical_condition_or_medical_treatment_caused_financial_difficulties\": [\n                                {\n                                    \"|code\": \"at0143\",\n                                    \"|value\": \"A little\",\n                                    \"|ordinal\": 2\n                                }\n                            ],\n                            \"rate_overall_health_during_the_past_week\": [\n                                {\n                                    \"|code\": \"at0147\",\n                                    \"|value\": \"2\",\n                                    \"|ordinal\": 2\n                                }\n                            ],\n                            \"rate_overall_quality_of_life_during_the_past_week\": [\n                                {\n                                    \"|code\": \"at0157\",\n                                    \"|value\": \"5\",\n                                    \"|ordinal\": 5\n                                }\n                            ],\n                            \"total_score\": [\n                                61\n                            ],\n                            \"time\": [\n                                \"2020-07-15T16:47:06.320Z\"\n                            ],\n                    \"language\": [\n                        {\n                            \"|code\": \"en\",\n                            \"|terminology\": \"ISO_639-1\"\n                        }\n                    ],\n                    \"encoding\": [\n                        {\n                            \"|code\": \"UTF-8\",\n                            \"|terminology\": \"IANA_character-sets\"\n                        }\n                    ]\n                }\n            ],\n            \"i-pss_prostate_score\": [\n                {\n                    \"a1._incomplete_emptying\": [\n                        {\n                            \"|code\": \"at0015\",\n                            \"|value\": \"Less Than 1 Time In 5\",\n                            \"|ordinal\": 1\n                        }\n                    ],\n                    \"a2._frequency\": [\n                        {\n                            \"|code\": \"at0016\",\n                            \"|value\": \"Less Than Half The Time\",\n                            \"|ordinal\": 2\n                        }\n                    ],\n                    \"a3._intermittency\": [\n                        {\n                            \"|code\": \"at0017\",\n                            \"|value\": \"About Half The Time\",\n                            \"|ordinal\": 3\n                        }\n                    ],\n                    \"a4._urgency\": [\n                        {\n                            \"|code\": \"at0017\",\n                            \"|value\": \"About Half The Time\",\n                            \"|ordinal\": 3\n                        }\n                    ],\n                    \"a5._weak_stream\": [\n                        {\n                            \"|code\": \"at0016\",\n                            \"|value\": \"Less Than Half The Time\",\n                            \"|ordinal\": 2\n                        }\n                    ],\n                    \"a6._straining\": [\n                        {\n                            \"|code\": \"at0018\",\n                            \"|value\": \"More Than Half The Time\",\n                            \"|ordinal\": 4\n                        }\n                    ],\n                    \"a7._nocturia\": [\n                        {\n                            \"|code\": \"at0060\",\n                            \"|value\": \"3 times\",\n                            \"|ordinal\": 3\n                        }\n                    ],\n                    \"total_i-pss_score\": [\n                        18\n                    ],\n                    \"i-pss_score_grade\": [\n                        {\n                            \"|code\": \"at0087\",\n                            \"|value\": \"8-19 Moderate\",\n                            \"|terminology\": \"local\"\n                        }\n                    ],\n                    \"time\": [\n                        \"2020-07-05T13:32:56.186Z\"\n                    ],\n                    \"language\": [\n                        {\n                            \"|code\": \"en\",\n                            \"|terminology\": \"ISO_639-1\"\n                        }\n                    ],\n                    \"encoding\": [\n                        {\n                            \"|code\": \"UTF-8\",\n                            \"|terminology\": \"IANA_character-sets\"\n                        }\n                    ]\n                }\n            ],\n            \"category\": [\n                {\n                    \"|code\": \"433\",\n                    \"|value\": \"event\",\n                    \"|terminology\": \"openehr\"\n                }\n            ],\n            \"composer\": [\n                {\n                    \"|name\": \"John Smith\"\n                }\n            ]\n        }\n    }'\n</code></pre> <pre><code>  var axios = require('axios');\nvar config = {\nmethod: 'put',\nurl: 'https://rest.ehrscape.com/rest/v1/rest/v1/composition/b0d7f6cb-a429-49b2-b5f3-9637b409eebd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::1?format=STRUCTURED&amp;templateId=DHI%20-%20Urology_PROMs-v0',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Authorization: {{ authToken }}', }\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code> url = \"https://rest.ehrscape.com/rest/v1/rest/v1/composition/b0d7f6cb-a429-49b2-b5f3-9637b409eebd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::1?format=STRUCTURED&amp;templateId=DHI%20-%20Urology_PROMs-v0\"\npayload = {}\nheaders = {\n'Content-Type': 'application/json',\n'Authorization: {{ authToken }}',\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"ehrscape/ECDR6-updating-a-composition/#response","title":"Response","text":"<pre><code>{\n\"meta\": {\n\"href\": \"https://rest.ehrscape.com/rest/v1/rest/v1/composition/b0d7f6cb-a429-49b2-b5f3-9637b409eebd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::2\"\n},\n\"action\": \"UPDATE\",\n\"compositionUid\": \"b0d7f6cb-a429-49b2-b5f3-9637b409eebd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::2\"\n}\n</code></pre> <p>If the update is successful a <code>200</code> code will be returned.</p>"},{"location":"hse/HSE1-hse-project-overview/","title":"Overview of the HSE openEHR PoC project","text":"<p>This section covers some examples that are very specific to the HSE-openEHR Integration project. </p> <p>The proposed PoC Data Platform will be based on an openEHR CDR, which is simulated for this project by a sandbox environment based on the Vitasystems EhrBase product. This is free to use for demonstration purposes and dummy patient data.</p> <p>The initial CDR dataset is populated with templates, representing targets for the Healthlink Laboratory result and Discharge summary messages.</p> <p>Better Ehrscape API vs. openCDR API usage</p> <p>Most of the calls are based on the 'canonical openEHR REST API which we wil refer to as the 'openCDR' API, other than calls to the /Composition resource.</p> <p>Calls to the /composition resource are currently set to  make use of the Better Ehrscape API, as although the openCDR API does currently support the <code>FLAT JSON</code> data formats, these have not yet been implemented yet by either Ehrbase or Better CDRs though an Ehrscape endpoint (as <code>ecis</code>) also supported by EhrBase </p> <p>The demonstrator use-cases are ...</p>"},{"location":"hse/HSE1-hse-project-overview/#1-integrate-hl7v2-healthlink-data","title":"1. Integrate HL7v2 Healthlink data","text":"<p>Integrate and import the following HealthLink HL7v2 messages:  </p> <ol> <li>Laboratory Test results</li> <li>Discharge summary</li> <li>Vaccination report</li> </ol>"},{"location":"hse/HSE1-hse-project-overview/#technical-tasks","title":"Technical Tasks","text":"<ol> <li>Retrieve the patient JDP <code>ehrId</code> from their <code>subjectId</code> - Retrieving the patient's ehrID</li> <li>If the <code>ehrId</code> does not exist, create a new <code>ehrID</code> from the patient's <code>subjectID</code> (MRN or IHI?)</li> <li> <p>Transform the HL7v2 message to the target openEHR Composition format, and commit the data via a <code>POST /Composition</code> Ehrscape Call</p> </li> <li> <p>Test that the data has been correctly committed</p> </li> <li>Fetch the committed data via the <code>GET / Composition call</code></li> <li>Query the CDR for information via the <code>POST /query</code> call </li> </ol>"},{"location":"hse/HSE10-openehr-rm-attributes/","title":"Key openEHR RM attributes","text":""},{"location":"hse/HSE10-openehr-rm-attributes/#key-openehr-rm-attributes","title":"Key openEHR RM attributes","text":"<p>The openEHR Reference model defines a relatively small set of information model constructs which openEHR back-ends must support. This includes a number of generic classes and datatypes.</p> <p>The Reference model contains virtually no clinical content e.g concepts for Medication, or Diagnosis. These are defined and managed separately as <code>archetypes</code>.</p> <p>A number of key data points need to be populated in an openEHR composition, which may not be apparent from the archetypes or templates. Developers can largely use the example instance documents and APIs for guidance but these notes may give useful background in addition to viewing the UML view of the openEHR reference model.</p>"},{"location":"hse/HSE10-openehr-rm-attributes/#committer","title":"committer","text":"<p>This is the name of the person physically committing the document ie. the person logged on to the account. If omitted from API calls, Ehrscape will use the domain login name.</p>"},{"location":"hse/HSE10-openehr-rm-attributes/#compositioncomposer","title":"composition/composer","text":"<p>This is the clinical author of the document i.e the person with clinical responsibility. Ehrscape FLAT and STRCTURTED formats handle this as <code>composer_name</code>.</p>"},{"location":"hse/HSE10-openehr-rm-attributes/#compositioncontextstart_time","title":"composition/context/start_time","text":"<p>This is the time that the clinical interaction with the patient began. Ehrscape FLAT and STRUCTURED formats handle this as ctx/time.</p>"},{"location":"hse/HSE10-openehr-rm-attributes/#compositioncontexthealth_care_facility","title":"composition/context/health_care_facility","text":"<p>This is the healthcare facility / oragnisation under who\u2019s remit the encounter took place.</p>"},{"location":"hse/HSE10-openehr-rm-attributes/#observationtime","title":"observation/time","text":"<p>This is the time that a patient\u2019s signs and symptoms were observed or a test was run. It is set automatically by the value of the ctx/time attribute. If you need to set the time of a specific observation you can use</p> <p>The Ehrscape FLAT and STRUCTURED formats hide much of the complexity of these attributes, providing sensible defaults. In particular the <code>ctx</code> header common to both JSON STRUCTURED and FLAT formats, considerably simplifies the composition header \u2026</p> <pre><code>'ctx/composer_name': 'Rebecca Wassall',\n'ctx/health_care_facility|id': '999999-345',\n'ctx/health_care_facility|name': 'Northumbria Community NHS',\n'ctx/id_namespace': 'NHS-UK',\n'ctx/id_scheme': '2.16.840.1.113883.2.1.4.3',\n'ctx/language': 'en',\n'ctx/territory': 'GB',\n'ctx/time': '2014-09-23T00:11:02.518+02:00',\n</code></pre>"},{"location":"hse/HSE2-retrieving-an-ehr/","title":"Retrieving the patient's ehrId","text":"<p>When a patient is registered with an openCDR, a '<code>subjectId</code> (normally a real-word identifier like an National identifier e.g. an Irish IHI number or hospital MRI) is submitted by a <code>POST /ehr | create EHR from SubjectId</code>  call.  </p> <p>A top-level openEHR <code>EHR</code> object is then created in the CDR along with a unique internal <code>ehrId</code> identifier for that patient.</p> <p>Most openCDR API calls require an 'ehrId' to identify the correct patient, so normally the first activity required if interacting with a patient record is to retrieve their <code>ehrId</code>, and then often to cache that identifier so it can be used for subsequent calls, until a new patient is being accessed.</p> <p>Note</p> <p>If there is no patient record matching the subjectID, then you will have to register the patient with the CDR by creating an EHR for them</p>"},{"location":"hse/HSE2-retrieving-an-ehr/#get-ehr-retrieve-ehr-from-subjectidsubjectnamespace","title":"<code>GET /ehr - retrieve ehr from subjectId/subjectNamespace</code>","text":""},{"location":"hse/HSE2-retrieving-an-ehr/#parameters","title":"Parameters","text":""},{"location":"hse/HSE2-retrieving-an-ehr/#subjectid","title":"<code>subjectId</code>","text":"<p>This is the external identifier by which the patient is known within the CDR. It is normally a real-word identifier like a an Irish IHI number or Hospital 'MRI' number, and will have been supplied to the CDR when the patients' <code>EHR</code> object was created in the datastore.</p> <p>Example value : <code>9999999000</code></p>"},{"location":"hse/HSE2-retrieving-an-ehr/#subjectnamespace","title":"<code>subjectNamespace</code>","text":"<p>This is just a unique string used to identify the numbering scheme used for the <code>subjectId</code>. It will commonly be some sort of URI such as <code>uk_nhs_nhs_number</code> and will have been agreed at national level.</p> <p>Example value : <code>uk_nhs_nhs_number</code></p> PostmancURLNodeJs - AxiosPython/requests <p></p> <pre><code>    curl --location \\\n--request GET '/ehr/?subjectId=https://rest.ehrscape.com/rest/openehr/v19999999000&amp;subjectNamespace=uk.nhs.nhs_number' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n--header 'PREFER: return=minimal' \\\n</code></pre> <pre><code>    var axios = require('axios');\nvar config = {\nmethod: 'get',\nurl: 'https://rest.ehrscape.com/rest/openehr/v1/ehr?subject_id=9999999000&amp;subject_namespace=uk.nhs.nhs_number',\nheaders: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'PREFER': 'return=minimal', 'Authorization': Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"https://rest.ehrscape.com/rest/openehr/v1/ehr?subject_id=9999999000&amp;subject_namespace=uk.nhs.nhs_number\"\npayload = {}\nheaders = {\n'Accept': 'application/json',\n'Content-Type': 'application/json',\n'PREFER': 'return=minimal',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"hse/HSE2-retrieving-an-ehr/#response","title":"Response","text":"<p>An openCDR will give a <code>200</code> response code and this structure. </p> <p>The <code>ehrId</code> that you need to capture is <code>ehr_id.value</code> item in the response.</p> <p>Hint</p> <p>You may want to consider caching this for the session, so that it can be used for a number of subsequent calls.</p> <pre><code>{\n\"_type\": \"EHR\",\n\"system_id\": {\n\"_type\": \"HIER_OBJECT_ID\",\n\"value\": \"4cce5a07-be4d-4318-a94f-3b8401853a20\"\n},\n\"ehr_id\": {\n\"_type\": \"HIER_OBJECT_ID\",\n\"value\": \"5dd03bc9-4419-4981-8798-ff4dda8ee9de\"\n},\n\"time_created\": {\n\"_type\": \"DV_DATE_TIME\",\n\"value\": \"2020-07-21T09:00:24.977Z\"\n},\n\"ehr_status\": {\n\"_type\": \"EHR_STATUS\",\n\"uid\": {\n\"_type\": \"HIER_OBJECT_ID\",\n\"value\": \"09bcd903-1565-44db-9087-2ff5e5bc7194::4cce5a07-be4d-4318-a94f-3b8401853a20::1\"\n},\n\"subject\": {\n\"_type\": \"PARTY_SELF\",\n\"external_ref\": {\n\"_type\": \"PARTY_REF\",\n\"id\": {\n\"_type\": \"HIER_OBJECT_ID\",\n\"value\": \"9999999000\"\n},\n\"namespace\": \"uk.nhs.nhs_number\"\n}\n},\n\"is_queryable\": true,\n\"is_modifiable\": true\n}\n}\n</code></pre>"},{"location":"hse/HSE3-creating-an-ehr/","title":"Creating a new patient 'EHR'","text":"<p>When a patient is registered with an openCDR, a '<code>subjectId</code> (normally a real-word identifier like an National identifier e.g. NHS number, CHI number in the UK) or hospital MRI) is submitted by a <code>POST /ehr | create EHR</code>  call.  A top-level openEHR <code>EHR</code> object is then created in the CDR along with a unique internal <code>ehrId</code> identifier for that patient.</p> <p>Depending on your local governance environment, you may/ may not be allowed to create new <code>EHRs</code>.</p>"},{"location":"hse/HSE3-creating-an-ehr/#opencdr-post-ehr-create-an-ehr-from-subjectidsubjectnamespace-example","title":"openCDR <code>POST /ehr - Create an EHR from SubjectId/subjectNamespace</code> example","text":""},{"location":"hse/HSE3-creating-an-ehr/#body-parameters","title":"Body 'parameters`","text":"<p>The <code>subjectId</code> and <code>subjectNamespace</code> parameters need to be injected into the body of the POST as below.</p>"},{"location":"hse/HSE3-creating-an-ehr/#subjectid","title":"<code>subjectId</code>","text":"<p>This is the external identifier by which the patient is known within the CDR. It is normally a real-word identifier like an NHS number, CHI number or Hospital 'MRI' number, and will have been supplied to the CDR when the patients' <code>EHR</code> object was created in the datastore.</p> <p>Example value : <code>9999999000</code></p>"},{"location":"hse/HSE3-creating-an-ehr/#subjectnamespace","title":"<code>subjectNamespace</code>","text":"<p>This is just a unique string used to identify the numbering scheme used for the 'subjectId'. It will commonly be some sort of URI such as <code>ie-gov-hse-ihi</code> and will have been agreed at national level.</p> <p>Example value : <code>ie-gov-hse-ihi</code></p> <p>Warning</p> <p>Note that there is a reported bug in Ehrbase that incorrectly disallows period characters <code>.</code> in <code>subjectNamespace</code> for now.</p> PostmancURL <p></p> <pre><code>        curl --location '{{ openehrBaseUrl }}/ehr' \\\n--header 'Accept: application/json' \\\n--header 'Content-Type: application/json' \\\n--header 'Prefer: return=representation' \\\n--header 'Authorization: {{ BasicAuthToken }}' \\\n--data '\n         {\n            \"_type\": \"EHR_STATUS\",\n            \"archetype_node_id\": \"openEHR-EHR-EHR_STATUS.generic.v1\",\n            \"name\": {\n                \"_type\": \"DV_TEXT\",\n                \"value\": \"ehr status\"\n            },\n            \"subject\": {\n                \"external_ref\": {\n                    \"id\": {\n                        _type: \"HIER_OBJECT_ID\",\n                        value: '{{ subjectId }}',\n                    },\n                    \"namespace\": '{{ subjectNamespace }}',\n                    type: \"PERSON\" \n                }\n            },\n            is_modifiable: true,\n            is_queryable: true\n        }'\n```\n#### Response\nThe CDR will give a `200` response code and this structure.\n\n```json\n{\n\"system_id\": {\n\"_type\": \"HIER_OBJECT_ID\",\n        \"value\": \"83b25add-9919-4ea9-925a-34aca113a7ed\"\n},\n    \"ehr_id\": {\n\"_type\": \"HIER_OBJECT_ID\",\n        \"value\": \"e37e048c-3b02-4ebe-8ad2-5f6924e0c0c2\"\n},\n    \"ehr_status\": {\n\"_type\": \"EHR_STATUS\",\n        \"name\": {\n\"_type\": \"DV_TEXT\",\n            \"value\": \"ehr status\"\n},\n        \"subject\": {\n\"_type\": \"PARTY_SELF\",\n            \"external_ref\": {\n\"_type\": \"PARTY_REF\",\n                \"namespace\": \"ie_gov_hse_ihi\",\n                \"type\": \"PERSON\",\n                \"id\": {\n\"_type\": \"HIER_OBJECT_ID\",\n                    \"value\": \"0cfbf129-70f0-4130-906c-951793c0f353\"\n}\n}\n},\n        \"archetype_node_id\": \"openEHR-EHR-EHR_STATUS.generic.v1\",\n        \"uid\": {\n\"_type\": \"HIER_OBJECT_ID\",\n            \"value\": \"d13de4ea-ba28-49dc-a582-1d1e6ef383ae::freshehr.cloud.org::1\"\n},\n        \"is_modifiable\": true,\n        \"is_queryable\": true\n},\n    \"time_created\": {\n\"_type\": \"DV_DATE_TIME\",\n        \"value\": \"2023-04-02T17:01:44.563Z\"\n}\n}\n</code></pre> <p>The only datapoint you need to retrieve is <code>ehr_id</code>. </p> <p>Hint</p> <p>You may want to consider caching this for the session, so that it can be used for a number of subsequent calls.</p>"},{"location":"hse/HSE4-discharge-summary-integration/","title":"Discharge Summary integration","text":"<p>All data committed to an openEHR CDR is done so via a POST /composition call - as a JSON or XML 'blob'. </p> <p>HealthLink Discharge Summary mapping document </p> <p>HealthLink Lab report mapping document </p>"},{"location":"hse/HSE5-committing-composition-data/","title":"Committing Composition data","text":"<p>All data committed to an openEHR CDR is done so via a POST /composition call - as a JSON or XML 'blob'. </p> <p>As it is committed, the data will be validated against both the appropriate openEHR template and the underlying Reference model schema.</p> <p>If the data is valid, it will be stored in the CDR and is allocated a unique ID, which is returned by the POST /composition call</p> <p>This section will submit an example Composition to the CDR by running a <code>POST / composition</code> call.</p> <p>A number of data serialisation options, can be used. In this case we will use the Better <code>STRUCTURED JSON</code> format, as it is somewhat easier to use than the current openEHR <code>CANONICAL JSON or XML</code> formats.</p> <p>Note</p> <p>Note that this example uses the Better <code>Better Ehrscape API</code> which has a slightly different base URL and parameters than the <code>openEHR REST API</code>,though the data is stored identically and can be accessed from both end points.</p>"},{"location":"hse/HSE5-committing-composition-data/#ehrscape-post-composition-example","title":"Ehrscape POST /composition example","text":""},{"location":"hse/HSE5-committing-composition-data/#parameters","title":"Parameters","text":"<p><code>ehrId</code>: </p> <p>This is is the internal CDR identifier for a specific patient. When a patient is registered with the CDR,an EHR object is created with a unique <code>ehr_id</code> identifier, and is associated with an external <code>subjectId</code> and subjectNamespace e.g an NHS Number, CHI number, or a local hospital number.</p> <p>We will find out how to work out the correct ehrId for a patient in the next section.</p> <p>Generally when you first open a patient record session, you will retrieve their <code>ehrId</code> via their <code>subjectID</code> and <code>subjectNamespace</code>. We will explain how to do that in the next section.</p> <p>For testing purposes, you should use a known <code>ehrId</code>. If you have a Postman environment file, an example will be in there, otherwise you can find out how to identify valid ehrIds here</p> <p><code>templateId</code>: </p> <p>This is the identifier of the openEHR template, against which you need to validate the composition. Use <code>DHI - Urology_PROMs-v0</code> for this example.  </p> <p><code>format</code>: </p> <p>This defines the format of JSON or XML that you are sending. Use <code>FLAT</code> for this example.</p>"},{"location":"hse/HSE5-committing-composition-data/#a-commit-an-openehr-composition-flat-json","title":"A. Commit an openEHR Composition (<code>FLAT JSON</code>)","text":"cURL <p>```bash    curl --location --globoff '{{ ehrscapeBaseUrl }}/composition?ehrId={{ ehrId }}&amp;templateId={{ templateId }}&amp;committerName={{ committerName }}&amp;format=FLAT' \\ --header 'Content-Type: application/json' \\ --data '{ \"discharge_summary/language|code\": \"en\", \"discharge_summary/language|terminology\": \"ISO_639-1\", \"discharge_summary/territory|terminology\": \"ISO_3166-1\", \"discharge_summary/territory|code\": \"DE\",</p> <p>\"discharge_summary/composer|name\": \"Max Mustermann\", \"discharge_summary/category|code\": \"433\", \"discharge_summary/category|terminology\": \"openehr\", \"discharge_summary/category|value\": \"event\", \"discharge_summary/context/recipient/name\": \"SMITH,MATHEW\", \"discharge_summary/context/recipient/identifier|id\": \"123456.4444\", \"discharge_summary/context/recipient/identifier|type\": \"MCN.HLPracticeID\",</p> <p>\"discharge_summary/context/start_time\": \"2022-02-03T04:05:06\", \"discharge_summary/context/setting|terminology\": \"openehr\", \"discharge_summary/context/setting|code\": \"232\", \"discharge_summary/context/setting|value\": \"secondary medical care\", \"discharge_summary/context/_health_care_facility|name\": \"ROTUNDA HOSPITAL\", \"discharge_summary/context/_health_care_facility|id\": \"932\", \"discharge_summary/context/_health_care_facility|id_namespace\": \"L\", \"discharge_summary/context/_health_care_facility|id_scheme\": \"L\",</p> <p>\"discharge_summary/professional_contacts/care_team/participant:0/member/name/use|code\": \"at0002\", \"discharge_summary/professional_contacts/care_team/participant:0/member/name/use|value\": \"Usual\", \"discharge_summary/professional_contacts/care_team/participant:0/member/name/use|terminology\": \"local\", \"discharge_summary/professional_contacts/care_team/participant:0/member/name/family\": \"Family 59\", \"discharge_summary/professional_contacts/care_team/participant:0/member/name/given\": \"Given 97\", \"discharge_summary/professional_contacts/care_team/participant:0/member/name/title\": \"Given 97\", \"discharge_summary/professional_contacts/care_team/participant:0/role_and_relationship:0|value\": \"Primary Care Provider\", \"discharge_summary/professional_contacts/care_team/participant:0/role_and_relationship:0|code\": \"PP\", \"discharge_summary/professional_contacts/care_team/participant:0/role_and_relationship:0|terminology\": \"L\",</p> <p>\"discharge_summary/professional_contacts/care_team/participant:0/member/telecom:0/system|value\": \"Phone\", \"discharge_summary/professional_contacts/care_team/participant:0/member/telecom:0/system|terminology\": \"local\", \"discharge_summary/professional_contacts/care_team/participant:0/member/telecom:0/system|code\": \"at0012\", \"discharge_summary/professional_contacts/care_team/participant:0/member/telecom:0/value\": \"Lorem ipsum\", \"discharge_summary/professional_contacts/language|terminology\": \"ISO_639-1\", \"discharge_summary/professional_contacts/language|code\": \"en\", \"discharge_summary/professional_contacts/encoding|terminology\": \"IANA_character-sets\", \"discharge_summary/professional_contacts/encoding|code\": \"UTF-8\",</p> <p>\"discharge_summary/diagnosis_list/problem_diagnosis:0/problem_diagnosis_name|value\": \"Twin pregnancy\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/problem_diagnosis_name|code\": \"TWIN\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/problem_diagnosis_name|terminology\": \"L\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/clinical_description\": \"Lorem ipsum\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/date_time_clinically_recognised\": \"2022-02-03T04:05:06\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/diagnosis_details/type\": \"Lorem ipsum\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/diagnosis_details/classification\": \"A\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/diagnosis_details/diagnosis_priority\": \"1\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/diagnosis_details/confidentiality_indicator\": \"N\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/diagnosis_details/diagnosing_clinician/identifier|id\": \"1379\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/diagnosis_details/diagnosing_clinician/name/family_name\": \"1379\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/diagnosis_details/diagnosing_clinician/name/given_name\": \"1379\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/diagnosis_details/diagnosing_clinician/name/title\": \"1379\",</p> <p>\"discharge_summary/diagnosis_list/problem_diagnosis:0/language|code\": \"en\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/language|terminology\": \"ISO_639-1\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/encoding|terminology\": \"IANA_character-sets\", \"discharge_summary/diagnosis_list/problem_diagnosis:0/encoding|code\": \"UTF-8\",</p> <p>\"discharge_summary/allergies_list/adverse_reaction_risk:0/substance|value\": \"Penicillin\", \"discharge_summary/allergies_list/adverse_reaction_risk:0/substance|code\": \"PEN\", \"discharge_summary/allergies_list/adverse_reaction_risk:0/substance|terminology\": \"L\", \"discharge_summary/allergies_list/adverse_reaction_risk:0/category|value\": \"Food\", \"discharge_summary/allergies_list/adverse_reaction_risk:0/category|code\": \"at0121\", \"discharge_summary/allergies_list/adverse_reaction_risk:0/category|terminology\": \"local\", \"discharge_summary/allergies_list/adverse_reaction_risk:0/comment\": \"Causes convulsions\", \"discharge_summary/allergies_list/adverse_reaction_risk:0/reaction_event:0/severity_of_reaction|value\": \"Severe\", \"discharge_summary/allergies_list/adverse_reaction_risk:0/reaction_event:0/severity_of_reaction|code\": \"Severity\", \"discharge_summary/allergies_list/adverse_reaction_risk:0/reaction_event:0/severity_of_reaction|terminology\": \"L\",</p> <p>\"discharge_summary/allergies_list/adverse_reaction_risk:0/language|terminology\": \"ISO_639-1\", \"discharge_summary/allergies_list/adverse_reaction_risk:0/language|code\": \"en\", \"discharge_summary/allergies_list/adverse_reaction_risk:0/encoding|code\": \"UTF-8\", \"discharge_summary/allergies_list/adverse_reaction_risk:0/encoding|terminology\": \"IANA_character-sets\",</p> <p>\"discharge_summary/procedures_list/procedure:0/ism_transition/careflow_step|value\": \"Procedure completed\", \"discharge_summary/procedures_list/procedure:0/ism_transition/careflow_step|terminology\": \"local\", \"discharge_summary/procedures_list/procedure:0/ism_transition/careflow_step|code\": \"at0043\", \"discharge_summary/procedures_list/procedure:0/ism_transition/current_state|code\": \"532\", \"discharge_summary/procedures_list/procedure:0/ism_transition/current_state|value\": \"completed\", \"discharge_summary/procedures_list/procedure:0/ism_transition/current_state|terminology\": \"openehr\",</p> <p>\"discharge_summary/procedures_list/procedure:0/time\": \"2022-02-03T04:05:06\",</p> <p>\"discharge_summary/procedures_list/procedure:0/procedure_name|value\": \"Epidural\", \"discharge_summary/procedures_list/procedure:0/procedure_name|code\": \"EP\", \"discharge_summary/procedures_list/procedure:0/procedure_name|terminology\": \"L\", \"discharge_summary/procedures_list/procedure:0/description\": \"The patient had an epidural\", \"discharge_summary/procedures_list/procedure:0/procedure_type\": \"LP\", \"discharge_summary/procedures_list/procedure:0/consent_status|value\": \"Consent Accepted\", \"discharge_summary/procedures_list/procedure:0/consent_status|code\": \"CA\", \"discharge_summary/procedures_list/procedure:0/consent_status|terminology\": \"L\",</p> <p>\"discharge_summary/procedures_list/procedure:0/language|terminology\": \"ISO_639-1\", \"discharge_summary/procedures_list/procedure:0/language|code\": \"en\", \"discharge_summary/procedures_list/procedure:0/encoding|terminology\": \"IANA_character-sets\", \"discharge_summary/procedures_list/procedure:0/encoding|code\": \"UTF-8\",</p> <p>\"discharge_summary/observations/service_request/current_activity/service_name\": \"Referral\", \"discharge_summary/observations/service_request/current_activity/clinical_information\": \"\", \"discharge_summary/observations/service_request/current_activity/service_period_start\": \"2022-02-03T04:05:06\", \"discharge_summary/observations/service_request/placer_order_number|id\": \"dev/null\", \"discharge_summary/observations/service_request/narrative\": \"Original referral\", \"discharge_summary/observations/service_request/language|code\": \"en\", \"discharge_summary/observations/service_request/language|terminology\": \"ISO_639-1\", \"discharge_summary/observations/service_request/encoding|code\": \"UTF-8\", \"discharge_summary/observations/service_request/encoding|terminology\": \"IANA_character-sets\",</p> <p>\"discharge_summary/observations/generic_observation:0/component/name|value\": \"GENERAL\", \"discharge_summary/observations/generic_observation:0/component/name|code\": \"XXX-0\", \"discharge_summary/observations/generic_observation:0/component/name|terminology\": \"LN\", \"discharge_summary/observations/generic_observation:0/component/result/text_value\": \"general content goes here\", \"discharge_summary/observations/generic_observation:0/component/status\": \"F\", \"discharge_summary/observations/generic_observation:0/time\": \"2022-02-03T04:05:06\", \"discharge_summary/observations/generic_observation:0/language|terminology\": \"ISO_639-1\", \"discharge_summary/observations/generic_observation:0/language|code\": \"en\", \"discharge_summary/observations/generic_observation:0/encoding|terminology\": \"IANA_character-sets\", \"discharge_summary/observations/generic_observation:0/encoding|code\": \"UTF-8\",</p> <p>\"discharge_summary/observations/generic_observation:1/component/name|value\": \"ABDOMEN\", \"discharge_summary/observations/generic_observation:1/component/name|code\": \"XXXX-0\", \"discharge_summary/observations/generic_observation:1/component/name|terminology\": \"LN\", \"discharge_summary/observations/generic_observation:1/component/result/text_value\": \"Gravid, nontender, non-irritable, with an infant in the vertex presentation. Estimated fetal weight was greater than 10 pounds.\", \"discharge_summary/observations/generic_observation:1/component/status\": \"F\", \"discharge_summary/observations/generic_observation:1/time\": \"2022-02-03T04:05:06\", \"discharge_summary/observations/generic_observation:1/language|terminology\": \"ISO_639-1\", \"discharge_summary/observations/generic_observation:1/language|code\": \"en\", \"discharge_summary/observations/generic_observation:1/encoding|terminology\": \"IANA_character-sets\", \"discharge_summary/observations/generic_observation:1/encoding|code\": \"UTF-8\",</p> <p>\"discharge_summary/clinical_synopsis/general_comments\": \"this is for general comments only!\", \"discharge_summary/clinical_synopsis/language|terminology\": \"ISO_639-1\", \"discharge_summary/clinical_synopsis/language|code\": \"en\", \"discharge_summary/clinical_synopsis/encoding|code\": \"UTF-8\", \"discharge_summary/clinical_synopsis/encoding|terminology\": \"IANA_character-sets\" }'   ```</p> NodeJS + Axios <p>```js</p> <pre><code>var axios = require('axios');\n\nvar data = JSON.stringify({\"prostate_cancer_proms_report\": // trimmed for brevity}\");\n\nvar config = {\n  method: 'post',\n  url: '{{ ehrscapeBaseUrl }}/composition?ehrId={{ ehrId }}&amp;templateId={{ templateId }}&amp;format=STRUCTURED',\n  headers: { \n    'Content-Type': 'application/json', \n    'Authorization': '{{ authToken }}'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n</code></pre> <p>```</p>"},{"location":"hse/HSE5-committing-composition-data/#response-for-post-composition","title":"Response for POST /composition","text":"<pre><code>{\n\"meta\": {\n\"href\": \"https://cdr.code4health.org/rest/v1/composition/59e8f5a2-6fb6-47d5-9acd-ae6309d0f1dd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::1\"\n},\n\"action\": \"CREATE\",\n\"compositionUid\": \"59e8f5a2-6fb6-47d5-9acd-ae6309d0f1dd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::1\"\n}\n</code></pre>"},{"location":"hse/HSE5-committing-composition-data/#the-composition-id","title":"The <code>Composition Id</code>","text":"<p>The compositionUid is the unique identifier allocated to (and held within) every composition by the CDR.</p> <p>You will see that it ends in <code>...::1</code>. The <code>1</code> is the version of this composition instance. If you need to update the instance (perhaps because of an error), you need to do so via a PUT / composition call and if successful the composition version number will clock up to <code>::2</code>.</p> <p>In essence every commit is versioned and retained for medico-legal reasons. </p> <p>Similarly when a composition is deleted, this is a logical delete and the composition can always be retrieved, though is not normally accessible via querying.</p> <p>We will go through the process of updating a composition later.</p> <p>For now let's just retrieve the composition we just committed, via the GET /composition call.</p>"},{"location":"hse/HSE6-retrieving-composition-data/","title":"Retrieving a Patient Observations Composition","text":"<p>All data committed to an openEHR CDR is done so via a POST or PUT /composition call - as a JSON or XML 'blob'. </p> <p>This section will cover how to retrieve a previously stored Composition by running a <code>GET / composition</code> call.</p> <p>A number of data serialisation options, can be used on retrieval. In this case we will ask for the Better <code>FLAT JSON</code> format, as this is what we used when committing the composition, but you can commit and retrieve using different formats if you wish.</p>"},{"location":"hse/HSE6-retrieving-composition-data/#better-ehrscape-get-composition-example","title":"Better Ehrscape GET /composition example","text":""},{"location":"hse/HSE6-retrieving-composition-data/#parameters","title":"Parameters","text":"<p><code>compositionId</code>: </p> <p>This is is the composition UID for the composition you wish to retrieve. Don't worry about how we find that out for now. Just use the UID for the composition you just committed in the last section. </p> <p>We will find out how to find compositionIds in a subsequent section.</p> <p><code>format</code>:</p> <p>This defines the format of JSON or XML that you are requesting. Use <code>FLAT</code> for this example.</p>"},{"location":"hse/HSE6-retrieving-composition-data/#a-retrieve-an-openehr-composition-flat-json","title":"A. Retrieve an openEHR Composition (<code>FLAT JSON</code>)","text":"cURL <p><code>bash       curl --location --request GET '{{ ehrscapeBaseUrl }}/composition/{{ compositionId }}?format=FLAT' \\ --header 'Content-Type: application/json' \\ --header 'Authorization: {{ authToken }}'</code></p> NodeJS + Axios <p>```js</p> <pre><code>var axios = require('axios');\n</code></pre> <p>var config = {   method: 'get',   url: '{{ ehrscapeBaseUrl }}/composition/{{ compositionId }}?format=STRUCTURED',   headers: {      'Content-Type': 'application/json',      'Authorization': '{{ authToken }}'   } };</p> <p>axios(config) .then(function (response) {   console.log(JSON.stringify(response.data)); }) .catch(function (error) {   console.log(error); });</p> <p><pre><code>### Response for GET /composition\n\nIf the composition is found a `200` code will be returned along with the composition object , which you will note now includes the uid, but should otherwise be identical to that which you previously submitted.\n\n```json\n{\n    \"meta\": {\n        \"href\": \"https://cdr.code4health.org/rest/v1/composition/7b20dc2b-6494-467d-8986-469367f7c75b::4cce5a07-be4d-4318-a94f-3b8401853a20::1\"\n    },\n    \"compositionUid\": \"7b20dc2b-6494-467d-8986-469367f7c75b::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n    \"format\": \"FLAT\",\n    \"templateId\": \"JMOHW - Passport observations.v0\",\n    \"composition\": {\n        \"passport_observations/_uid\": \"7b20dc2b-6494-467d-8986-469367f7c75b::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n        \"passport_observations/language|code\": \"en\",\n        \"passport_observations/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/territory|code\": \"JM\",\n        \"passport_observations/territory|terminology\": \"ISO_3166-1\",\n        \"passport_observations/context/start_time\": \"2020-10-18T16:16:21.449Z\",\n        \"passport_observations/context/setting|code\": \"238\",\n        \"passport_observations/context/setting|value\": \"other care\",\n        \"passport_observations/context/setting|terminology\": \"openehr\",\n        \"passport_observations/blood_pressure/systolic|magnitude\": 169.0,\n        \"passport_observations/blood_pressure/systolic|unit\": \"mm[Hg]\",\n        \"passport_observations/blood_pressure/diastolic|magnitude\": 692.0,\n        \"passport_observations/blood_pressure/diastolic|unit\": \"mm[Hg]\",\n        \"passport_observations/blood_pressure/time\": \"2020-10-18T16:16:21.452Z\",\n        \"passport_observations/blood_pressure/language|code\": \"en\",\n        \"passport_observations/blood_pressure/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/blood_pressure/encoding|code\": \"UTF-8\",\n        \"passport_observations/blood_pressure/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/height_length/height_length|magnitude\": 609.33,\n        \"passport_observations/height_length/height_length|unit\": \"cm\",\n        \"passport_observations/height_length/time\": \"2020-10-18T16:16:21.453Z\",\n        \"passport_observations/height_length/language|code\": \"en\",\n        \"passport_observations/height_length/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/height_length/encoding|code\": \"UTF-8\",\n        \"passport_observations/height_length/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/body_weight/weight|magnitude\": 380.49,\n        \"passport_observations/body_weight/weight|unit\": \"kg\",\n        \"passport_observations/body_weight/time\": \"2020-10-18T16:16:21.453Z\",\n        \"passport_observations/body_weight/language|code\": \"en\",\n        \"passport_observations/body_weight/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/body_weight/encoding|code\": \"UTF-8\",\n        \"passport_observations/body_weight/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/blood_glucose/test_name|code\": \"14743-9\",\n        \"passport_observations/blood_glucose/test_name|value\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n        \"passport_observations/blood_glucose/test_name|terminology\": \"LOINC\",\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|code\": \"14743-9\",\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|value\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|terminology\": \"LOINC\",\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_result|magnitude\": 52.61,\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_result|unit\": \"mmol/L\",\n        \"passport_observations/blood_glucose/time\": \"2020-10-18T16:16:21.453Z\",\n        \"passport_observations/blood_glucose/language|code\": \"en\",\n        \"passport_observations/blood_glucose/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/blood_glucose/encoding|code\": \"UTF-8\",\n        \"passport_observations/blood_glucose/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/pulse_oximetry/spo|numerator\": 0.0,\n        \"passport_observations/pulse_oximetry/spo|denominator\": 100.0,\n        \"passport_observations/pulse_oximetry/spo|type\": 2,\n        \"passport_observations/pulse_oximetry/spo\": 0.0,\n        \"passport_observations/pulse_oximetry/time\": \"2020-10-18T16:16:21.455Z\",\n        \"passport_observations/pulse_oximetry/language|code\": \"en\",\n        \"passport_observations/pulse_oximetry/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/pulse_oximetry/encoding|code\": \"UTF-8\",\n        \"passport_observations/pulse_oximetry/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/body_temperature/temperature|magnitude\": 72.7,\n        \"passport_observations/body_temperature/temperature|unit\": \"[degF]\",\n        \"passport_observations/body_temperature/time\": \"2020-10-18T16:16:21.455Z\",\n        \"passport_observations/body_temperature/language|code\": \"en\",\n        \"passport_observations/body_temperature/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/body_temperature/encoding|code\": \"UTF-8\",\n        \"passport_observations/body_temperature/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/clinical_synopsis/notes\": \"Notes 9\",\n        \"passport_observations/clinical_synopsis/language|code\": \"en\",\n        \"passport_observations/clinical_synopsis/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/clinical_synopsis/encoding|code\": \"UTF-8\",\n        \"passport_observations/clinical_synopsis/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/category|code\": \"433\",\n        \"passport_observations/category|value\": \"event\",\n        \"passport_observations/category|terminology\": \"openehr\",\n        \"passport_observations/composer|name\": \"moh-jamaica_4cce5a07-be4d-4318-a94f-3b8401853a20\"\n    },\n    \"deleted\": false,\n    \"lastVersion\": true,\n    \"ehrId\": \"b4a4577f-7496-4053-ae60-45e22cfc9952\",\n    \"lifecycleState\": \"COMPLETE\"\n}```\n\n#### Other data formats\n\nThe Better Ehrscape API offers several other serialisation formats. You can have a look at these by simply changing the `format` parameter on the `GET / composition` call, and the call Header `Accept` to switch between JSON and XML.\n\n##### 'FLAT JSON'\n\nThis uses the same path-shortening mechanism as structured JSON but flattens all of the tree structure to a set of name-value pairs. Some developers prefer this to the STRUCTURED format.\n</code></pre> format=FLAT Accept : `application/json'</p> <p><pre><code>##### 'RAW JSON'\n\nThis is very similar to, but not identical to the openEHR Canonical JSON format, which essentially supercedes it. It very closely adheres tothe openEHR Reference model specification but is pretty voluminous\n</code></pre> format=RAW Accept : <code>application/json' <pre><code>##### 'RAW XML'\n\nThis is 'canonical' openEHR XML which is also accepted by the openEHR REST  API. It is the lingu-franca for all openEHR CDRs, even thosewhich do not support the REST CDR API, will normally accept and expose data in this XML format. \n</code></pre> format=RAW Accept :</code>application/xml' ```</p>"},{"location":"hse/HSE7-querying-diagnoses/","title":"Querying for diagnoses","text":"<p>This section will take you through how to query for recent Compositions held on the CDR, using AQL (Archetype Query Language)</p> <p>The initial proposed dataset is - the name of Composition - the composition identifier  - the start date of the Composition - the name of the clinical author (composer) - the name of the healthcare facility - the name of the diagnosis - the date of onset of the problem - the date of diagnosis</p>"},{"location":"hse/HSE7-querying-diagnoses/#querying-an-openehr-cdr-archetype-query-language-aql","title":"Querying an openEHR CDR - Archetype Query language (AQL)","text":"<p>A CDR can be best thought of in terms of a exposing a complex object tree with the <code>EHR</code> object at the top, <code>Compositions</code> objects handling commits, but where all of the information in the tree can be traversed and accessed. Conceptually this is a logical query/graph language like SPARQL, the key difference being that the exact paths to the objects you might need to access are defined in the archetypes and templates you use to define and validate the data.</p> <p>AQL can be written by hand but is normally done using a tool like the Better Studio </p> <p>Understanding AQL is not generally important for third-party developers. Normally the correct AQL will be supplied by the CDR owner, indeed in production it is much more likely that server-side stored queries would be used.</p>"},{"location":"hse/HSE7-querying-diagnoses/#post-query-run-an-ad-hoc-aql-query","title":"<code>POST /query</code> | Run an ad-hoc AQL query","text":"<p>This example will retrieve the data requirement above. To run the query - a <code>querystring</code> needs to be carried in the <code>body</code> of the POST call as raw data with the Header <code>Content-Type</code> set to `application/json'</p> <p>This is the <code>queryString:</code> that we need to send.</p> <pre><code>SELECT c/uid/value as compositionId, c/name/value as compositionName,\nc/context/start_time/value as startTime, c/composer/name as authorName, c/context/health_care_facility/name as facilityName\nFROM EHR e [ehr_id/value = '{{ ehrId }}']\nCONTAINS COMPOSITION c\nORDER BY c/context/start_time/value DESC\n</code></pre> <p>Note the ehrId substitution</p> <p>You will need to make sure that the <code>ehrId</code> variable in the queryString is substituted with the correct <code>ehrId</code> for the patient concerned.</p> <p>Don't worry about this seemingly odd format -it is essentially a mix of SQL and a path-based syntax, like SPARQL or XQuery.</p> <p>Running the query is easy- just call the <code>POST /query</code> call, sending the AQL string in the body of the request but note that you should strip the string of any linefeed and carriage returns etc. </p> <p>The Postman 'Ad-hoc query' request has a utility function under 'Pre-req' that sanitises the string and sets it into an environment variable before inserting it into the request body.</p> PostmancURLNodeJs - AxiosPython/requests <p></p> <pre><code>curl --location --request POST 'https://rest.ehrscape.com/rest/v1/query' \\\n    --header 'Content-Type: application/json' \\\n    --header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ== \\\n    --data-raw '{\n        \"aql\": \"{{ queryString }}\"\n    }'\n</code></pre> <pre><code>  var axios = require('axios');\nvar data = JSON.stringify({\"aql\":\"SELECT ... FROM ... CONTAINS ... WHERE\"});\nvar config = {\nmethod: 'post',\nurl: 'https://rest.ehrscape.com/rest/v1/query',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n},\ndata : data\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"https://https://rest.ehrscape.com/rest/v1/query\"\npayload = \"{\\n    \\\"aql\\\": \\\"{{ queryString }}\\\"\\n}\"\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"hse/HSE7-querying-diagnoses/#response","title":"Response","text":"<p>The AQL response comes as back as an openEHR <code>resultSet</code>, which is a tabular shape, the exact format being determined by the AQL itself.</p> <p>In this example we have asked for scalar values only, but it is possible for AQL to return objects.</p> <p>The <code>columns</code> object shows the openEHR paths and aliases that are are returned in each row. </p> <p><code>json {     \"meta\": {         \"_type\": \"RESULTSET\",         \"_created\": \"2020-10-18T15:46:37.208Z\",         \"_executed_aql\": \"SELECT c/uid/value as compositionId, c/name/value as compositionName,\\nc/context/start_time/value as startTime, c/composer/name as authorName, c/context/health_care_facility/name as facilityName\\nFROM EHR e \\nCONTAINS COMPOSITION c\\n \\nORDER BY c/context/start_time/value DESC\"     },     \"q\": \"SELECT c/uid/value as compositionId, c/name/value as compositionName,\\nc/context/start_time/value as startTime, c/composer/name as authorName, c/context/health_care_facility/name as facilityName\\nFROM EHR e \\nCONTAINS COMPOSITION c\\n \\nORDER BY c/context/start_time/value DESC\",     \"columns\": [         {             \"name\": \"compositionId\",             \"path\": \"/uid/value\"         },         {             \"name\": \"compositionName\",             \"path\": \"/name/value\"         },         {             \"name\": \"startTime\",             \"path\": \"/context/start_time/value\"         },         {             \"name\": \"authorName\",             \"path\": \"/composer/name\"         },         {             \"name\": \"facilityName\",             \"path\": \"/context/health_care_facility/name\"         }     ],     \"rows\": [         [             \"687d40df-57d1-4d29-ab41-88396f810de0::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",             \"Passport observations\",             \"2020-10-13T14:31:17.878Z\",             \"moh-jamaica_4cce5a07-be4d-4318-a94f-3b8401853a20\",             null         ],         [             \"845db76d-cf06-4fca-9b62-22a7c231f31b::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",             \"NCD - first visit\",             \"2020-07-22T15:17:03.696Z\",             \"Dr Murphy\",             null         ]     ] }</code></p>"},{"location":"hse/HSE8-composition-constraints/","title":"Understanding composition Constraints and validation","text":"<p>As it is committed, the data will be validated against both the appropriate openEHR template and the underlying Reference Model schema.</p> <p>If the data is valid, it will be stored in the CDR and is allocated a unique <code>compositionID</code>, which is returned by the POST /composition call on a successful call.</p> <p>One of the key challenges in working with openEHR, is in understanding the complexities of the various datatypes and the other validation rules that apply for any particular template.</p> <p>The constraint and validation rules are applied in by</p> <ol> <li> <p>The Reference model</p> </li> <li> <p>Archetype-level constraints</p> </li> <li> <p>Template-level constraints</p> </li> </ol>"},{"location":"hse/HSE8-composition-constraints/#how-to-figure-out-which-constraints-apply","title":"How to figure out which constraints apply?","text":"<p>As an example, I know that a particular coded entry list (perhaps drop-down) allows only a fixed selection of possible answers, which are probably coded ( a good example being a PROMS score). Where can I find how these are defined?</p> <p>The ultimate source of truth is the <code>.opt</code> 'Operational template' which is uploaded to the CDR. It is essentially an aggregation of all the archetype constraints, and any local template constraints, which are than applied ot the underlying RM to give the full validation target.</p> <p>The .opt is a faithful representation of the underlying in-memory objects but is a pretty difficult beast to parse and understand.</p> <p>Fortunately Better provide a 'web template' utility which generates a JSON version of the validation statement but in a much more understandable format -both for human consumption and parsing. The web template facility is available both from the Ehrscape API, and as an export option from the openEHR Archetype Designer. We understand that ehrBase are developing a similar export facility and we expect this to become part of the openEHR standard in due course.</p>"},{"location":"hse/HSE8-composition-constraints/#better-ehrscape-get-template-retrieve-a-web-template","title":"Better Ehrscape: `GET /template - Retrieve a web template'","text":""},{"location":"hse/HSE8-composition-constraints/#parameters","title":"Parameters","text":"<p><code>templateId</code>: This is the identifier of the openEHR template, against which you need to validate the composition, in this case <code>DHI - Urology_PROMs-v0</code> </p> <p><code>format</code>: This defines the format of JSON or XML that you are sending. Use <code>STRUCTURED</code> for this example.</p>"},{"location":"hse/HSE8-composition-constraints/#request","title":"Request","text":"PostmancURLNodeJS/AxiosPython/requests <pre><code>    curl --location \\\n--request GET 'https://rest.ehrscape.com/rest/v1/template/JMOHW - Passport observations.v0' \\\n--header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==' \\\n</code></pre> <pre><code>    var axios = require('axios');\nvar config = {\nmethod: 'get',\nurl: 'https://rest.ehrscape.com/rest/v1/template/JMOHW - Passport observations.v0',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==', };\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>```python\nimport requests\n\nurl = \"https://rest.ehrscape.com/rest/v1/template/JMOHW - Passport observations.v0\"\n\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==',\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text.encode('utf8'))\n</code></pre> <p>```</p>"},{"location":"hse/HSE8-composition-constraints/#response","title":"Response","text":"<pre><code>{\n\"meta\": {\n\"href\": \"https://cdr.code4health.org/rest/v1/template/JMOHW%20-%20Passport%20observations.v0\"\n},\n\"webTemplate\": {\n\"templateId\": \"JMOHW - Passport observations.v0\",\n\"version\": \"2.3\",\n\"defaultLanguage\": \"en\",\n\"languages\": [\n\"en\"\n],\n\"tree\": {\n\"id\": \"passport_observations\",\n\"name\": \"Passport observations\",\n\"localizedName\": \"Passport observations\",\n\"rmType\": \"COMPOSITION\",\n\"nodeId\": \"openEHR-EHR-COMPOSITION.encounter.v1\",\n\"min\": 1,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Passport observations\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Interaction, contact or care event between a subject of care and healthcare provider(s).\"\n},\n\"aqlPath\": \"\",\n\"children\": [\n{\n\"id\": \"context\",\n\"rmType\": \"EVENT_CONTEXT\",\n\"nodeId\": \"\",\n\"min\": 1,\n\"max\": 1,\n\"aqlPath\": \"/context\",\n\"children\": [\n{\n\"id\": \"start_time\",\n\"name\": \"Start_time\",\n\"rmType\": \"DV_DATE_TIME\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/context/start_time\",\n\"inputs\": [\n{\n\"type\": \"DATETIME\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"setting\",\n\"name\": \"Setting\",\n\"rmType\": \"DV_CODED_TEXT\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/context/setting\",\n\"inputs\": [\n{\n\"suffix\": \"code\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"value\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n},\n{\n\"id\": \"blood_pressure\",\n\"name\": \"Blood pressure\",\n\"localizedName\": \"Blood pressure\",\n\"rmType\": \"OBSERVATION\",\n\"nodeId\": \"openEHR-EHR-OBSERVATION.blood_pressure.v2\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Blood pressure\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The local measurement of arterial blood pressure which is a surrogate for arterial pressure in the systemic circulation.\"\n},\n\"annotations\": {\n\"comment\": \"Most commonly, use of the term 'blood pressure' refers to measurement of brachial artery pressure in the upper arm.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.blood_pressure.v2]\",\n\"children\": [\n{\n\"id\": \"systolic\",\n\"name\": \"Systolic\",\n\"localizedName\": \"Systolic\",\n\"rmType\": \"DV_QUANTITY\",\n\"nodeId\": \"at0004\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Systolic\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Peak systemic arterial blood pressure  - measured in systolic or contraction phase of the heart cycle.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.blood_pressure.v2]/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value\",\n\"inputs\": [\n{\n\"suffix\": \"magnitude\",\n\"type\": \"DECIMAL\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;\",\n\"max\": 1000.0\n},\n\"precision\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0,\n\"maxOp\": \"&lt;=\",\n\"max\": 0\n}\n}\n},\n{\n\"suffix\": \"unit\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"mm[Hg]\",\n\"label\": \"mm[Hg]\",\n\"localizedLabels\": {\n\"en\": \"mmHg\"\n},\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;\",\n\"max\": 1000.0\n},\n\"precision\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0,\n\"maxOp\": \"&lt;=\",\n\"max\": 0\n}\n}\n}\n]\n}\n],\n\"termBindings\": {\n\"SNOMED-CT\": {\n\"value\": \"[SNOMED-CT(2003)::271649006]\",\n\"terminologyId\": \"SNOMED-CT\"\n}\n}\n},\n{\n\"id\": \"diastolic\",\n\"name\": \"Diastolic\",\n\"localizedName\": \"Diastolic\",\n\"rmType\": \"DV_QUANTITY\",\n\"nodeId\": \"at0005\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Diastolic\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Minimum systemic arterial blood pressure - measured in the diastolic or relaxation phase of the heart cycle.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.blood_pressure.v2]/data[at0001]/events[at0006]/data[at0003]/items[at0005]/value\",\n\"inputs\": [\n{\n\"suffix\": \"magnitude\",\n\"type\": \"DECIMAL\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;\",\n\"max\": 1000.0\n},\n\"precision\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0,\n\"maxOp\": \"&lt;=\",\n\"max\": 0\n}\n}\n},\n{\n\"suffix\": \"unit\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"mm[Hg]\",\n\"label\": \"mm[Hg]\",\n\"localizedLabels\": {\n\"en\": \"mmHg\"\n},\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;\",\n\"max\": 1000.0\n},\n\"precision\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0,\n\"maxOp\": \"&lt;=\",\n\"max\": 0\n}\n}\n}\n]\n}\n],\n\"termBindings\": {\n\"SNOMED-CT\": {\n\"value\": \"[SNOMED-CT(2003)::271650006]\",\n\"terminologyId\": \"SNOMED-CT\"\n}\n}\n},\n{\n\"id\": \"time\",\n\"name\": \"Time\",\n\"rmType\": \"DV_DATE_TIME\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.blood_pressure.v2]/data[at0001]/events[at0006]/time\",\n\"inputs\": [\n{\n\"type\": \"DATETIME\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.blood_pressure.v2]/language\",\n\"inContext\": true\n},\n{\n\"id\": \"encoding\",\n\"name\": \"Encoding\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.blood_pressure.v2]/encoding\",\n\"inContext\": true\n},\n{\n\"id\": \"subject\",\n\"name\": \"Subject\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.blood_pressure.v2]/subject\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n],\n\"termBindings\": {\n\"SNOMED-CT\": {\n\"value\": \"[SNOMED-CT(2003)::364090009]\",\n\"terminologyId\": \"SNOMED-CT\"\n}\n}\n},\n{\n\"id\": \"height_length\",\n\"name\": \"Height/Length\",\n\"localizedName\": \"Height/Length\",\n\"rmType\": \"OBSERVATION\",\n\"nodeId\": \"openEHR-EHR-OBSERVATION.height.v2\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Height/Length\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Height, or body length, is measured from crown of head to sole of foot.\"\n},\n\"annotations\": {\n\"comment\": \"Height is measured with the individual in a standing position and body length in a recumbent position.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.height.v2]\",\n\"children\": [\n{\n\"id\": \"height_length\",\n\"name\": \"Height/Length\",\n\"localizedName\": \"Height/Length\",\n\"rmType\": \"DV_QUANTITY\",\n\"nodeId\": \"at0004\",\n\"min\": 1,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Height/Length\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The length of the body from crown of head to sole of foot.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.height.v2]/data[at0001]/events[at0002]/data[at0003]/items[at0004]/value\",\n\"inputs\": [\n{\n\"suffix\": \"magnitude\",\n\"type\": \"DECIMAL\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;=\",\n\"max\": 1000.0\n}\n}\n},\n{\n\"suffix\": \"unit\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"cm\",\n\"label\": \"cm\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;=\",\n\"max\": 1000.0\n}\n}\n}\n]\n}\n]\n},\n{\n\"id\": \"time\",\n\"name\": \"Time\",\n\"rmType\": \"DV_DATE_TIME\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.height.v2]/data[at0001]/events[at0002]/time\",\n\"inputs\": [\n{\n\"type\": \"DATETIME\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.height.v2]/language\",\n\"inContext\": true\n},\n{\n\"id\": \"encoding\",\n\"name\": \"Encoding\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.height.v2]/encoding\",\n\"inContext\": true\n},\n{\n\"id\": \"subject\",\n\"name\": \"Subject\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.height.v2]/subject\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n},\n{\n\"id\": \"body_weight\",\n\"name\": \"Body weight\",\n\"localizedName\": \"Body weight\",\n\"rmType\": \"OBSERVATION\",\n\"nodeId\": \"openEHR-EHR-OBSERVATION.body_weight.v2\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Body weight\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Measurement of the body weight of an individual.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_weight.v2]\",\n\"children\": [\n{\n\"id\": \"weight\",\n\"name\": \"Weight\",\n\"localizedName\": \"Weight\",\n\"rmType\": \"DV_QUANTITY\",\n\"nodeId\": \"at0004\",\n\"min\": 1,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Weight\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The weight of the individual.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_weight.v2]/data[at0002]/events[at0003]/data[at0001]/items[at0004]/value\",\n\"inputs\": [\n{\n\"suffix\": \"magnitude\",\n\"type\": \"DECIMAL\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;=\",\n\"max\": 1000.0\n}\n}\n},\n{\n\"suffix\": \"unit\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"kg\",\n\"label\": \"kg\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;=\",\n\"max\": 1000.0\n}\n}\n}\n]\n}\n]\n},\n{\n\"id\": \"time\",\n\"name\": \"Time\",\n\"rmType\": \"DV_DATE_TIME\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_weight.v2]/data[at0002]/events[at0003]/time\",\n\"inputs\": [\n{\n\"type\": \"DATETIME\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_weight.v2]/language\",\n\"inContext\": true\n},\n{\n\"id\": \"encoding\",\n\"name\": \"Encoding\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_weight.v2]/encoding\",\n\"inContext\": true\n},\n{\n\"id\": \"subject\",\n\"name\": \"Subject\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_weight.v2]/subject\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n},\n{\n\"id\": \"blood_glucose\",\n\"name\": \"Blood glucose\",\n\"localizedName\": \"Blood glucose\",\n\"rmType\": \"OBSERVATION\",\n\"nodeId\": \"openEHR-EHR-OBSERVATION.laboratory_test_result.v1\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Blood glucose\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The result, including findings and the laboratory's interpretation, of an investigation performed on specimens collected from an individual or related to that individual.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']\",\n\"children\": [\n{\n\"id\": \"test_name\",\n\"name\": \"Test name\",\n\"localizedName\": \"Test name\",\n\"rmType\": \"DV_CODED_TEXT\",\n\"nodeId\": \"at0005\",\n\"min\": 1,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Test name\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Name of the laboratory investigation performed on the specimen(s).\"\n},\n\"annotations\": {\n\"comment\": \"A test result may be for a single analyte, or a group of items, including panel tests. It is strongly recommended that 'Test name' be coded with a terminology, for example LOINC or SNOMED CT. For example: 'Glucose', 'Urea and Electrolytes', 'Swab', 'Cortisol (am)', 'Potassium in perspiration' or 'Melanoma histopathology'. The name may sometimes include specimen type and patient state, for example 'Fasting blood glucose' or include other information, as 'Potassium (PNA blood gas)'.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/data[at0001]/events[at0002]/data[at0003]/items[at0005]/value\",\n\"inputs\": [\n{\n\"suffix\": \"code\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"14743-9\",\n\"label\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n\"localizedLabels\": {\n\"en\": \"\"\n}\n}\n],\n\"defaultValue\": \"14743-9\",\n\"terminology\": \"LOINC\"\n}\n]\n},\n{\n\"id\": \"laboratory_analyte_result\",\n\"name\": \"Laboratory analyte result\",\n\"localizedName\": \"Laboratory analyte result\",\n\"rmType\": \"CLUSTER\",\n\"nodeId\": \"openEHR-EHR-CLUSTER.laboratory_test_analyte.v1\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Laboratory analyte result\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The result of a laboratory test for a single analyte value.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]\",\n\"children\": [\n{\n\"id\": \"analyte_name\",\n\"name\": \"Analyte name\",\n\"localizedName\": \"Analyte name\",\n\"rmType\": \"DV_CODED_TEXT\",\n\"nodeId\": \"at0024\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Analyte name\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The name of the analyte result.\"\n},\n\"annotations\": {\n\"comment\": \"The value for this element is normally supplied in a specialisation, in a template or at run-time to reflect the actual analyte. For example: 'Serum sodium', 'Haemoglobin'. Coding with an external terminology is strongly recommended, such as LOINC, NPU, SNOMED CT, or local lab terminologies.\",\n\"hl7v2_mapping\": \"OBX.3\",\n\"fhir_mapping\": \"Observation.code\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0024]/value\",\n\"inputs\": [\n{\n\"suffix\": \"code\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"14743-9\",\n\"label\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n\"localizedLabels\": {\n\"en\": \"\"\n}\n}\n],\n\"defaultValue\": \"14743-9\",\n\"terminology\": \"LOINC\"\n}\n]\n},\n{\n\"id\": \"analyte_result\",\n\"name\": \"Analyte result\",\n\"localizedName\": \"Analyte result\",\n\"rmType\": \"DV_QUANTITY\",\n\"nodeId\": \"at0001\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Analyte result\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The value of the analyte result.\"\n},\n\"annotations\": {\n\"comment\": \"For example '7.3 mmol/l', 'Raised'. The 'Any' data type will need to be constrained to an appropriate data type in a specialisation, a template or at run-time to reflect the actual analyte result. The Quantity data type has reference model attributes that include flags for normal/abnormal, reference ranges and approximations - see https://specifications.openehr.org/releases/RM/latest/data_types.html#_dv_quantity_class for more details.\",\n\"hl7v2_mapping\": \"OBX.2, OBX.5, OBX.6, OBX.7, OBX.8\",\n\"fhir_mapping\": \"Observation.value[x]\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value\",\n\"inputs\": [\n{\n\"suffix\": \"magnitude\",\n\"type\": \"DECIMAL\"\n},\n{\n\"suffix\": \"unit\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"mmol/L\",\n\"label\": \"mmol/L\"\n}\n]\n}\n]\n}\n]\n},\n{\n\"id\": \"time\",\n\"name\": \"Time\",\n\"rmType\": \"DV_DATE_TIME\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/data[at0001]/events[at0002]/time\",\n\"inputs\": [\n{\n\"type\": \"DATETIME\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/language\",\n\"inContext\": true\n},\n{\n\"id\": \"encoding\",\n\"name\": \"Encoding\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/encoding\",\n\"inContext\": true\n},\n{\n\"id\": \"subject\",\n\"name\": \"Subject\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/subject\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n},\n{\n\"id\": \"pulse_oximetry\",\n\"name\": \"Pulse oximetry\",\n\"localizedName\": \"Pulse oximetry\",\n\"rmType\": \"OBSERVATION\",\n\"nodeId\": \"openEHR-EHR-OBSERVATION.pulse_oximetry.v1\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Pulse oximetry\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Blood oxygen and related measurements, measured by pulse oximetry or pulse CO-oximetry.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.pulse_oximetry.v1]\",\n\"children\": [\n{\n\"id\": \"spo\",\n\"name\": \"SpO\u2082\",\n\"localizedName\": \"SpO\u2082\",\n\"rmType\": \"DV_PROPORTION\",\n\"nodeId\": \"at0006\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"SpO\u2082\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The saturation of oxygen in the peripheral blood, measured via pulse oximetry.\"\n},\n\"annotations\": {\n\"comment\": \"SpO\u2082 is defined as the percentage of oxyhaemoglobin (HbO\u2082) to the total concentration of haemoglobin (HbO\u2082 + deoxyhaemoglobin) in peripheral blood.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.pulse_oximetry.v1]/data[at0001]/events[at0002]/data[at0003]/items[at0006]/value\",\n\"proportionTypes\": [\n\"percent\"\n],\n\"inputs\": [\n{\n\"suffix\": \"numerator\",\n\"type\": \"DECIMAL\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;=\",\n\"max\": 100.0\n}\n},\n\"defaultValue\": 0.0\n},\n{\n\"suffix\": \"denominator\",\n\"type\": \"DECIMAL\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 100.0,\n\"maxOp\": \"&lt;=\",\n\"max\": 100.0\n}\n}\n}\n],\n\"termBindings\": {\n\"SNOMED-CT\": {\n\"value\": \"[SNOMED-CT::431314004]\",\n\"terminologyId\": \"SNOMED-CT\"\n},\n\"LOINC\": {\n\"value\": \"[LOINC::59408-5]\",\n\"terminologyId\": \"LOINC\"\n}\n}\n},\n{\n\"id\": \"time\",\n\"name\": \"Time\",\n\"rmType\": \"DV_DATE_TIME\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.pulse_oximetry.v1]/data[at0001]/events[at0002]/time\",\n\"inputs\": [\n{\n\"type\": \"DATETIME\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.pulse_oximetry.v1]/language\",\n\"inContext\": true\n},\n{\n\"id\": \"encoding\",\n\"name\": \"Encoding\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.pulse_oximetry.v1]/encoding\",\n\"inContext\": true\n},\n{\n\"id\": \"subject\",\n\"name\": \"Subject\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.pulse_oximetry.v1]/subject\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n},\n{\n\"id\": \"body_temperature\",\n\"name\": \"Body temperature\",\n\"localizedName\": \"Body temperature\",\n\"rmType\": \"OBSERVATION\",\n\"nodeId\": \"openEHR-EHR-OBSERVATION.body_temperature.v2\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Body temperature\"\n},\n\"localizedDescriptions\": {\n\"en\": \"A measurement of the body temperature, which is a surrogate for the core body temperature of the individual.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_temperature.v2]\",\n\"children\": [\n{\n\"id\": \"temperature\",\n\"name\": \"Temperature\",\n\"localizedName\": \"Temperature\",\n\"rmType\": \"DV_QUANTITY\",\n\"nodeId\": \"at0004\",\n\"min\": 1,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Temperature\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The measured body temperature (as a surrogate for the core of the body).\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_temperature.v2]/data[at0002]/events[at0003]/data[at0001]/items[at0004]/value\",\n\"inputs\": [\n{\n\"suffix\": \"magnitude\",\n\"type\": \"DECIMAL\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 30.0,\n\"maxOp\": \"&lt;\",\n\"max\": 200.0\n},\n\"precision\": {\n\"minOp\": \"&gt;=\",\n\"min\": 1,\n\"maxOp\": \"&lt;=\",\n\"max\": 1\n}\n}\n},\n{\n\"suffix\": \"unit\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"[degF]\",\n\"label\": \"[degF]\",\n\"localizedLabels\": {\n\"en\": \"\u00b0F\"\n},\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 30.0,\n\"maxOp\": \"&lt;\",\n\"max\": 200.0\n},\n\"precision\": {\n\"minOp\": \"&gt;=\",\n\"min\": 1,\n\"maxOp\": \"&lt;=\",\n\"max\": 1\n}\n}\n}\n]\n}\n],\n\"termBindings\": {\n\"LNC205\": {\n\"value\": \"[LNC205::8310-5]\",\n\"terminologyId\": \"LNC205\"\n},\n\"SNOMED-CT\": {\n\"value\": \"[SNOMED-CT::386725007]\",\n\"terminologyId\": \"SNOMED-CT\"\n}\n}\n},\n{\n\"id\": \"time\",\n\"name\": \"Time\",\n\"rmType\": \"DV_DATE_TIME\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_temperature.v2]/data[at0002]/events[at0003]/time\",\n\"inputs\": [\n{\n\"type\": \"DATETIME\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_temperature.v2]/language\",\n\"inContext\": true\n},\n{\n\"id\": \"encoding\",\n\"name\": \"Encoding\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_temperature.v2]/encoding\",\n\"inContext\": true\n},\n{\n\"id\": \"subject\",\n\"name\": \"Subject\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_temperature.v2]/subject\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n},\n{\n\"id\": \"clinical_synopsis\",\n\"name\": \"Clinical synopsis\",\n\"localizedName\": \"Clinical synopsis\",\n\"rmType\": \"EVALUATION\",\n\"nodeId\": \"openEHR-EHR-EVALUATION.clinical_synopsis.v1\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Clinical synopsis\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Narrative summary or overview about a patient, specifically from the perspective of a healthcare provider, and with or without associated interpretations.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-EVALUATION.clinical_synopsis.v1]\",\n\"children\": [\n{\n\"id\": \"notes\",\n\"name\": \"Notes\",\n\"localizedName\": \"Notes\",\n\"rmType\": \"DV_TEXT\",\n\"nodeId\": \"at0002\",\n\"min\": 1,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Notes\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The summary, assessment, conclusions or evaluation of the clinical findings.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-EVALUATION.clinical_synopsis.v1]/data[at0001]/items[at0002,'Notes']/value\",\n\"inputs\": [\n{\n\"type\": \"TEXT\"\n}\n]\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-EVALUATION.clinical_synopsis.v1]/language\",\n\"inContext\": true\n},\n{\n\"id\": \"encoding\",\n\"name\": \"Encoding\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-EVALUATION.clinical_synopsis.v1]/encoding\",\n\"inContext\": true\n},\n{\n\"id\": \"subject\",\n\"name\": \"Subject\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-EVALUATION.clinical_synopsis.v1]/subject\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n},\n{\n\"id\": \"category\",\n\"rmType\": \"DV_CODED_TEXT\",\n\"nodeId\": \"\",\n\"min\": 1,\n\"max\": 1,\n\"aqlPath\": \"/category\",\n\"inputs\": [\n{\n\"suffix\": \"code\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"433\",\n\"label\": \"event\",\n\"localizedLabels\": {\n\"en\": \"event\"\n}\n}\n],\n\"terminology\": \"openehr\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/language\",\n\"inContext\": true\n},\n{\n\"id\": \"territory\",\n\"name\": \"Territory\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/territory\",\n\"inContext\": true\n},\n{\n\"id\": \"composer\",\n\"name\": \"Composer\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/composer\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"hse/HSE9-openehr-datatypes/","title":"Key openEHR datatypes","text":"<p>The openEHR Reference model defines a relatively small set of information model constructs which openEHR back-ends must support. This includes a number of generic classes and datatypes.</p> <p>The Reference model contains virtually no clinical content e.g concepts for Medication, or Diagnosis. These are defined and managed separately as <code>archetypes</code>.</p> <p>openEHR has a very rich set of allowable datatypes. A full definition is beyond the scope of this document but developers new to this field may find the following notes helpful. You can refer to the  openEHR Specification  and UML for full details.</p> <p>The formal Class names for all datatypes in openEHR start with <code>DV_</code></p>"},{"location":"hse/HSE9-openehr-datatypes/#datatype-text-dv_text","title":"Datatype: text <code>DV_TEXT</code>","text":"<p>Allows the recording of simple, unformatted text. Newlines and carriage returns are allowed. openEHR does not normally constrain the length of string.</p> <p>The example shows how a multiple occurrence Element is handled.</p> RM SpecsCANONICAL JSONSTRUCTURED JSONFLAT JSON <p>The rm.data_types.text package contains classes for representing all textual values in the health record, including plain text, coded terms, and narrative text. </p> <pre><code>    {\n\"items\": [\n{\n\"_type\": \"ELEMENT\",\n\"name\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"What matters to me\"\n},\n\"archetype_node_id\": \"at0004\",\n\"value\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"Parents\"\n}\n},\n{\n\"_type\": \"ELEMENT\",\n\"name\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"What matters to me #2\"\n},\n\"archetype_node_id\": \"at0004\",\n\"value\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"Mood\"\n}\n},\n{\n\"_type\": \"ELEMENT\",\n\"name\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"What matters to me #3\"\n},\n\"archetype_node_id\": \"at0004\",\n\"value\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"Isolation\"\n}\n}\n]\n}\n</code></pre> <pre><code>    \"what_matters_to_me\": [\n\"Parents\",\n\"Mood\",\n\"Isolation\"\n]\n</code></pre> <pre><code>    \"what_matters_to_me:0\": \"Parents\",\n\"what_matters_to_me:1\": \"Mood\",\n\"what_matters_to_me:2\": \"Isolation\"\n</code></pre> <p>Hint</p> <p><code>DV_TEXT</code> can always be sub-classed to <code>DV_CODED_TEXT</code>, so when you see a text constraint in an archetype , this can normally always be converted to a codedText in a template or at run-time.  As an example, the primary element in the Adverse reaction risk archetype is a <code>DV_TEXT</code> but in most circumstances a DV_CODED_TEXT will actually be used.</p>"},{"location":"hse/HSE9-openehr-datatypes/#datatype-codedtext-dv_coded_text","title":"Datatype: codedText <code>DV_CODED_TEXT</code>","text":"<p>Is a commonly used datatype in openEHR systems and is a sub-class of text. i.e wherever text is specified codedText can be used instead.</p> <p>Codes may be 'external' e.g. SNOMED CT, LOINC, ICD-10 or 'local', where they are defined within archetypes, have the form <code>atxxxxx</code> and are commonly referred to as 'atCodes'.</p> <p>A codedText element always includes the terminologyID, the code itself and the text of the coded concept (Rubric). In the patient data this is a carried in the <code>defining_code</code> attribute of the datatype.</p> RM SpecsCANONICAL JSONSTRUCTURED JSONFLAT JSON <p>The rm.data_types.text package contains classes for representing all textual values in the health   record, including plain text, coded terms, and narrative text. </p> <pre><code>   {\n\"_type\": \"ELEMENT\",\n\"name\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"Status\"\n},\n\"archetype_node_id\": \"at0004\",\n\"value\": {\n\"_type\": \"DV_CODED_TEXT\",\n\"value\": \"Unknown\",\n\"defining_code\": {\n\"_type\": \"CODE_PHRASE\",\n\"terminology_id\": {\n\"_type\": \"TERMINOLOGY_ID\",\n\"value\": \"local\"\n},\n\"code_string\": \"at0007\"\n}\n}\n}\n</code></pre> <pre><code>    \"legal_welfare_proxy_in_place\": [\n{\n\"status\": [\n{\n\"|code\": \"at0007\",\n\"|value\": \"Unknown\",\n\"|terminology\": \"local\"\n}\n],\n}\n]\n</code></pre> <pre><code>  \"legal_welfare_proxy_in_place/status|value\": \"Unknown\",\n\"legal_welfare_proxy_in_place/status|code\": \"at0007\",\n\"legal_welfare_proxy_in_place/status|terminology\": \"local\"\n</code></pre>"},{"location":"hse/HSE9-openehr-datatypes/#using-local-atcodes","title":"Using local 'atCodes'","text":"<p>e.g <code>local::at0007| normal|</code></p> <p>When a codedText item is added to a FLAT or STRUCTURED JSON format document, you must give the code, value and terminology, unless this is a local 'atCode', in which case only the code needs to be provided, as the terminologyId and text value will be supplied as defaults, based on the known values in the template. </p> <p>Only the code needs to be specified - the value and terminology are not required since they are pre-defined in the openEHR template..</p> <p><code>asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/test_result_name|code': 'at0071'</code></p>"},{"location":"hse/HSE9-openehr-datatypes/#using-external-terminology","title":"Using external terminology","text":"<p>e.g. <code>SNOMED-CT::23924001| chest tightness |</code></p> <p>If an external terminology is used, the code, terminology and value must be specified.</p> CANONICAL JSONSTRUCTURED JSONFLAT JSON <pre><code>   {\n\"_type\": \"ELEMENT\",\n\"name\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"Status\"\n},\n\"archetype_node_id\": \"at0004\",\n\"value\": {\n\"_type\": \"DV_CODED_TEXT\",\n\"value\": \"chest tightness\",\n\"defining_code\": {\n\"_type\": \"CODE_PHRASE\",\n\"terminology_id\": {\n\"_type\": \"TERMINOLOGY_ID\",\n\"value\": \"SNOMED-CT\"\n},\n\"code_string\": \"23924001\"\n}\n}\n}\n</code></pre> <pre><code>      \"symptom\": [\n{\n\"symptom_name\": [\n{\n\"|code\": \"23924001\",\n\"|value\": \"chest tightness\",\n\"|terminology\": \"SNOMED-CT\"\n}\n],\n}\n]\n</code></pre> <pre><code>    \"asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|code\": \"23924001'\",\n\"asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|value\": \"chest tightness'\",\n\"asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|terminology\": \"SNOMED-CT\"\n</code></pre>"},{"location":"hse/HSE9-openehr-datatypes/#handling-multiple-codes-mappings","title":"Handling multiple codes - Mappings","text":"<p>Both DV_TEXT and DV_CODED_TEXT allow for other codes to be recorded in the patient record alongside the text value or defining code. THis is done via the <code>mappings</code> attribute in the DV_TEXT/DV_CODED_TEXT datatype.</p> RM SpecsCANONICAL JSONSTRUCTURED JSONFLAT JSON <p>openEHR DV_TEXT mappings</p> <pre><code>    //TBD\n</code></pre> <pre><code>   //TBD\n</code></pre> <pre><code>    //TBD\n</code></pre>"},{"location":"hse/HSE9-openehr-datatypes/#integrationimport-handling-emptynull-codedtext-data","title":"Integration/import: Handling empty/null codedText data","text":"<p>When integrating data from an external source, you may encounter an issue if the source data is absent.</p> <p>For example if the target json is <pre><code>    \"generic_laboratory_report/laboratory_test_result:0/specimen:0/specimen_type|value\": \"A value\",\n\"generic_laboratory_report/laboratory_test_result:0/specimen:0/specimen_type|code\": \"some_code\",\n\"generic_laboratory_report/laboratory_test_result:0/specimen:0/specimen_type|terminology\": \"some_terminology\",\n</code></pre></p> <p>and the incoming specimen_type datapoint is null or absent.</p> <p>In the Better CDR if you simple make each of the |value, |code and |terminology attributes and empty string, the whole row will be ignored by the CDR, which is correct, as the Specimen type element is optional.</p> <p>Unfortunately EhrBase is a little more complicated since it enforces an openEHR constraint which says that a CodedText object must have all 3 attributes populated, and ignores the fact that the overall element is itself optional.</p> <p>Hint</p> <p>The upshot is that for an Ehrbase CDR, using FLAT format, we have to explicitly skip any rows where the incoming data is absent, whereas a Better CDR handles this more gracefully and will skip the row internally.</p>"},{"location":"hse/HSE9-openehr-datatypes/#datatype-identifier-dv_identifier","title":"Datatype: identifier <code>DV_IDENTIFIER</code>","text":"<p>identifier is an object designed to handle external identifiers like hospital numbers, national patient identifiers, professional identifiers etc.</p> <p>The Identifier datatype object has the following attributes:</p> <pre><code>id: mandatory        // The identifier itself\ntype: optional       // The type of identifier\nassigner: optional   // The assigning authority\nissuer: optional     // The issuing authority\n</code></pre> RM SpecsCANONICAL JSONSTRUCTURED JSONFLAT JSON <p>The rm.data_types.identifier package contains classes for representing all textual values in the health record, including plain text, coded terms, and narrative text. </p> <pre><code>{\n\"_type\": \"ELEMENT\",\n\"name\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"Filler order number\"\n},\n\"value\": {\n\"_type\": \"DV_IDENTIFIER\",\n\"id\": \"JS008002B\",\n\"type\": \"filler_order_number\",\n\"issuer\": \"gov.ie\",\n\"assigner\": \"ie.gov.hse\"\n},\n\"archetype_node_id\": \"at0063\"\n},\n</code></pre> <pre><code>    \"filler_order_number\": [\n{\n\"|type\": \"filler_order_number\",\n\"|id\": \"JS008002B\"\n\"|issuer\": \"Issuer\",\n\"|assigner\": \"Assigner\",\n}\n],\n</code></pre> <pre><code> \"generic_laboratory_report/laboratory_test_result:1/test_request_details/filler_order_number|id\": \"JS008002B\",\n\"generic_laboratory_report/laboratory_test_result:1/test_request_details/filler_order_number|type\": \"filler_order_number\",\n\"generic_laboratory_report/laboratory_test_result:0/test_request_details/filler_order_number|issuer\": \"Issuer\",\n\"generic_laboratory_report/laboratory_test_result:0/test_request_details/filler_order_number|assigner\": \"Assigner\",\n</code></pre>"},{"location":"hse/HSE9-openehr-datatypes/#integrationimport-handling-emptynull-data","title":"Integration/import: Handling empty/null data","text":"<p>When integrating data from an external source, you may encounter an issue if the source data is absent.</p> <p>For example if the target json is <pre><code>     \"generic_laboratory_report/laboratory_test_result:1/test_request_details/filler_order_number|id\": \"an identifier\",\n\"generic_laboratory_report/laboratory_test_result:1/test_request_details/filler_order_number|type\": \"filler_order_number\",\n\"generic_laboratory_report/laboratory_test_result:0/test_request_details/filler_order_number|issuer\": \"Issuer\",\n\"generic_laboratory_report/laboratory_test_result:0/test_request_details/filler_order_number|assigner\": \"Assigner\",\n</code></pre></p> <p>and the incoming <code>filler_order_number</code> datapoint is null or absent.</p> <p>In the Better CDR if you simply make each of the |id, |type and any other attributes an empty string, the whole row will be ignored by the CDR, which is correct, as the Filler order number type element is optional.</p> <p>Unfortunately EhrBase is a little more complicated since it enforces an openEHR constraint which says that the 'id' attribute within Identifier object is mandatory, and ignores the fact that the overall element is itself optional.</p> <p>Hint</p> <p>The upshot is that for an Ehrbase CDR, using FLAT/STRUCTURED format, we have to explicitly skip any Identifier object, where the incoming data is absent, whereas a Better CDR handles this more gracefully and will skip the row internally.</p>"},{"location":"hse/HSE9-openehr-datatypes/#datatype-ordinal-dv_ordinaland-scale-dv_scale","title":"Datatype: ordinal <code>DV_ORDINAL</code>and scale <code>DV_SCALE</code>","text":"<p>Combines codedText with a score, expressed as an integer (DV_ORDINAL) or a real number (DV_SCALE). </p> <p>DV_SCALE is just being introduced in the latest version of the Reference Model to support the small number of scales and scores that need real numbers. We expect DV_SCALE to be used in preference to DV_ORDINAL for new archetypes. </p> <pre><code>    0: Green  `local::at0022::Green`\n1: Amber  `local::at0023::Amber`\n2: Red    `local::at0024::Red`\n'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|code': 'at0024',\n'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|ordinal': 2,\n'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|value': 'Red',\n</code></pre>"},{"location":"hse/HSE9-openehr-datatypes/#datatype-count-dv_count","title":"Datatype: count <code>DV_COUNT</code>","text":"<p>count is a simple integer.</p> <pre><code>'community_dental_final_assessment_letter/investigations_and_results:0/imaging_examination_result:0/result_group/decayed_teeth/decayed_teeth': 4,\n</code></pre>"},{"location":"hse/HSE9-openehr-datatypes/#datatype-datetime-dv_date_time","title":"Datatype: datetime <code>DV_DATE_TIME</code>","text":"<p>Records a date or date and time using the ISO8061 format.</p> <pre><code>'ctx/time': '2014-09-23T00:11:02.518+02:00'\n</code></pre>"},{"location":"hse/HSE9-openehr-datatypes/#integrationimport-handling-emptynull-datetime-data","title":"Integration/import: Handling empty/null dateTime data","text":"<p>When integrating data from an external source, you may encounter an issue if the source data is absent and the dateTime in the target is mandatory - </p> <p>For example if the target json is <pre><code>\"discharge_summary/procedures_list/procedure:0/time\": \"2022-02-03T04:05:06\",\n</code></pre></p> <p>and the incoming procedure datapoint is null or absent, you will get an error as the 'time' attribute in openEHR is mandatory for any ACTION archetype.</p> <p>Hint</p> <p>It may be necessary to create a dummy dateTime in this case e.g \"1900-01-01\" though this needs to be discussed clinically to ensure that it does not lead to any safety issues.</p>"},{"location":"hse/HSE9-openehr-datatypes/#datatype-quantity-dv_quantity","title":"Datatype: quantity <code>DV_QUANTITY</code>","text":"<p>Records a physical quantity along with the appropriate SI units, which should normally be compliant with UCUM.</p> RM SpecsCANONICAL JSONSTRUCTURED JSONFLAT JSON <p>The rm.data_types.quantity package contains classes for representing all textual values in the health record, including plain text, coded terms, and narrative text. </p> <pre><code>{\n//TBD\n</code></pre> <pre><code> ///TBD\n</code></pre> <pre><code>    \"asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/actual_result|magnitude\": 550,\n\"asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/actual_result|unit\": \"l/min\",\n</code></pre>"},{"location":"hse/HSE9-openehr-datatypes/#key-openehr-reference-model-attributes","title":"Key openEHR Reference model attributes","text":"<p>A number of key data points need to be populated in an openEHR composition, which may not be apparent from the archetypes or templates. Developers can largely use the example instance documents and APIs for guidance but these notes may give useful background in addition to viewing the UML view of the openEHR reference model.</p>"},{"location":"hse/HSE9-openehr-datatypes/#committer","title":"committer","text":"<p>This is the name of the person physically committing the document ie. the person logged on to the account. If omitted from API calls, Ehrscape will use the domain login name.</p>"},{"location":"hse/HSE9-openehr-datatypes/#compositioncomposer","title":"composition/composer","text":"<p>This is the clinical author of the document i.e the person with clinical responsibility. Ehrscape FLAT and STRCTURTED formats handle this as <code>composer_name</code>.</p>"},{"location":"hse/HSE9-openehr-datatypes/#compositioncontextstart_time","title":"composition/context/start_time","text":"<p>This is the time that the clinical interaction with the patient began. Ehrscape FLAT and STRUCTURED formats handle this as ctx/time.</p>"},{"location":"hse/HSE9-openehr-datatypes/#compositioncontexthealth_care_facility","title":"composition/context/health_care_facility","text":"<p>This is the healthcare facility / oragnisation under who\u2019s remit the encounter took place.</p>"},{"location":"hse/HSE9-openehr-datatypes/#observationtime","title":"observation/time","text":"<p>This is the time that a patient\u2019s signs and symptoms were observed or a test was run. It is set automatically by the value of the ctx/time attribute. If you need to set the time of a specific observation you can use</p> <p>The Ehrscape FLAT and STRUCTURED formats hide much of the complexity of these attributes, providing sensible defaults. In particular the <code>ctx</code> header common to both JSON STRUCTURED and FLAT formats, considerably simplifies the composition header \u2026</p> <pre><code>'ctx/composer_name': 'Rebecca Wassall',\n'ctx/health_care_facility|id': '999999-345',\n'ctx/health_care_facility|name': 'Northumbria Community NHS',\n'ctx/id_namespace': 'NHS-UK',\n'ctx/id_scheme': '2.16.840.1.113883.2.1.4.3',\n'ctx/language': 'en',\n'ctx/territory': 'GB',\n'ctx/time': '2014-09-23T00:11:02.518+02:00',\n</code></pre>"},{"location":"hse/HSE9-openehr-datatypes/#tricky-issues","title":"Tricky issues","text":""},{"location":"hse/HSE9-openehr-datatypes/#converting-ui-checkboxes-tofrom-codedtext","title":"Converting UI checkboxes to/from codedText","text":"<p>In a number of places, the UI may best be represented as a set of checkboxes, while the underlying data is modelled as codedText.</p> <p>e.g. Symptoms</p> <p>While it may seem more easier and more logical to use a boolean datatype, this is a common pattern in openEHR datasets which are designed to be interoperable and extensible. Experience has shown that expansion of the target valueset and alignment to external terminologies is easier if an enumerated list of codedText is used rather than boolean.</p> <p>In the case of 'Symptom' the rule is \u2026</p> <ul> <li> <p>If the checkbox is ticked, populate the Symptom name with the     SNOMED-CT term</p> </li> <li> <p>If the checkbox is unticked, omit the Symptom name element     completely.</p> </li> </ul> <p>Conversely when loading a persisted dataset, the checkbox should only be checked if the Symptom name element is present and contains SNOMED-CT term 102616008.</p>"},{"location":"intro/INT1-overview-openehr/","title":"Introduction","text":"<p>openEHR is a non-profit collaborative which promotes an open standards-based person-centric health and care records ecosystem, sometimes referred to as the 'open Platform' approach. </p> <p>It envisages a world where patient/person health and care information is managed coherently in person-centric information stores, independent of the applications that read, write and query the at information. </p> <p>This is quite different from the current norm in healthcare, where thousands of individual applications hold siloed parts of the person's record, in siloed, normally proprietary, logical and physical data formats. Decades of effort have gone into trying to make this 'best-of-breed' approach interoperate, and whilst some positive progress is being made with HL7 FHIR, the limits of 'traditional interoperability are increasingly evident, as the complexity scales-up.</p> <p>The openEHR community believes that traditional interoperability between siloed systems, whilst a necessary part of the story,  will not, by itself, deliver the kind of seamless and coherent integration between apps that otherwise has only been possible by acquiring a single, large-scale vendor system, with all of the disadvantages of technical and commercial lock-in that follow.</p> <p>This website also gives a helpful overview of the 'open platform approach' which openEHR is designed to support.openehr-modellinfg</p>"},{"location":"intro/INT1-overview-openehr/#the-openehr-clinical-data-repository-cdr","title":"The openEHR Clinical Data Repository (CDR)","text":"<p>openEHR offers an alternative 'third-way' where apps are increasingly built to work with person-centric, standards-based 'Clinical Data Repository' (CDR) datastores instead of siloed, proprietary datastores. As well as helping promote much tighter integration, this should substantially reduce the barriers to new market entrants by allowing complex services to be provided on top of theCDR e.g integrations with national services such as national medication management.</p> <p>openEHR does not itself create and publish CDR solutions or related applications, rather it provides a specification for the logical information model that underpins this key part of the technology stack. </p> <p>Critically the specification is completely agnostic with respect to the physical database or programming language, used by the CDR. From the perspective of the third-party app developer, they interact almost entirely with the CDR via a relatively small API, standardised data formats and a query language which is based on the logical models, not on the physical database/ schema employed. This allows competing internal CDR designs and technology choices to emerge without disturbing the application's interactions.</p> <p>openEHR systems can be built on any programming language, OS platform and with any persistence solution - examples of SQL Server, Oracle, PostgreSQL, mongoDB and MumpsDB solutions exist. It is the responsibility of the back-end developer to map their chosen persistence solution to the openEHR logical information model and querying system. </p>"},{"location":"intro/INT1-overview-openehr/#splitting-the-logical-information-model-two-level-modelling","title":"Splitting the logical information model ... 'two-level modelling'","text":"<p>One of the critical innovations in openEHR is the separation of the logical model into two parts.</p>"},{"location":"intro/INT1-overview-openehr/#1-the-reference-model-rm","title":"1. The Reference Model (RM)","text":"<p>The RM is a typical technical logical model, published as a set of specifications and UML diagrams. It covers basic engineering requirements for a person-centric health and care record e.g datatypes, generic structures, data commit behaviours, versioning rules.</p> <p>However, the RM, unlike most attempts to build healthcare logical models, has virtually no healthcare domain content - there are no Allergies, Medication or Diagnosis models. </p> <p>The definition and governance of those health and care concepts are left to the Domain modelling layer, however any domain models must be fully compliant with the RM, which is designed so that new and updated models can be incorporated without any re-engineering of the CDR.</p> <p>This is a very critical part of the openEHR ecosystem, and sometimes hard to grasp both conceptually and practically, but it allows CDRs to be be able to handle any new healthcare concepts supplied by the domain modellers without requiring any database re-factoring. </p> <p>It also crucially changes the relationship between the CDR vendor and their customer, since the customer can control/update the data and data definitions within the CDR without any recourse to the vendor.</p> <p>In essence this is not dissimilar to the kind of abstraction provided by Django or Ruby Active Objects, but is designed to work with the health domain, is much more extensible, and is designed to work in a completely language and technology-neutral manner.</p>"},{"location":"intro/INT1-overview-openehr/#2-domain-modelling-archetypes-and-templates","title":"2. Domain Modelling (Archetypes and templates)","text":"<p>in openEHR, domain concepts like Allergy, Medication order, Procedure, Device are all defined and governed quite separately from the RM, primarily as shareable components known as Archetypes. </p> <p>In practice apps developers will normally work with aggregations of archetypes known as Templates, which represent a specific use-case e.g an application dialog to store a typical nursing 'vital signs' record , including checking the patient's blood pressure, pulse , temperature etc.</p> <p></p> <p>In order for a CDR to understand these information models, know how to persist and retrieve the information, the requisite templates and archetypes need simply to be registered with the CDR (normally via the CDR API). </p> <p>A thriving community based around exists to develop, publish and share internationally valid archetypes (which cover 70% of most projects) but there is no compulsion to use those archetypes. In that sense, openEHR as a modelling ecosystem more closely resembles the way that the open-source, distributed development community operates. At national, regional and implementer level there is much tighter governance, defining exactly which archetypes should be used.</p>"},{"location":"intro/INT1-overview-openehr/#confused","title":"Confused!!","text":"<p>These ideas can seem like a stretch to technologists used to tight coupling of app-level information to underyling database products, and to modellers unfamiliar with the 2-level approach.</p> <p>Possibly the best analogy is to the way that HTML/javascript is handled within browsers.</p> <p>Essentially browser manufacturers implement the Domain Object Model (DOM) standard, which at very generic levels defines how to handle HTML, CSS and javascript but says nothing about specific content or theming. That is left to the web designer. In the openEHR world, the RM is equivalent to the HTML DOM.</p> <p>openEHR archetypes can be thought of as being like CSS frameworks or React components, which 'graft' on to the DOM/RM at run-time, but are fully accessible to the programmer via the DOM/RM. </p> <p>If web developers use shared React components or CSS frameworks like Bootstrap or Material, they will achieve some standardisation of behaviour'. </p> <p>Similarly if openEHR developers use the international blood pressure archetype their systems will be interoperable for blood pressure, even if the underlying CDRs have a different vendor or technology.</p>"},{"location":"intro/INT1-overview-openehr/#what-does-an-openehr-based-system-look-like","title":"What does an openEHR-based system look like?","text":"<p>Logically the overall structure of an openEHR-based system is \u2026</p> <pre><code>Physical CDR\n Virtual CDR (optional)\n  EHR \n   FOLDER\n    COMPOSITION\n     SECTION\n      ENTRY\n       CLUSTER\n        ELEMENT\n            name\n            value\n</code></pre> <p>Every single piece of information recorded in an openEHR system follows this generic pattern ....</p> <pre><code>Physical CDR   {Code4Health CDR}\n Virtual CDR     { My CDR Domain }\n  EHR              { John Smith }\n   FOLDER               { Cardiology pathway }\n    COMPOSITION            { Outpatient review letter }\n     SECTION                  { Investigations }\n      ENTRY                      { Lab Test - U and E's }\n       CLUSTER                      { Lab analyte }\n        ELEMENT\n            name                      { Urea }\n            value                      { 4.3 mmols/l}\n</code></pre>"},{"location":"intro/INT1-overview-openehr/#cdr-care-data-repository","title":"CDR - Care Data Repository","text":"<p>All of the records within a single namespaced patient data repository. In some environments, a single physical repository may be represented as a number of independent virtual \u2018domains\u2019 each of which can be regarded as a separate CDR.</p>"},{"location":"intro/INT1-overview-openehr/#ehr-electronic-health-record","title":"EHR - Electronic Health Record","text":"<p>An EHR is the top-level container of all clinical records for a single patient. All of those records are created as Compositions. When a new person/patient is registered with a CDR, a new EHR object is created, generally keyed on some kind of external identifier such as an NHS number, CHI number or other Medical Record identifier (MRI). </p>"},{"location":"intro/INT1-overview-openehr/#folder-optional","title":"Folder (optional)","text":"<p>A high-level grouping of references to Compositions. A Composition may exist in multiple Folders. For example a patient with Diabetes who is admitted to hospital with a related problem may have any related Compositions tagged as being in both a 'Diabetes Folder' and a Folder specific to that admission.</p>"},{"location":"intro/INT1-overview-openehr/#composition","title":"Composition","text":"<p>A Composition is a 'document-style' container for all clinical records. This equates to an Encounter, a Lab Report, a Discharge summary, a set of Nursing Observations. </p> <p>All openEHR data is stored within the context of a Composition and always includes standard clinical/medico-legal context information such as clinical author details, encounter times etc.</p> <p>Compositions are versioned and fully-audit trailed, so that previous versions can always be retrieved, if they need to be updated or deleted.</p> <p>The Composition is the container for structured/ coded data with granular clinical statements such as procedure, blood pressure, allergy expressed as an Entry, within which the leaf data is contained in Elements e.g Systolic, Diastolic, Cuff size.</p> <p>Although openEHR information is always stored in the context of a particular Composition, it can always be queried indpendently of that context.</p>"},{"location":"intro/INT1-overview-openehr/#composition-versioning","title":"Composition versioning","text":"<p>openEHR systems handle versioning automatically. Any time a new version of an existing document is committed to the system, its unique compositionId identifier \u2018version suffix\u2019 is updated e.g</p> <pre><code>798e27b1-f2e8-48c3-8ced-42d4d27d1db3::c4h.hopd.com::1\n</code></pre> <p>\u2192</p> <pre><code>798e27b1-f2e8-48c3-8ced-42d4d27d1db3::c4h.hopd.com::2\n</code></pre> <p>In normal operation only the most recent version of the composition is returned by querying or composition retrieval.</p>"},{"location":"intro/INT1-overview-openehr/#section-optional","title":"Section (optional)","text":"<p>Sections are optional structures which are used to break up complex openEHR Compositions, grouping the Entries into high-level headings e.g. in a Transfer of Care document, Sections might be represented as Allergies, Problems, Procedures, Lab tests etc. Sections are convenient for human consumption and navigation but should not be used to infer meaning.</p>"},{"location":"intro/INT1-overview-openehr/#entry","title":"Entry","text":"<p>In openEHR, all of key clinical content is carried within one of the 5 ENTRY sub-classes:</p> <ul> <li> <p>Observation</p> </li> <li> <p>Evaluation</p> </li> <li> <p>Instruction</p> </li> <li> <p>Action</p> </li> <li> <p>Admin_entry</p> </li> </ul> <p>The Entry is the container for structured/ coded data via granular <code>clinical statements</code> such as Procedure, Blood pressure, Allergy, within which the leaf data is contained in Elements e.g Systolic, Diastolic, Cuff size.</p> <p>Entries are where most recognisable health and care concepts are modelled. THe sub-classes reflect slightly different generic requirements e.g Instructions and Actions carry extra attributes to facilitate the tracking of requests and orders and the activities that follow, whereas Observations often require more complex handling of time and person state. </p>"},{"location":"intro/INT1-overview-openehr/#cluster-optional","title":"Cluster (optional)","text":"<p>A Cluster is a branch-like sub-structure of an ENTRY which allow ELEMENTS to be conveniently grouped and possibly repeated e.g in a Lab Test archetype, data related to a single lab analysis result is grouped within a Cluster to allow the whole pattern to be repeated</p> <ul> <li> <p>Lab Test</p> </li> <li> <p>Lab Result (Cluster) - multiple</p> <ul> <li> <p>Result</p> </li> <li> <p>Comment</p> </li> </ul> </li> <li> <p>Datetime reported</p> </li> <li> <p>Status</p> </li> </ul> <p>In the construct above the cluster allows multiple Lab results to be captured within a single Lab Test.</p>"},{"location":"intro/INT1-overview-openehr/#element","title":"Element","text":"<p>An Element is the leaf-node construct which is basically a name/value pair with a defined datatype. The nature of the datatype determines the exact structure of the Element.</p>"},{"location":"intro/INT2-overview-rest-apis/","title":"Introduction","text":"<p>Although the basic approach of interacting with openEHR CDRs via a simple service layer has been well established for some time, until recently, each CDR vendor had their own RESTful API, albeit these worked in a very similar fashion.</p> <p>In recent years the CDR implementer community has agreed a common standardised openEHR REST API</p> <p>This has now been implemented by a number of CDR providers, though most continue to make use of their 'proprietary variants' alongside the standard API.</p> <p>This documentation and related technical artefacts will cover the standard openEHR REST API, as well as the equivalent calls to the Better Ehrscape API, which is widely used in the UK, and in particular is supported by the Ripple Ethercis CDR.</p> <p>One significant difference is that Better Ehrscape API allows openEHR records to be submitted via some simplified JSON formats which are very helpful to those new to openEHR. Work is underway to bring this kind of 'simplified JSON' into the openEHR standard space and we also anticipate some other vendors to emulate the Better Ehrscape JSON formats until the standardised simplified format is agreed.</p> <p>To be clear, these simplified formats are used for convenience only, and within the CDR the data is stored and can be retrieved and queried in a completely standard fashion via the openEHR REST API.</p>"},{"location":"intro/INT2-overview-rest-apis/#differences-between-better-ehrscape-and-openehr-rest-apis","title":"Differences between Better Ehrscape and openEHR REST APIs","text":"<p>Conceptually these APIS are very similar with almost identical REST resources.</p> <p>For example the <code>List templates</code> call in Better Ehrscape is </p> <pre><code>curl --location --request GET 'https://cdr.code4health.org/rest/v1/template' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: {{ authToken }}'\n</code></pre> <p>while in the openEHR REST API it is </p> <pre><code>curl --location --request GET 'https://cdr.code4health.org/rest/v1/definition/template/adl1.4' \\\n--header 'Accept: application/json' \\\n--header 'Prefer: return=minimal' \\\n--header 'Authorization: {{ authToken }}'\n</code></pre> <p>The basic message is that if you become familiar with the Better Ehrscape API, jumping to, or intermixing with, the openEHR REST API will not be too difficult.</p>"},{"location":"intro/INT3-archetypes-template/","title":"openEHR archetypes and templates","text":"<p>An openEHR CDR consumes, retrieves and queries patient healthcare data using a standardised open specification and querying format defined by openEHR International. </p> <p>THis provides a way for clinicians to define and share open-source, vendor-neutral clinical information components (<code>archetypes</code> and <code>templates</code>) which can be consumed, persisted and queried by different technology stacks, as long as they adhere to the openEHR specifications. </p> <p>Examples of archetypes used in this project are <code>Procedure</code>, <code>Symptom</code>, and <code>Imaging result</code>. These are managed by the openEHR International using the Clinical Knowledge Manager tool and mirrored to Github, with a CC-BY-SA licence.</p> <p>A repository of archetypes and templates designed for UK use is maintained jointly by the Apperta Foundation at Apperta CKM and is mirrored to a Git repository.</p> <p>These make use of many of the archetypes on the international CKM&lt; but have additional UK-specific archetypes and templates, intended to help harmonise use across the 4 UK countries and Ireland.</p> <p>e.g. the 5N CDR project</p>"},{"location":"intro/INT4-reference-model/","title":"openEHR Reference Model","text":"<p>The openEHR Reference model defines a relatively small set of information model constructs which openEHR back-ends must support. This includes a number of generic classes and datatypes.</p> <p>The Reference model contains virtually no clinical content e.g concepts for Medication, or Diagnosis. These are defined and managed separately as <code>archetypes</code>.</p>"},{"location":"intro/INT4-reference-model/#key-openehr-datatypes","title":"Key openEHR datatypes","text":"<p>openEHR has a very rich set of allowable datatypes. A full definition is beyond the scope of this document but developers new to this field may find the following notes helpful.</p>"},{"location":"intro/INT4-reference-model/#datatype-text","title":"Datatype: text","text":"<p>Allows the recording of simple, unformatted text. openEHR does not normally constrain the length of string.</p> <pre><code>asthma_diary_entry/history:0/story_history/comment: Feeling much better,\n</code></pre>"},{"location":"intro/INT4-reference-model/#datatype-codedtext","title":"Datatype: codedText","text":"<p>Is a commonly used datatype in openEHR systems and is a sub-class of text. i.e where-ever text is specified codedText can be used instead.</p> <p>Codes may be 'external' e.g. SNOMED CT or 'local', where they are defined within archetypes, have the form 'atxxxxx' and are commonly referred to as 'atCodes'</p> <p>A codedText element always includes the terminologyID, the code itself and the text of the coded concept (Rubric). Where a codedText item is required, allowed value(s) are expressed in the form:</p> <pre><code>terminologyId::code::rubric\n\nlocal::at0007::Dental swelling\nSNOMED-CT::123456::No pathology found\n</code></pre> <p>When a codedText item is added to a FLAT JSON format document, you must give the code, value and terminology, unless this is a local (atCode) code, in which case only the code needs to be provided.</p>"},{"location":"intro/INT4-reference-model/#external-terminology-eg-snomed-ct","title":"External terminology e.g SNOMED CT","text":"<p>Code, terminology and value must be specified</p> <pre><code>'asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|code': '23924001',\n'asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|value': 'chest tightness',\n'asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|terminology': 'SNOMED-CT',\n</code></pre>"},{"location":"intro/INT4-reference-model/#local-atcode-eg-at0007","title":"Local 'atCode' e.g at0007","text":"<p>Only the code needs to be specified - the value and terminology are not required since they are pre-defined in the openEHR template..</p> <pre><code>'asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/test_result_name|code': 'at0071'\n</code></pre>"},{"location":"intro/INT4-reference-model/#datatype-ordinal","title":"Datatype: ordinal","text":"<p>Combines codedText with a score, expressed as an integer.</p> <pre><code>0: Green  `local::at0022::Green`\n1: Amber  `local::at0023::Amber`\n2: Red    `local::at0024::Red`\n\n'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|code': 'at0024',\n'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|ordinal': 2,\n'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|value': 'Red',\n</code></pre>"},{"location":"intro/INT4-reference-model/#datatype-count","title":"Datatype: count","text":"<p>count is a simple integer.</p> <pre><code>'community_dental_final_assessment_letter/investigations_and_results:0/imaging_examination_result:0/result_group/decayed_teeth/decayed_teeth': 4,\n</code></pre>"},{"location":"intro/INT4-reference-model/#datatype-datetime","title":"Datatype: datetime","text":"<p>Records a date or date and time using the ISO8061 format.</p> <pre><code>'ctx/time': '2014-09-23T00:11:02.518+02:00'\n</code></pre>"},{"location":"intro/INT4-reference-model/#datatype-quantity","title":"Datatype: quantity","text":"<p>Records a physical quantity along with the appropriate SI units, which should normally be compliant with UCUM.</p> <pre><code>\"asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/actual_result|magnitude\": 550,\n\"asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/actual_result|unit\": \"l/min\",\n</code></pre>"},{"location":"intro/INT4-reference-model/#key-openehr-concepts-and-classes","title":"Key openEHR concepts and classes","text":""},{"location":"intro/INT4-reference-model/#external-identifiers","title":"External identifiers","text":"<p>The subjectId (sometimes called externalId) is a patient identifier by which the patient is known outwith the openEHR system e.g. a hospital identifier or NHS number.</p>"},{"location":"intro/INT4-reference-model/#ehr","title":"EHR","text":"<p>In an openEHR system, each patient has an <code>ehr</code> (a per-patient electronic health record) with a unique <code>ehrId</code> identifier (usually a guid). All references to openEHR patient data are via this ehrId. An API call <code>GET ehr/</code> is used to reference the ehrId from the provided subjectId/externalId.</p> <p>Example ehrId: <code>8fa77360-683c-4989-be5e-89a192624b43</code></p> <p>Other subsequent calls to the openEHR system for that particular patient are via the ehrId.</p>"},{"location":"intro/INT4-reference-model/#composition","title":"COMPOSITION","text":"<p>All openEHR data is committed inside a <code>composition</code>, a document-level container which is given a unique <code>compositionId</code>. If the composition is subsequently updated the root compositionId remain unchanged but its version number is incremented. All previous composition versions are retained for audit/legal purposes.</p> <p>Initial version <code>2cf04d6c-31e8-4599-a14b-9a0add4de5d9::fivium.ehrscape.com::1</code></p> <p>Revised version <code>2cf04d6c-31e8-4599-a14b-9a0add4de5d9::fivium.ehrscape.com::2</code></p> <p>If you need to retrieve a composition, it is normally ok to simply use the root part <code>2cf04d6c-31e8-4599-a14b-9a0add4de5d9</code> which will return the latest revision in the current repository.</p>"},{"location":"intro/INT4-reference-model/#openehr-composition-file-formats","title":"openEHR Composition file formats","text":"<p>In general, committing or retrieving a composition to/from an openEHR system involves sending or receiving a structured XML or JSON file via a simple API.</p> <p>The current standard 'canonical XML' openEHR Composition format is defined by a set of standard schema.</p> <p>More recently, openEHR implementers have started to develop alternative custom JSON formats (usuually with converters to/from the canonical XML format).</p> <p>The Better Ehrscape API,eveloped by Better, provides a simple restful API which hides much of the complexity of the underlying openEHR server accepting simpler, flatter forms of composition data, using defaults within the template schema to correctly populate the raw openEHR data which is stored internally.</p> <p>The <code>FLAT JSON</code> format is just a set of simple name/value pairs where the 'name' carries the path to each element. You do not need to parse this path. You should normally use this FLAT JSON format, which is easier for new openEHR users. e.g.</p> <ul> <li> <p>FLAT JSON format <code>\"community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/clinical_factors|code\":     \"at0025\", \u2026</code></p> </li> <li> <p>STRUCTURED JSON format</p> <pre><code>\u2026\n\"clinical_factors\": [\n {\n \"|code\": \"at0025\",\n \"|terminology\": \"local\",\n \"|value\": \"Teeth with carious lesions\"\n }\n ]\n\u2026\n</code></pre> </li> <li> <p>RAW XML format</p> <pre><code>\u2026\n&lt;ns2:value xsi:type=\"ns2:DV_CODED_TEXT\"&gt;\n&lt;ns2:value&lt;Teeth with carious lesions&lt;/ns2:value&gt;\n&lt;ns2:defining_code&gt;\n&lt;ns2:terminology_id&gt;\n&lt;ns2:value&lt;local&lt;/ns2:value&gt;\n&lt;/ns2:terminology_id&gt;\n&lt;ns2:code_string&lt;at0025&lt;/ns2:code_string&gt;\n&lt;/ns2:defining_code&gt;\n&lt;/ns2:value&gt;\n&lt;/ns2:value&gt; \u2026\n</code></pre> </li> </ul>"},{"location":"intro/INT4-reference-model/#key-openehr-reference-model-attributes","title":"Key openEHR Reference model attributes","text":"<p>A number of key data points need to be populated in an openEHR composition, which may not be apparent from the archetypes or templates. Developers can largely use the example instance documents and APIs for guidance but these notes may give useful background in addition to viewing the UML view of the openEHR reference model.</p>"},{"location":"intro/INT4-reference-model/#committer","title":"committer","text":"<p>This is the name of the person physically committing the document ie. the person logged on to the account. If omitted from API calls, Ehrscape will use the domain login name.</p>"},{"location":"intro/INT4-reference-model/#compositioncomposer","title":"composition/composer","text":"<p>This is the clinical author of the document i.e the person with clinical responsibility. Ehrscape FLAT and STRCTURTED formats handle this as <code>composer_name</code>.</p>"},{"location":"intro/INT4-reference-model/#compositioncontextstart_time","title":"composition/context/start_time","text":"<p>This is the time that the clinical interaction with the patient began. Ehrscape FLAT and STRUCTURED formats handle this as ctx/time.</p>"},{"location":"intro/INT4-reference-model/#compositioncontexthealth_care_facility","title":"composition/context/health_care_facility","text":"<p>This is the healthcare facility / oragnisation under who\u2019s remit the encounter took place.</p>"},{"location":"intro/INT4-reference-model/#observationtime","title":"observation/time","text":"<p>This is the time that a patient\u2019s signs and symptoms were observed or a test was run. It is set automatically by the value of the ctx/time attribute. If you need to set the time of a specific observation you can use</p> <p>The Ehrscape FLAT and STRUCTURED formats hide much of the complexity of these attributes, providing sensible defaults. In particular the <code>ctx</code> header common to both JSON STRUCTURED and FLAT formats, considerably simplifies the composition header \u2026</p> <pre><code>'ctx/composer_name': 'Rebecca Wassall',\n'ctx/health_care_facility|id': '999999-345',\n'ctx/health_care_facility|name': 'Northumbria Community NHS',\n'ctx/id_namespace': 'NHS-UK',\n'ctx/id_scheme': '2.16.840.1.113883.2.1.4.3',\n'ctx/language': 'en',\n'ctx/territory': 'GB',\n'ctx/time': '2014-09-23T00:11:02.518+02:00',\n</code></pre>"},{"location":"intro/INT4-reference-model/#handling-specific-openehr-datatypes","title":"Handling specific openEHR datatypes","text":""},{"location":"intro/INT4-reference-model/#text","title":"text","text":"<p>Text handling is normally straightforward.</p> <p>FLAT + STRUCTURED</p> <pre><code>\"synopsis\": [\n \"Significant dental issues.\"\n ]\n</code></pre>"},{"location":"intro/INT4-reference-model/#codedtext","title":"codedText","text":"<p>For an external terminology, the terminologyId, code and text value must be supplied but in JSON FLAT and STRUCTURED formats only the local 'atcode' needs to be supplied.</p> <p>STRUCTURED JSON format</p> <pre><code> Internal (local) code:\n \"dental_swelling\": [\n {\n \"|code\": \"at0006\",\n }\n ]\n\n External terminology:\n \"symptom_name\": [\n {\n \"|code\": \"102616008\",\n \"|terminology\": \"SNOMED-CT\",\n \"|value\": \"Painful mouth\"\n }\n ]\n</code></pre> <p>FLAT JSON format</p> <pre><code> Internal (local) code:\n\"community_dental_final_assessment_letter/examination_findings:0/physical_examination_findings:0/oral_examination/dental_swelling|code\": \"at0006\"\nExternal terminology:\n\"community_dental_final_assessment_letter/history:0/story_history:0/symptom:0/symptom_name|value\": \"Painful mouth\",\n\"community_dental_final_assessment_letter/history:0/story_history:0/symptom:0/symptom_name|code\": \"102616008\",\n\"community_dental_final_assessment_letter/history:0/story_history:0/symptom:0/symptom_name|terminology\": \"SNOMED-CT\"\n</code></pre>"},{"location":"intro/INT4-reference-model/#ordinal","title":"ordinal","text":"<p>For JSON FLAT and STRUCTURED formats only the local 'atcode' needs to be supplied although the ordinal and text value are also accepted FLAT JSON format</p> <pre><code>\"community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|code\": \"at0024\"\n</code></pre> <p>STRUCTURED format</p> <pre><code> \"caries_risk\": [\n{\n\"|code\": \"at0024\",\n}\n]\n</code></pre> <p>or</p> <pre><code> \"caries_risk\": [\n{\n\"|code\": \"at0024\",\n\"|ordinal\": 2,\n\"|value\": \"Red\"\n}\n]\n</code></pre>"},{"location":"intro/INT4-reference-model/#date","title":"date","text":"<p>Dates need to be persisted in the ISO8061format and should be displayed in CUI format e.g. 12-Nov-1958</p>"},{"location":"intro/INT4-reference-model/#tricky-issues","title":"Tricky issues","text":""},{"location":"intro/INT4-reference-model/#converting-ui-checkboxes-tofrom-codedtext","title":"Converting UI checkboxes to/from codedText","text":"<p>In a number of places, the UI may best be represented as a set of checkboxes, while the underlying data is modelled as codedText.</p> <p>e.g. Symptoms</p> <p>While it may seem more easier and more logical to use a boolean datatype, this is a common pattern in openEHR datasets which are designed to be interoperable and extensible. Experience has shown that expansion of the target valueset and alignment to external terminologies is easier if an enumerated list of codedText is used rather than boolean.</p> <p>In the case of 'Symptom' the rule is \u2026</p> <ul> <li> <p>If the checkbox is ticked, populate the Symptom name with the     SNOMED-CT term</p> </li> <li> <p>If the checkbox is unticked, omit the Symptom name element     completely.</p> </li> </ul> <p>Conversely when loading a persisted dataset, the checkbox should only be checked if the Symptom name element is present and contains SNOMED-CT term 102616008.</p>"},{"location":"intro/INT4-reference-model/#multiple-occurrence-data","title":"Multiple occurrence data","text":"<p>Some aspects of the form e.g Symptoms are handled as multiple occurrences of the same data point in the underlying dataset.</p>"},{"location":"opencdr/OCDR1-authentication/","title":"Getting started - Authentication","text":"<p>Let's get started by hooking up to an openCDR via the openEHR REST API. </p> <p>This API is now supported by most publicly available CDRs, including Better, DIPS, Code24 and Ehrbase.</p> <p>We have included examples for the Better CDR used by the Apperta Code4Health platform but they have also been tested against the ehrBase CDR.</p>"},{"location":"opencdr/OCDR1-authentication/#authentication","title":"Authentication","text":"<p>All of the openCDR API calls require some sort of authentication in the header. </p> <p>In production this is likely to be something like <code>JSON Web Tokens</code> (JWT) but for demo purposes both ehrBase and betterCDR support <code>Basic Auth</code> based on a Username and Password.</p>"},{"location":"opencdr/OCDR1-authentication/#basic-authentication","title":"Basic Authentication","text":"<p>If you have a Postman environment file related to your openCDR, you should be able to find the Username and Password, and possibly the Basic Auth token, pre-calculated.</p> <p>If it is not pre-calculated, it is easy to do so with code like this Typescript.</p> <pre><code> const authString = btoa(`${username}:${password}`)\nconst authToken = `Basic: ${authString}`\n</code></pre> <p>You then need to send that token in the Authorization header of your REST call e.g. </p> <pre><code>curl --location \\\n--request GET 'https://rest.ehrscape.com/rest/openehr/v1/definition/template/adl1.4' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n</code></pre>"},{"location":"opencdr/OCDR1-authentication/#connecting-to-the-cdr","title":"Connecting to the CDR","text":"<p>To test our basic connection to the CDR, we will perform a very simple <code>List templates</code> call to list the openEHR templates currently registered with the CDR -&gt; Working with openEHR Templates</p>"},{"location":"opencdr/OCDR2-openehr-templates/","title":"Working with openEHR Templates","text":"<p>openEHR templates are aggregations of logical archetype models that along with the basic Reference model, act as the validation schema for any patient data submitted to the CDR.</p> <p>This section will test our connection the CDR by running a <code>List templates</code> call, then upload a new template to the CDR via an <code>Upload a template</code> call</p>"},{"location":"opencdr/OCDR2-openehr-templates/#a-list-templates","title":"A. List templates","text":"cURLNodeJS/AxiosPython/requests <pre><code>    curl --locations --request GET 'https://rest.ehrscape.com/rest/openehr/v1/definition/template/adl1.4' \\\n--header 'Accept: application/json' \\\n--header 'Prefer: return=minimal' \\\n--header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n</code></pre> <pre><code>var axios = require('axios');\nvar config = {\nmethod: 'get',\nurl: 'https://rest.ehrscape.com/rest/openehr/v1/definition/template/adl1.4',\nheaders: { 'Accept': 'application/json', 'Prefer': 'return=minimal', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>  import requests\nurl = \"https://rest.ehrscape.com/rest/openehr/v1/definition/template/adl1.4\"\npayload = {}\nheaders = {\n'Accept': 'application/json',\n'Prefer': 'return=minimal',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"opencdr/OCDR2-openehr-templates/#response","title":"Response","text":"<p>If your CDR is already provisioned with some templates, you will a 200 code and some output like this.</p> <pre><code>[\n{\n\"concept\": \"IDCR - Vital Signs Encounter.v1\",\n\"template_id\": \"IDCR - Vital Signs Encounter.v1\",\n\"archetype_id\": \"openEHR-EHR-COMPOSITION.encounter.v1\",\n\"created_timestamp\": \"2020-06-26T17:03:11.518Z\"\n},\n{\n\"concept\": \"DENWIS_Observations\",\n\"template_id\": \"DENWIS_Observations\",\n\"archetype_id\": \"openEHR-EHR-COMPOSITION.encounter.v1\",\n\"created_timestamp\": \"2020-06-29T11:26:33.055Z\"\n},\n{\n\"concept\": \"Suspected Covid-19 Assessment.v0.1\",\n\"template_id\": \"Suspected Covid-19 Assessment.v0.1\",\n\"archetype_id\": \"openEHR-EHR-COMPOSITION.encounter.v1\",\n\"created_timestamp\": \"2020-07-06T14:24:33.974Z\"\n}\n]\n</code></pre> <p>otherwise you should get a 200 code and an empty array.</p> <p>If you get some other error, this is likely to be that you have not set the baseURL correctly, or that the Authorization token is incorrect.</p>"},{"location":"opencdr/OCDR2-openehr-templates/#b-upload-a-new-template","title":"B. Upload a new template","text":"<p>You will find an example 'operational' template here in the templates folder. This example is for a simple data-entry dataset to allow patients to record how they are feeling, and then share this with their care team.</p> <p>Don't worry for now about the format of the file itself. It follows the Archetype Object Model (1.4) but is always generated automatically by tools such as the openEHR Archetype Designer. </p> cURLNodeJS axiosPython/requests <pre><code>curl --location --request POST 'https://rest.ehrscape.com/rest/openehr/v1/definition/template/adl1.4' \\\n--header 'Accept: application/xml' \\\n--header 'Content-Type: application/xml' \\\n--header 'Prefer: return=minimal' \\\n--header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==' \\\n--data-raw '&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\n&lt;template xmlns=\"http://schemas.openehr.org/v1\"&gt;\n    &lt;language&gt;\n        &lt;terminology_id&gt;\n            &lt;value&gt;ISO_639-1&lt;/value&gt;\n        &lt;/terminology_id&gt;\n        &lt;code_string&gt;en&lt;/code_string&gt;\n    &lt;/language&gt;\n    &lt;description&gt;\n  .... // Snipped for brevity //\n&lt;/template&gt;\n'\n</code></pre> <pre><code>var axios = require('axios');\nvar data = '&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\\n&lt;template xmlns=\"http://schemas.openehr.org/v1\"&gt;\\n    &lt;language&gt;\\n        &lt;terminology_id&gt;\\n            &lt;value&gt;ISO_639-1&lt;/value&gt;\\n        &lt;/terminology_id&gt;\\n        &lt;code_string&gt;en&lt;/code_string&gt;\\n    &lt;/language&gt;\\n    &lt;description&gt;\\n        &lt;original_author id=\"name\"&gt;Ian McNicoll&lt;/original_author&gt;\\n        &lt;original_author id=\"organisation\"&gt;freshEHR Clinical Informatics Ltd.&lt;/original_author&gt;\\n        &lt;original_author id=\"email\"&gt;ian@freshehr.com&lt;/original_author&gt;\\n        &lt;original_author id=\"date\"&gt;2020-02-27&lt;/original_author&gt;\\n        &lt;lifecycle_state&gt;release_candidate&lt;/lifecycle_state&gt;\\n        &lt;other_details id=\"licence&gt; TRIMMED for Brevity...... &lt;/template&gt;\\n';\nvar config = {\nmethod: 'post',\nurl: 'https://rest.ehrscape.com/rest/openehr/v1/definition/template/adl1.4',\nheaders: { 'Accept': 'application/json', 'Content-Type': 'application/xml', 'PREFER': 'return=minimal', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n},\ndata : data\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>    import requests\nurl = \"{{ no such element: dict object['openehrBaseUrl'] }}/definition/template/adl1.4\"\npayload = \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?&gt;\\n&lt;!--Operational template XML automatically generated by Ocean Template Designer Version 2.8.94Beta--&gt;\\n&lt;template xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns=\\\"http://schemas.openehr.org/v1\\\"&gt;\\n  &lt;language&gt;\\n    &lt;terminology_id&gt;\\n      &lt;value&gt;ISO_639-1&lt;/value&gt;\\n    &lt;/terminology_id&gt;\\n    &lt;code_string&gt;en&lt;/code_string&gt;\\n  &lt;/language&gt;\\n  &lt;description&gt;\\n    &lt;original_author id=\\\"Original Author\\\"&gt;Not Specified&lt;/original_author&gt;\\n    &lt;lifecycle_state&gt;Initial&lt;/lifecycle_state&gt;\\n    &lt;other_details id=\\\"MetaDataSet:Sample Set \\\"&gt;Template metadata sample set &lt;/other_details&gt;\\n    &lt;other_details id=\\\"Acknowledgements\\\"&gt;&lt;/other_details&gt;\\n    &lt;other_details id=\\\"Business Process Level\\\"&gt;&lt;/other_details&gt;\\n    &lt;other_details id=\\\"Care setting\\\"&gt;&lt;/other_details&gt;\\n    &lt;other_details id=\\\"Client group\\\"&gt;&lt;/other_details&gt;\\n    &lt;other_details id=\\\"Clinical Record Element\\\"&gt;&lt;/other_details&gt;\\n    &lt;other_details id=\\\"Copyright\\\"&gt;&lt;/other_details&gt;\\n    &lt;other_details id=\\\"Issues\\\"&gt;&lt;/other_details&gt;\\n    &lt;other_details id=\\\"Owner\\\"&gt;&lt;/other_details&gt;\\n    &lt;other_details id=\\\"Sign off\\\"&gt;&lt;/other_details&gt;\\n    &lt;other_details id=\\\"Speciality\\\"&gt;&lt;/other_details&gt;\\n ... Snipped for brevity ... \\n&lt;/template&gt;\"\nheaders = {\n'Accept': 'application/xml',\n'Content-Type': 'application/xml',\n'PREFER': 'return=minimal',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==',\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"opencdr/OCDR2-openehr-templates/#response_1","title":"Response","text":"<p>Currently the response for a successful upload is a little inconsistent between CDRs.</p> <ol> <li> <p>ehrBase will give a 204 no response code but the upload has been successful.</p> </li> <li> <p>BetterCDR will give a 201 response code.</p> </li> </ol>"},{"location":"opencdr/OCDR2-openehr-templates/#overwriting-an-existing-template","title":"Overwriting an existing template","text":"<p>The current REST specification prohibits overwriting an existing template - issuing a <code>409 conflict</code> code and while this makes sense for deployments it has proven to be over-restrictive during early development where a template may change repeatedly.</p> <ol> <li> <p>BetterCDR allows templates to be over-written and simply returns a <code>201</code> code.</p> </li> <li> <p>ehrBase prohibits template over-writing by default but does allow a server configuration to be set which loosens this restriction.</p> </li> </ol>"},{"location":"opencdr/OCDR2-openehr-templates/#more-on-templates","title":"More on templates","text":"<p>As well as being used to validate patient records when they are committed to the CDR, templates are used as the basis for many other types of technical artefact, such as automatic forms builders, class library generation, and for client-side validation in UI.</p> <p>Although formally aligned with the in-memory AOM, the operational template can be hard to parse and understand, particularly if you are just trying to understand the various schema constraints.</p> <p>For this purpose, you may find it helpful to gnerate a 'Web template' - this is a much simpler JSON format, itself based on the operational template, and which can be exported from the openEHR Archetype Designer via the Export menu.</p> <p>Now that we have a valid template uploaded, we can Commit a Composition of patient data to the CDR.</p>"},{"location":"opencdr/OCDR3-committing-a-composition/","title":"Committing Observation data","text":"<p>All data committed to an openEHR CDR is done so via a POST /composition call - as a JSON or XML 'blob'. </p> <p>As it is committed, the data will be validated against both the appropriate openEHR template and the underlying Reference model schema.</p> <p>If the data is valid, it will be stored in the CDR and is allocated a unique ID, which is returned by the POST /composition call</p> <p>This section will submit an example Composition to the CDR by running a <code>POST / composition</code> call.</p> <p>A number of data serialisation options, can be used. In this case we will use the Better <code>STRUCTURED JSON</code> format, as it is somewhat easier to use than the current openEHR <code>CANONICAL JSON or XML</code> formats.</p> <p>Note</p> <p>Note that this example uses the Better <code>Better Ehrscape API</code> which has a slightly different base URL and parameters than the <code>openEHR REST API</code>,though the data is stored identically and can be accessed from both end points.</p>"},{"location":"opencdr/OCDR3-committing-a-composition/#ehrscape-post-composition-example","title":"Ehrscape POST /composition example","text":""},{"location":"opencdr/OCDR3-committing-a-composition/#parameters","title":"Parameters","text":"<p><code>ehrId</code>: </p> <p>This is is the internal CDR identifier for a specific patient. When a patient is registered with the CDR,an EHR object is created with a unique <code>ehr_id</code> identifier, and is associated with an external <code>subjectId</code> and subjectNamespace e.g an NHS Number, CHI number, or a local hospital number.</p> <p>We will find out how to work out the correct ehrId for a patient in the next section.</p> <p>Generally when you first open a patient record session, you will retrieve their <code>ehrId</code> via their <code>subjectID</code> and <code>subjectNamespace</code>. We will explain how to do that in the next section.</p> <p>For testing purposes, you should use a known <code>ehrId</code>. If you have a Postman environment file, an example will be in there, otherwise you can find out how to identify valid ehrIds here</p> <p><code>templateId</code>: </p> <p>This is the identifier of the openEHR template, against which you need to validate the composition. Use <code>DHI - Urology_PROMs-v0</code> for this example.  </p> <p><code>format</code>: </p> <p>This defines the format of JSON or XML that you are sending. Use <code>FLAT</code> for this example.</p>"},{"location":"opencdr/OCDR3-committing-a-composition/#a-commit-an-openehr-composition-flat-json","title":"A. Commit an openEHR Composition (<code>FLAT JSON</code>)","text":"cURL <pre><code>    curl --location --request POST '{{ ehrscapeBaseUrl }}/composition?ehrId={{ ehrId }}&amp;templateId={{ templateId }}&amp;format=STRUCTURED' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: {{ auth_token }}' \\\n--data-raw '{\n    \"{\n      \"passport_observations/context/start_time\": \"2020-10-18T16:16:21.449Z\",\n      \"passport_observations/context/setting|code\": \"238\",\n      \"passport_observations/context/setting|value\": \"other care\",\n      \"passport_observations/context/setting|terminology\": \"openehr\",\n      \"passport_observations/blood_pressure/systolic|magnitude\": 169.0,\n      \"passport_observations/blood_pressure/systolic|unit\": \"mm[Hg]\",\n      \"passport_observations/blood_pressure/diastolic|magnitude\": 692.0,\n      \"passport_observations/blood_pressure/diastolic|unit\": \"mm[Hg]\",\n      \"passport_observations/blood_pressure/time\": \"2020-10-18T16:16:21.452Z\",\n      \"passport_observations/blood_pressure/language|code\": \"en\",\n      \"passport_observations/blood_pressure/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/blood_pressure/encoding|code\": \"UTF-8\",\n      \"passport_observations/blood_pressure/encoding|terminology\": \"IANA_character-sets\",\n      \"passport_observations/height_length/height_length|magnitude\": 609.33,\n      \"passport_observations/height_length/height_length|unit\": \"cm\",\n      \"passport_observations/height_length/time\": \"2020-10-18T16:16:21.453Z\",\n      \"passport_observations/height_length/language|code\": \"en\",\n      \"passport_observations/height_length/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/height_length/encoding|code\": \"UTF-8\",\n      \"passport_observations/height_length/encoding|terminology\": \"IANA_character-sets\",\n      \"passport_observations/body_weight/weight|magnitude\": 380.49,\n      \"passport_observations/body_weight/weight|unit\": \"kg\",\n      \"passport_observations/body_weight/time\": \"2020-10-18T16:16:21.453Z\",\n      \"passport_observations/body_weight/language|code\": \"en\",\n      \"passport_observations/body_weight/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/body_weight/encoding|code\": \"UTF-8\",\n      \"passport_observations/body_weight/encoding|terminology\": \"IANA_character-sets\",\n      \"passport_observations/blood_glucose/test_name|code\": \"14743-9\",\n      \"passport_observations/blood_glucose/test_name|value\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n      \"passport_observations/blood_glucose/test_name|terminology\": \"LOINC\",\n      \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|code\": \"14743-9\",\n      \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|value\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n      \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|terminology\": \"LOINC\",\n      \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_result|magnitude\": 52.61,\n      \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_result|unit\": \"mmol/L\",\n      \"passport_observations/blood_glucose/time\": \"2020-10-18T16:16:21.453Z\",\n      \"passport_observations/blood_glucose/language|code\": \"en\",\n      \"passport_observations/blood_glucose/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/blood_glucose/encoding|code\": \"UTF-8\",\n      \"passport_observations/blood_glucose/encoding|terminology\": \"IANA_character-sets\",\n      \"passport_observations/pulse_oximetry/spo|numerator\": 0.0,\n      \"passport_observations/pulse_oximetry/spo|denominator\": 100.0,\n      \"passport_observations/pulse_oximetry/spo|type\": 2,\n      \"passport_observations/pulse_oximetry/spo\": 0.0,\n      \"passport_observations/pulse_oximetry/time\": \"2020-10-18T16:16:21.455Z\",\n      \"passport_observations/pulse_oximetry/language|code\": \"en\",\n      \"passport_observations/pulse_oximetry/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/pulse_oximetry/encoding|code\": \"UTF-8\",\n      \"passport_observations/pulse_oximetry/encoding|terminology\": \"IANA_character-sets\",\n      \"passport_observations/body_temperature/temperature|magnitude\": 72.7,\n      \"passport_observations/body_temperature/temperature|unit\": \"[degF]\",\n      \"passport_observations/body_temperature/time\": \"2020-10-18T16:16:21.455Z\",\n      \"passport_observations/body_temperature/language|code\": \"en\",\n      \"passport_observations/body_temperature/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/body_temperature/encoding|code\": \"UTF-8\",\n      \"passport_observations/body_temperature/encoding|terminology\": \"IANA_character-sets\",\n      \"passport_observations/clinical_synopsis/notes\": \"Notes 9\",\n      \"passport_observations/clinical_synopsis/language|code\": \"en\",\n      \"passport_observations/clinical_synopsis/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/clinical_synopsis/encoding|code\": \"UTF-8\",\n      \"passport_observations/clinical_synopsis/encoding|terminology\": \"IANA_character-sets\",\n      \"passport_observations/category|code\": \"433\",\n      \"passport_observations/category|value\": \"event\",\n      \"passport_observations/category|terminology\": \"openehr\",\n      \"passport_observations/language|code\": \"en\",\n      \"passport_observations/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/territory|code\": \"JM\",\n      \"passport_observations/territory|terminology\": \"ISO_3166-1\"\n  }'\n</code></pre> NodeJS + Axios <p>```js</p> <pre><code>var axios = require('axios');\n\nvar data = JSON.stringify({\"prostate_cancer_proms_report\": // trimmed for brevity}\");\n\nvar config = {\n  method: 'post',\n  url: '{{ ehrscapeBaseUrl }}/composition?ehrId={{ ehrId }}&amp;templateId={{ templateId }}&amp;format=STRUCTURED',\n  headers: { \n    'Content-Type': 'application/json', \n    'Authorization': '{{ authToken }}'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n</code></pre> <p>```</p>"},{"location":"opencdr/OCDR3-committing-a-composition/#response-for-post-composition","title":"Response for POST /composition","text":"<pre><code>{\n\"meta\": {\n\"href\": \"https://cdr.code4health.org/rest/v1/composition/59e8f5a2-6fb6-47d5-9acd-ae6309d0f1dd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::1\"\n},\n\"action\": \"CREATE\",\n\"compositionUid\": \"59e8f5a2-6fb6-47d5-9acd-ae6309d0f1dd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::1\"\n}\n</code></pre>"},{"location":"opencdr/OCDR3-committing-a-composition/#the-composition-id","title":"The <code>Composition Id</code>","text":"<p>The compositionUid is the unique identifier allocated to (and held within) every composition by the CDR.</p> <p>You will see that it ends in <code>...::1</code>. The <code>1</code> is the version of this composition instance. If you need to update the instance (perhaps because of an error), you need to do so via a PUT / composition call and if successful the composition version number will clock up to <code>::2</code>.</p> <p>In essence every commit is versioned and retained for medico-legal reasons. </p> <p>Similarly when a composition is deleted, this is a logical delete and the composition can always be retrieved, though is not normally accessible via querying.</p> <p>We will go through the process of updating a composition later.</p> <p>For now let's just retrieve the composition we just committed, via the GET /composition call.</p>"},{"location":"opencdr/OCDR4-retrieving-a-composition/","title":"Retrieving an openEHR Composition","text":"<p>All data committed to an openEHR CDR is done so via a POST or PUT /composition call - as a JSON or XML 'blob'. </p> <p>This section will cover how to retrieve a previously stored Composition by running a <code>GET / composition</code> call.</p> <p>A number of data serialisation options, can be used on retrieval. In this case we will ask for the Better <code>FLAT JSON</code> format, as this is what we used when committing the composition, but you can commit and retrieve using different formats if you wish.</p>"},{"location":"opencdr/OCDR4-retrieving-a-composition/#better-ehrscape-get-composition-example","title":"Better Ehrscape GET /composition example","text":""},{"location":"opencdr/OCDR4-retrieving-a-composition/#parameters","title":"Parameters","text":"<p><code>compositionId</code>: </p> <p>This is is the composition UID for the composition you wish to retrieve. Don't worry about how we find that out for now. Just use the UID for the composition you just committed in the last section. </p> <p>We will find out how to find compositionIds in a subsequent section.</p> <p><code>format</code>:</p> <p>This defines the format of JSON or XML that you are requesting. Use <code>FLAT</code> for this example.</p>"},{"location":"opencdr/OCDR4-retrieving-a-composition/#a-retrieve-an-openehr-composition-flat-json","title":"A. Retrieve an openEHR Composition (<code>FLAT JSON</code>)","text":"cURL <p><code>bash       curl --location --request GET '{{ ehrscapeBaseUrl }}/composition/{{ compositionId }}?format=FLAT' \\ --header 'Content-Type: application/json' \\ --header 'Authorization: {{ authToken }}'</code></p> NodeJS + Axios <p>```js</p> <pre><code>var axios = require('axios');\n</code></pre> <p>var config = {   method: 'get',   url: '{{ ehrscapeBaseUrl }}/composition/{{ compositionId }}?format=STRUCTURED',   headers: {      'Content-Type': 'application/json',      'Authorization': '{{ authToken }}'   } };</p> <p>axios(config) .then(function (response) {   console.log(JSON.stringify(response.data)); }) .catch(function (error) {   console.log(error); });</p> <p><pre><code>### Response for GET /composition\n\nIf the composition is found a `200` code will be returned along with the composition object , which you will note now includes the uid, but should otherwise be identical to that which you previously submitted.\n\n```json\n{\n    \"meta\": {\n        \"href\": \"https://cdr.code4health.org/rest/v1/composition/7b20dc2b-6494-467d-8986-469367f7c75b::4cce5a07-be4d-4318-a94f-3b8401853a20::1\"\n    },\n    \"compositionUid\": \"7b20dc2b-6494-467d-8986-469367f7c75b::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n    \"format\": \"FLAT\",\n    \"templateId\": \"JMOHW - Passport observations.v0\",\n    \"composition\": {\n        \"passport_observations/_uid\": \"7b20dc2b-6494-467d-8986-469367f7c75b::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n        \"passport_observations/language|code\": \"en\",\n        \"passport_observations/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/territory|code\": \"JM\",\n        \"passport_observations/territory|terminology\": \"ISO_3166-1\",\n        \"passport_observations/context/start_time\": \"2020-10-18T16:16:21.449Z\",\n        \"passport_observations/context/setting|code\": \"238\",\n        \"passport_observations/context/setting|value\": \"other care\",\n        \"passport_observations/context/setting|terminology\": \"openehr\",\n        \"passport_observations/blood_pressure/systolic|magnitude\": 169.0,\n        \"passport_observations/blood_pressure/systolic|unit\": \"mm[Hg]\",\n        \"passport_observations/blood_pressure/diastolic|magnitude\": 692.0,\n        \"passport_observations/blood_pressure/diastolic|unit\": \"mm[Hg]\",\n        \"passport_observations/blood_pressure/time\": \"2020-10-18T16:16:21.452Z\",\n        \"passport_observations/blood_pressure/language|code\": \"en\",\n        \"passport_observations/blood_pressure/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/blood_pressure/encoding|code\": \"UTF-8\",\n        \"passport_observations/blood_pressure/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/height_length/height_length|magnitude\": 609.33,\n        \"passport_observations/height_length/height_length|unit\": \"cm\",\n        \"passport_observations/height_length/time\": \"2020-10-18T16:16:21.453Z\",\n        \"passport_observations/height_length/language|code\": \"en\",\n        \"passport_observations/height_length/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/height_length/encoding|code\": \"UTF-8\",\n        \"passport_observations/height_length/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/body_weight/weight|magnitude\": 380.49,\n        \"passport_observations/body_weight/weight|unit\": \"kg\",\n        \"passport_observations/body_weight/time\": \"2020-10-18T16:16:21.453Z\",\n        \"passport_observations/body_weight/language|code\": \"en\",\n        \"passport_observations/body_weight/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/body_weight/encoding|code\": \"UTF-8\",\n        \"passport_observations/body_weight/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/blood_glucose/test_name|code\": \"14743-9\",\n        \"passport_observations/blood_glucose/test_name|value\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n        \"passport_observations/blood_glucose/test_name|terminology\": \"LOINC\",\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|code\": \"14743-9\",\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|value\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|terminology\": \"LOINC\",\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_result|magnitude\": 52.61,\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_result|unit\": \"mmol/L\",\n        \"passport_observations/blood_glucose/time\": \"2020-10-18T16:16:21.453Z\",\n        \"passport_observations/blood_glucose/language|code\": \"en\",\n        \"passport_observations/blood_glucose/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/blood_glucose/encoding|code\": \"UTF-8\",\n        \"passport_observations/blood_glucose/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/pulse_oximetry/spo|numerator\": 0.0,\n        \"passport_observations/pulse_oximetry/spo|denominator\": 100.0,\n        \"passport_observations/pulse_oximetry/spo|type\": 2,\n        \"passport_observations/pulse_oximetry/spo\": 0.0,\n        \"passport_observations/pulse_oximetry/time\": \"2020-10-18T16:16:21.455Z\",\n        \"passport_observations/pulse_oximetry/language|code\": \"en\",\n        \"passport_observations/pulse_oximetry/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/pulse_oximetry/encoding|code\": \"UTF-8\",\n        \"passport_observations/pulse_oximetry/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/body_temperature/temperature|magnitude\": 72.7,\n        \"passport_observations/body_temperature/temperature|unit\": \"[degF]\",\n        \"passport_observations/body_temperature/time\": \"2020-10-18T16:16:21.455Z\",\n        \"passport_observations/body_temperature/language|code\": \"en\",\n        \"passport_observations/body_temperature/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/body_temperature/encoding|code\": \"UTF-8\",\n        \"passport_observations/body_temperature/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/clinical_synopsis/notes\": \"Notes 9\",\n        \"passport_observations/clinical_synopsis/language|code\": \"en\",\n        \"passport_observations/clinical_synopsis/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/clinical_synopsis/encoding|code\": \"UTF-8\",\n        \"passport_observations/clinical_synopsis/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/category|code\": \"433\",\n        \"passport_observations/category|value\": \"event\",\n        \"passport_observations/category|terminology\": \"openehr\",\n        \"passport_observations/composer|name\": \"moh-jamaica_4cce5a07-be4d-4318-a94f-3b8401853a20\"\n    },\n    \"deleted\": false,\n    \"lastVersion\": true,\n    \"ehrId\": \"b4a4577f-7496-4053-ae60-45e22cfc9952\",\n    \"lifecycleState\": \"COMPLETE\"\n}```\n\n#### Other data formats\n\nThe Better Ehrscape API offers several other serialisation formats. You can have a look at these by simply changing the `format` parameter on the `GET / composition` call, and the call Header `Accept` to switch between JSON and XML.\n\n##### 'FLAT JSON'\n\nThis uses the same path-shortening mechanism as structured JSON but flattens all of the tree structure to a set of name-value pairs. Some developers prefer this to the STRUCTURED format.\n</code></pre> format=FLAT Accept : `application/json'</p> <p><pre><code>##### 'RAW JSON'\n\nThis is very similar to, but not identical to the openEHR Canonical JSON format, which essentially supercedes it. It very closely adheres tothe openEHR Reference model specification but is pretty voluminous\n</code></pre> format=RAW Accept : <code>application/json' <pre><code>##### 'RAW XML'\n\nThis is 'canonical' openEHR XML which is also accepted by the openEHR REST  API. It is the lingu-franca for all openEHR CDRs, even thosewhich do not support the REST CDR API, will normally accept and expose data in this XML format. \n</code></pre> format=RAW Accept :</code>application/xml' ```</p>"},{"location":"opencdr/OCDR5-creating-an-ehr/","title":"Creating a new patient 'EHR'","text":"<p>When a patient is registered with an openCDR, a '<code>subjectId</code> (normally a real-word identifier like an National identifier e.g. NHS number, CHI number in the UK) or hospital MRI) is submitted by a <code>POST /ehr | create EHR</code>  call.  A top-level openEHR <code>EHR</code> object is then created in the CDR along with a unique internal <code>ehrId</code> identifier for that patient.</p> <p>Depending on your local governance environment, you may/ may not be allowed to create new <code>EHRs</code>.</p>"},{"location":"opencdr/OCDR5-creating-an-ehr/#opencdr-post-ehr-create-an-ehr-from-subjectidsubjectnamespace-example","title":"openCDR <code>POST /ehr - Create an EHR from SubjectId/subjectNamespace</code> example","text":""},{"location":"opencdr/OCDR5-creating-an-ehr/#parameters","title":"Parameters","text":""},{"location":"opencdr/OCDR5-creating-an-ehr/#subjectid","title":"<code>subjectId</code>","text":"<p>This is the external identifier by which the patient is known within the CDR. It is normally a real-word identifier like an NHS number, CHI number or Hospital 'MRI' number, and will have been supplied to the CDR when the patients' <code>EHR</code> object was created in the datastore.</p> <p>Example value : <code>9999999000</code></p>"},{"location":"opencdr/OCDR5-creating-an-ehr/#subjectnamespace","title":"<code>subjectNamespace</code>","text":"<p>This is just a unique string used to identify the numbering scheme used for the 'subjectId'. It will commonly be some sort of URI such as <code>uk.nhs.nhs_number</code> and will have been agreed at national level.</p> <p>Example value : <code>uk.nhs.nhs_number</code></p> PostmancURLNodeJs - AxiosPython/requests <p></p> <pre><code>    curl --location \\\n--request GET 'https://cdr.code4health.org/rest/v1/ehr/?subjectId=9999999000&amp;subjectNamespace=uk.nhs.nhs_number' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n</code></pre> <pre><code>  var axios = require('axios');\nvar config = {\nmethod: 'get',\nurl: 'https://cdr.code4health.org/rest/v1/ehr/?subjectId=9999999000&amp;subjectNamespace=uk.nhs.nhs_number',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"https://cdr.code4health.org/rest/v1/ehr/?subjectId=9999999000&amp;subjectNamespace=uk.nhs.nhs_number\"\npayload = {}\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==',\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"opencdr/OCDR5-creating-an-ehr/#response","title":"Response","text":"<p>Better CDR will give a <code>200</code> response code and this structure.</p> <pre><code>{\n\"meta\": {\n\"href\": \"https://cdr.code4health.org/rest/v1/ehr/3e674739-950c-4b8a-976b-5aef21c618c5\"\n},\n\"ehrStatus\": {\n\"subjectId\": \"9999999000\",\n\"subjectNamespace\": \"uk.nhs.nhs_number\",\n\"queryable\": true,\n\"modifiable\": true,\n\"otherDetails\": {\n\"@class\": \"ITEM_TREE\",\n\"items\": [\n{\n\"@class\": \"CLUSTER\",\n\"archetype_details\": {\n\"@class\": \"ARCHETYPED\",\n\"archetype_id\": {\n\"@class\": \"ARCHETYPE_ID\",\n\"value\": \"openEHR-EHR-CLUSTER.person_anonymised_parent.v1\"\n},\n\"rm_version\": \"1.0.1\"\n},\n\"archetype_node_id\": \"openEHR-EHR-CLUSTER.person_anonymised_parent.v1\",\n\"items\": [\n{\n\"@class\": \"ELEMENT\",\n\"name\": {\n\"@class\": \"DV_TEXT\",\n\"value\": \"Administrative Gender\"\n},\n\"archetype_node_id\": \"at0001\",\n\"value\": {\n\"@class\": \"DV_CODED_TEXT\",\n\"value\": \"Male\",\n\"defining_code\": {\n\"@class\": \"CODE_PHRASE\",\n\"terminology_id\": {\n\"@class\": \"TERMINOLOGY_ID\",\n\"value\": \"local\"\n},\n\"code_string\": \"at0009\"\n}\n}\n},\n{\n\"@class\": \"ELEMENT\",\n\"name\": {\n\"@class\": \"DV_TEXT\",\n\"value\": \"Birth Sex\"\n},\n\"archetype_node_id\": \"at0002\",\n\"value\": {\n\"@class\": \"DV_CODED_TEXT\",\n\"value\": \"Male\",\n\"defining_code\": {\n\"@class\": \"CODE_PHRASE\",\n\"terminology_id\": {\n\"@class\": \"TERMINOLOGY_ID\",\n\"value\": \"local\"\n},\n\"code_string\": \"at0009\"\n}\n}\n},\n{\n\"@class\": \"ELEMENT\",\n\"name\": {\n\"@class\": \"DV_TEXT\",\n\"value\": \"Vital Status\"\n},\n\"archetype_node_id\": \"at0003\",\n\"value\": {\n\"@class\": \"DV_CODED_TEXT\",\n\"value\": \"Alive\",\n\"defining_code\": {\n\"@class\": \"CODE_PHRASE\",\n\"terminology_id\": {\n\"@class\": \"TERMINOLOGY_ID\",\n\"value\": \"local\"\n},\n\"code_string\": \"at0004\"\n}\n}\n},\n{\n\"@class\": \"ELEMENT\",\n\"name\": {\n\"@class\": \"DV_TEXT\",\n\"value\": \"Birth Year\"\n},\n\"archetype_node_id\": \"at0014\",\n\"value\": {\n\"@class\": \"DV_DATE\",\n\"value\": \"1944\"\n}\n}\n]\n}\n]\n}\n},\n\"ehrId\": \"3e674739-950c-4b8a-976b-5aef21c618c5\"\n}\n</code></pre> <p>The only datapoint you need to retrieve is <code>ehrId</code>. </p> <p>Hint</p> <p>You may want to consider caching this for the session, so that it can be used for a number of subsequent calls.</p>"},{"location":"opencdr/OCDR6-retrieving-an-ehrid/","title":"Retrieving the patient's ehrId","text":"<p>When a patient is registered with an openCDR, a '<code>subjectId</code> (normally a real-word identifier like an National identifier e.g. NHS number, CHI number in the UK) or hospital MRI) is submitted by a <code>POST /ehr | create EHR from SubjectId</code>  call.  </p> <p>A top-level openEHR <code>EHR</code> object is then created in the CDR along with a unique internal <code>ehrId</code> identifier for that patient.</p> <p>Most openCDR API calls require an 'ehrId' to identify the correct patient, so normally the first activity required if interacting with a patient record is to retrieve their <code>ehrId</code>, and then often to cache that identifier so it can be used for subsequent calls, until a new patient is being accessed.</p>"},{"location":"opencdr/OCDR6-retrieving-an-ehrid/#get-ehr-retrieve-ehr-from-subjectidsubjectnamespace","title":"<code>GET /ehr - retrieve ehr from subjectId/subjectNamespace</code>","text":""},{"location":"opencdr/OCDR6-retrieving-an-ehrid/#parameters","title":"Parameters","text":""},{"location":"opencdr/OCDR6-retrieving-an-ehrid/#subjectid","title":"<code>subjectId</code>","text":"<p>This is the external identifier by which the patient is known within the CDR. It is normally a real-word identifier like an NHS number, CHI number or Hospital 'MRI' number, and will have been supplied to the CDR when the patients' <code>EHR</code> object was created in the datastore.</p> <p>Example value : <code>9999999000</code></p>"},{"location":"opencdr/OCDR6-retrieving-an-ehrid/#subjectnamespace","title":"<code>subjectNamespace</code>","text":"<p>This is just a unique string used to identify the numbering scheme used for the <code>subjectId</code>. It will commonly be some sort of URI such as <code>uk_nhs_nhs_number</code> and will have been agreed at national level.</p> <p>Example value : <code>uk_nhs_nhs_number</code></p> PostmancURLNodeJs - AxiosPython/requests <p></p> <pre><code>    --curl location \\\n--request GET '/ehr/?subjectId=https://rest.ehrscape.com/rest/openehr/v19999999000&amp;subjectNamespace=uk.nhs.nhs_number' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n--header 'PREFER: return=minimal' \\\n</code></pre> <pre><code>    var axios = require('axios');\nvar config = {\nmethod: 'get',\nurl: 'https://rest.ehrscape.com/rest/openehr/v1/ehr?subject_id=9999999000&amp;subject_namespace=uk.nhs.nhs_number',\nheaders: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'PREFER': 'return=minimal', 'Authorization': Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"https://rest.ehrscape.com/rest/openehr/v1/ehr?subject_id=9999999000&amp;subject_namespace=uk.nhs.nhs_number\"\npayload = {}\nheaders = {\n'Accept': 'application/json',\n'Content-Type': 'application/json',\n'PREFER': 'return=minimal',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"opencdr/OCDR6-retrieving-an-ehrid/#response","title":"Response","text":"<p>An openCDR will give a <code>200</code> response code and this structure. </p> <p>The <code>ehrId</code> that you need to capture is <code>ehr_id.value</code> item in the response.</p> <p>Hint</p> <p>You may want to consider caching this for the session, so that it can be used for a number of subsequent calls.</p> <pre><code>{\n\"_type\": \"EHR\",\n\"system_id\": {\n\"_type\": \"HIER_OBJECT_ID\",\n\"value\": \"4cce5a07-be4d-4318-a94f-3b8401853a20\"\n},\n\"ehr_id\": {\n\"_type\": \"HIER_OBJECT_ID\",\n\"value\": \"5dd03bc9-4419-4981-8798-ff4dda8ee9de\"\n},\n\"time_created\": {\n\"_type\": \"DV_DATE_TIME\",\n\"value\": \"2020-07-21T09:00:24.977Z\"\n},\n\"ehr_status\": {\n\"_type\": \"EHR_STATUS\",\n\"uid\": {\n\"_type\": \"HIER_OBJECT_ID\",\n\"value\": \"09bcd903-1565-44db-9087-2ff5e5bc7194::4cce5a07-be4d-4318-a94f-3b8401853a20::1\"\n},\n\"subject\": {\n\"_type\": \"PARTY_SELF\",\n\"external_ref\": {\n\"_type\": \"PARTY_REF\",\n\"id\": {\n\"_type\": \"HIER_OBJECT_ID\",\n\"value\": \"9999999000\"\n},\n\"namespace\": \"uk.nhs.nhs_number\"\n}\n},\n\"is_queryable\": true,\n\"is_modifiable\": true\n}\n}\n</code></pre>"},{"location":"opencdr/OCDR7-querying-allergies/","title":"Querying for patient allergies","text":"<p>This section will take you through how to query for Current allergies held on the CDR, using AQL (Archetype Query Language)</p> <p>The initial proposed dataset is - the allergy name (code if available)  - date of onset - manifestation (the type of Reaction -rash, nausea etc)</p>"},{"location":"opencdr/OCDR7-querying-allergies/#querying-an-openehr-cdr-archetype-query-language-aql","title":"Querying an openEHR CDR - Archetype Query language (AQL)","text":"<p>A CDR can be best thought of in terms of a exposing a complex object tree with the <code>EHR</code> object at the top, <code>Compositions</code> objects handling commits, but where all of the information in the tree can be traversed and accessed. Conceptually this is a logical query/graph language like SPARQL, the key difference being that the exact paths to the objects you might need to access are defined in the archetypes and templates you use to define and validate the data.</p> <p>AQL can be written by hand but is normally done using a tool like the Better Studio </p> <p>Understanding AQL is not generally important for third-party developers. Normally the correct AQL will be supplied by the CDR owner, indeed in production it is much more likely that server-side stored queries would be used.</p>"},{"location":"opencdr/OCDR7-querying-allergies/#post-query-run-an-ad-hoc-aql-query","title":"<code>POST /query</code> | Run an ad-hoc AQL query","text":"<p>This example will retrieve the data requirement above. To run the query - a <code>querystring</code> needs to be carried in the <code>body</code> of the POST call as raw data with the Header <code>Content-Type</code> set to `application/json'</p> <p>This is the <code>queryString:</code> that we need to send.</p> <pre><code>SELECT SELECT c/uid/value as compositionId,\nj/data[at0001]/items[at0002]/value/value as allergy_name,\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\nj/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\nj/data[at0001]/items[at0009]/items[at0027]/value as onset\nFROM EHR e [ehr_id/value = '{{ ehrId }}']\nCONTAINS COMPOSITION c\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] ORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\n</code></pre> <p>Note the ehrId substitution</p> <p>You will need to make sure that the <code>ehrId</code> variable in the queryString is substituted with the correct <code>ehrId</code> for the patient concerned.</p> <p>Don't worry about this seemingly odd format -it is essentially a mix of SQL and a path-based syntax, like SPARQL or XQuery.</p> <p>Running the query is easy- just call the <code>POST /query</code> call, sending the AQL string in the body of the request but note that you should strip the string of any linefeed and carriage returns etc. </p> <p>The Postman 'Ad-hoc query' request has a utility function under 'Pre-req' that sanitises the string and sets it into an environment variable before inserting it into the request body.</p> PostmancURLNodeJs - AxiosPython/requests <p></p> <pre><code>curl --location --request POST 'https://rest.ehrscape.com/rest/v1/query' \\\n    --header 'Content-Type: application/json' \\\n    --header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ== \\\n    --data-raw '{\n        \"aql\": \"{{ queryString }}\"\n    }'\n</code></pre> <pre><code>  var axios = require('axios');\nvar data = JSON.stringify({\"aql\":\"SELECT ... FROM ... CONTAINS ... WHERE\"});\nvar config = {\nmethod: 'post',\nurl: 'https://rest.ehrscape.com/rest/v1/query',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n},\ndata : data\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"https://https://rest.ehrscape.com/rest/v1/query\"\npayload = \"{\\n    \\\"aql\\\": \\\"{{ queryString }}\\\"\\n}\"\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"opencdr/OCDR7-querying-allergies/#response","title":"Response","text":"<p>The AQL response comes as back as an openEHR <code>resultSet</code>, which is a tabular shape, the exact format being determined by the AQL itself.</p> <p>In this example we have asked for scalar values only, but it is possible for AQL to return objects.</p> <p>The <code>columns</code> object shows the openEHR paths and aliases that are are returned in each row. </p> <pre><code>{\n\"meta\": {\n\"_type\": \"RESULTSET\",\n\"_created\": \"2020-10-18T15:28:31.403Z\",\n\"_executed_aql\": \"SELECT c/uid/value as compositionId,j/data[at0001]/items[at0002]/value/value as allergy_name,\\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\\n       j/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\\n       j/data[at0001]/items[at0009]/items[at0027]/value as onset\\nFROM EHR e \\nCONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1]\\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] \\nORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\"\n},\n\"q\": \"SELECT c/uid/value as compositionId,j/data[at0001]/items[at0002]/value/value as allergy_name,\\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\\n       j/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\\n       j/data[at0001]/items[at0009]/items[at0027]/value as onset\\nFROM EHR e \\nCONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1]\\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] \\nORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\",\n\"columns\": [\n{\n\"name\": \"compositionId\",\n\"path\": \"/uid/value\"\n},\n{\n\"name\": \"allergy_name\",\n\"path\": \"/data[at0001]/items[at0002]/value/value\"\n},\n{\n\"name\": \"allergy_code\",\n\"path\": \"/data[at0001]/items[at0002]/value/defining_code/code_string\"\n},\n{\n\"name\": \"allergy_terminology\",\n\"path\": \"/data[at0001]/items[at0002]/value/defining_code/terminology_id/value\"\n},\n{\n\"name\": \"manifestation\",\n\"path\": \"/data[at0001]/items[at0009]/items[at0011]/value\"\n},\n{\n\"name\": \"onset\",\n\"path\": \"/data[at0001]/items[at0009]/items[at0027]/value\"\n}\n],\n\"rows\": [\n[\n\"b960a98f-f799-4f98-b8f1-a3e86e33035e::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Peniccilin\",\nnull,\nnull,\nnull,\nnull\n],\n[\n\"371c5ff7-5078-4c17-b426-92e7351028d0::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Tetracycline\",\nnull,\nnull,\nnull,\nnull\n],\n[\n\"371c5ff7-5078-4c17-b426-92e7351028d0::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Erythromicin\",\nnull,\nnull,\nnull,\nnull\n]\n]\n}\n</code></pre>"},{"location":"opencdr/OCDR8-querying-compositions/","title":"Querying for recent compositions","text":"<p>This section will take you through how to query for recent Compositions held on the CDR, using AQL (Archetype Query Language)</p> <p>The initial proposed dataset is - the name of Composition - the composition identifier  - the start date of the Composition - the name of the clinical author (composer) - the name of the healthcare facility</p>"},{"location":"opencdr/OCDR8-querying-compositions/#querying-an-openehr-cdr-archetype-query-language-aql","title":"Querying an openEHR CDR - Archetype Query language (AQL)","text":"<p>A CDR can be best thought of in terms of a exposing a complex object tree with the <code>EHR</code> object at the top, <code>Compositions</code> objects handling commits, but where all of the information in the tree can be traversed and accessed. Conceptually this is a logical query/graph language like SPARQL, the key difference being that the exact paths to the objects you might need to access are defined in the archetypes and templates you use to define and validate the data.</p> <p>AQL can be written by hand but is normally done using a tool like the Better Studio </p> <p>Understanding AQL is not generally important for third-party developers. Normally the correct AQL will be supplied by the CDR owner, indeed in production it is much more likely that server-side stored queries would be used.</p>"},{"location":"opencdr/OCDR8-querying-compositions/#post-query-run-an-ad-hoc-aql-query","title":"<code>POST /query</code> | Run an ad-hoc AQL query","text":"<p>This example will retrieve the data requirement above. To run the query - a <code>querystring</code> needs to be carried in the <code>body</code> of the POST call as raw data with the Header <code>Content-Type</code> set to `application/json'</p> <p>This is the <code>queryString:</code> that we need to send.</p> <pre><code>SELECT c/uid/value as compositionId, c/name/value as compositionName,\nc/context/start_time/value as startTime, c/composer/name as authorName, c/context/health_care_facility/name as facilityName\nFROM EHR e [ehr_id/value = '{{ ehrId }}']\nCONTAINS COMPOSITION c\nORDER BY c/context/start_time/value DESC\n</code></pre> <p>Note the ehrId substitution</p> <p>You will need to make sure that the <code>ehrId</code> variable in the queryString is substituted with the correct <code>ehrId</code> for the patient concerned.</p> <p>Don't worry about this seemingly odd format -it is essentially a mix of SQL and a path-based syntax, like SPARQL or XQuery.</p> <p>Running the query is easy- just call the <code>POST /query</code> call, sending the AQL string in the body of the request but note that you should strip the string of any linefeed and carriage returns etc. </p> <p>The Postman 'Ad-hoc query' request has a utility function under 'Pre-req' that sanitises the string and sets it into an environment variable before inserting it into the request body.</p> PostmancURLNodeJs - AxiosPython/requests <p></p> <pre><code>curl --location --request POST 'https://rest.ehrscape.com/rest/v1/query' \\\n    --header 'Content-Type: application/json' \\\n    --header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ== \\\n    --data-raw '{\n        \"aql\": \"{{ queryString }}\"\n    }'\n</code></pre> <pre><code>  var axios = require('axios');\nvar data = JSON.stringify({\"aql\":\"SELECT ... FROM ... CONTAINS ... WHERE\"});\nvar config = {\nmethod: 'post',\nurl: 'https://rest.ehrscape.com/rest/v1/query',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n},\ndata : data\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"https://https://rest.ehrscape.com/rest/v1/query\"\npayload = \"{\\n    \\\"aql\\\": \\\"{{ queryString }}\\\"\\n}\"\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"opencdr/OCDR8-querying-compositions/#response","title":"Response","text":"<p>The AQL response comes as back as an openEHR <code>resultSet</code>, which is a tabular shape, the exact format being determined by the AQL itself.</p> <p>In this example we have asked for scalar values only, but it is possible for AQL to return objects.</p> <p>The <code>columns</code> object shows the openEHR paths and aliases that are are returned in each row. </p> <p><code>json {     \"meta\": {         \"_type\": \"RESULTSET\",         \"_created\": \"2020-10-18T15:46:37.208Z\",         \"_executed_aql\": \"SELECT c/uid/value as compositionId, c/name/value as compositionName,\\nc/context/start_time/value as startTime, c/composer/name as authorName, c/context/health_care_facility/name as facilityName\\nFROM EHR e \\nCONTAINS COMPOSITION c\\n \\nORDER BY c/context/start_time/value DESC\"     },     \"q\": \"SELECT c/uid/value as compositionId, c/name/value as compositionName,\\nc/context/start_time/value as startTime, c/composer/name as authorName, c/context/health_care_facility/name as facilityName\\nFROM EHR e \\nCONTAINS COMPOSITION c\\n \\nORDER BY c/context/start_time/value DESC\",     \"columns\": [         {             \"name\": \"compositionId\",             \"path\": \"/uid/value\"         },         {             \"name\": \"compositionName\",             \"path\": \"/name/value\"         },         {             \"name\": \"startTime\",             \"path\": \"/context/start_time/value\"         },         {             \"name\": \"authorName\",             \"path\": \"/composer/name\"         },         {             \"name\": \"facilityName\",             \"path\": \"/context/health_care_facility/name\"         }     ],     \"rows\": [         [             \"687d40df-57d1-4d29-ab41-88396f810de0::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",             \"Passport observations\",             \"2020-10-13T14:31:17.878Z\",             \"moh-jamaica_4cce5a07-be4d-4318-a94f-3b8401853a20\",             null         ],         [             \"845db76d-cf06-4fca-9b62-22a7c231f31b::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",             \"NCD - first visit\",             \"2020-07-22T15:17:03.696Z\",             \"Dr Murphy\",             null         ]     ] }</code></p>"},{"location":"passport/JPASS1-passport-project-overview/","title":"Overview of the Passport-JDP project","text":"<p>This section covers some examples that are very specific to the JMoHW Passport project. </p> <p>The proposed JMoHW Data Platform (JDP) will be based on an openEHR CDR, which is simulated for this project by a sandbox environment provided by the Apperta UK non-profit, and based on the Better CDR product. This is free to use for demonstration purposes and dummy patient data.</p> <p>The initial CDR dataset is aligned to the needs of Non-communicable disease management, including the data handled by Passport.</p> <p>As well as the Passport app demonstrator, a very simple web-based prototype app will be built to simulate a clinician-facing app, making use of the same CDR and able to access/visualise the data submitted to and received from the Passport app.</p> <p>Better Ehrscape API vs. openCDR API usage</p> <p>Most of the calls are based on the 'canonical openEHR REST API which we wil refer to as the 'openCDR' API, other than calls to the /composition resource.    Calls to the /composition resource are currently set to  make use of the Better Ehrscape API, as the openCDR API does not currently support the <code>FLAT JSON</code> data formats that we will be using. This support is under development e.g by EhrBase and will require only a minor change when implemented.</p> <p>The demonstrator use-cases for Passport are ...</p>"},{"location":"passport/JPASS1-passport-project-overview/#1-retrieve-key-sets-of-read-only-data-from-the-cdr","title":"1. Retrieve key sets of read-only data from the CDR","text":"<p>Access a patient record from the JDP sandbox via the openEHR query mechanism (AQL).</p> <p>The initial proposed queries are</p> <ul> <li>Current allergies</li> <li>Current and recent medications</li> <li>Immunisations</li> <li>Current problems/diagnoses</li> <li>Hospitalisations</li> <li>Recent additions to the CDR record (date, name of clinical author, name of document etc).</li> </ul> <p>Final exact details to be discussed with JMoHW  but the principles will not change.</p>"},{"location":"passport/JPASS1-passport-project-overview/#technical-tasks","title":"Technical Tasks","text":"<ol> <li>Retrieve the patient JDP <code>ehrId</code> from their <code>subjectId</code> - Retrieving the patient's ehrID </li> <li>run an AQL query to find a list of current Allergies and display the queried data - Querying JDP Allergies.</li> <li>run an AQL query to find a list of current Medications (if it exists) and display the queried data  - Querying JDP Medication.</li> <li>run an AQL query to find a list of Hospitalizations and display the queried data) - Querying JDP Hospitalization.</li> <li>run an AQL query to find a list of Immunization and display the queried data) - Querying JDP Immunization.</li> <li>run an AQL query to find a list of recently created Compositions and display the queried data) - Querying JDP recent Compositions.</li> <li>run an AQL query to find a list of Diagnoses and display the queried data) - Querying JDP Diagnoses.</li> </ol>"},{"location":"passport/JPASS1-passport-project-overview/#2-work-with-patient-derived-observations-data","title":"2. Work with Patient-derived Observations data","text":"<p>Allow patient to enter some simple observational data via their PHR app (Passport) and have it stored in the JDP-CDR. Also display all recent Observation data (however committed) via a query to the JDP-CDR.</p>"},{"location":"passport/JPASS1-passport-project-overview/#technical-tasks_1","title":"Technical Tasks","text":"<ol> <li>Retrieve the patient JDP <code>ehrId</code> from their SubjectId - Retrieving the patient's ehrID. </li> <li>Commit a composition to the JDP-CDR via a composition (FLAT format) - Committing patient Observations.</li> <li>Retrieve that composition - retrieving patient Observations.</li> <li>Query all recent Observation data, including that recorded on the JDP by other applications.</li> </ol> <p>Better Ehrscape API vs. openEHR REST API</p> <p>For now, we will make use of the Better Ehrscape API for the /composition calls, rather than the openCDR API, even though the latter is what will be used by the actual JDP-CDR. </p> <p>The primary reason is that, right now, Better support some simplified data formats which are easier for third-party vendors to work with. We know that ehrBase is actively working on support for these formats, and an early release is imminent, so this advice may change.</p> <p>We will supply some documentation to show how, once committed, the same data can be accessed and queried via the openEHR REST API.</p>"},{"location":"passport/JPASS10-retrieving-observation-data/","title":"Retrieving a Patient Observations Composition","text":"<p>All data committed to an openEHR CDR is done so via a POST or PUT /composition call - as a JSON or XML 'blob'. </p> <p>This section will cover how to retrieve a previously stored Composition by running a <code>GET / composition</code> call.</p> <p>A number of data serialisation options, can be used on retrieval. In this case we will ask for the Better <code>FLAT JSON</code> format, as this is what we used when committing the composition, but you can commit and retrieve using different formats if you wish.</p>"},{"location":"passport/JPASS10-retrieving-observation-data/#better-ehrscape-get-composition-example","title":"Better Ehrscape GET /composition example","text":""},{"location":"passport/JPASS10-retrieving-observation-data/#parameters","title":"Parameters","text":"<p><code>compositionId</code>: </p> <p>This is is the composition UID for the composition you wish to retrieve. Don't worry about how we find that out for now. Just use the UID for the composition you just committed in the last section. </p> <p>We will find out how to find compositionIds in a subsequent section.</p> <p><code>format</code>:</p> <p>This defines the format of JSON or XML that you are requesting. Use <code>FLAT</code> for this example.</p>"},{"location":"passport/JPASS10-retrieving-observation-data/#a-retrieve-an-openehr-composition-flat-json","title":"A. Retrieve an openEHR Composition (<code>FLAT JSON</code>)","text":"cURL <p><code>bash       curl --location --request GET '{{ ehrscapeBaseUrl }}/composition/{{ compositionId }}?format=FLAT' \\ --header 'Content-Type: application/json' \\ --header 'Authorization: {{ authToken }}'</code></p> NodeJS + Axios <p>```js</p> <pre><code>var axios = require('axios');\n</code></pre> <p>var config = {   method: 'get',   url: '{{ ehrscapeBaseUrl }}/composition/{{ compositionId }}?format=STRUCTURED',   headers: {      'Content-Type': 'application/json',      'Authorization': '{{ authToken }}'   } };</p> <p>axios(config) .then(function (response) {   console.log(JSON.stringify(response.data)); }) .catch(function (error) {   console.log(error); });</p> <p><pre><code>### Response for GET /composition\n\nIf the composition is found a `200` code will be returned along with the composition object , which you will note now includes the uid, but should otherwise be identical to that which you previously submitted.\n\n```json\n{\n    \"meta\": {\n        \"href\": \"https://cdr.code4health.org/rest/v1/composition/7b20dc2b-6494-467d-8986-469367f7c75b::4cce5a07-be4d-4318-a94f-3b8401853a20::1\"\n    },\n    \"compositionUid\": \"7b20dc2b-6494-467d-8986-469367f7c75b::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n    \"format\": \"FLAT\",\n    \"templateId\": \"JMOHW - Passport observations.v0\",\n    \"composition\": {\n        \"passport_observations/_uid\": \"7b20dc2b-6494-467d-8986-469367f7c75b::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n        \"passport_observations/language|code\": \"en\",\n        \"passport_observations/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/territory|code\": \"JM\",\n        \"passport_observations/territory|terminology\": \"ISO_3166-1\",\n        \"passport_observations/context/start_time\": \"2020-10-18T16:16:21.449Z\",\n        \"passport_observations/context/setting|code\": \"238\",\n        \"passport_observations/context/setting|value\": \"other care\",\n        \"passport_observations/context/setting|terminology\": \"openehr\",\n        \"passport_observations/blood_pressure/systolic|magnitude\": 169.0,\n        \"passport_observations/blood_pressure/systolic|unit\": \"mm[Hg]\",\n        \"passport_observations/blood_pressure/diastolic|magnitude\": 692.0,\n        \"passport_observations/blood_pressure/diastolic|unit\": \"mm[Hg]\",\n        \"passport_observations/blood_pressure/time\": \"2020-10-18T16:16:21.452Z\",\n        \"passport_observations/blood_pressure/language|code\": \"en\",\n        \"passport_observations/blood_pressure/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/blood_pressure/encoding|code\": \"UTF-8\",\n        \"passport_observations/blood_pressure/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/height_length/height_length|magnitude\": 609.33,\n        \"passport_observations/height_length/height_length|unit\": \"cm\",\n        \"passport_observations/height_length/time\": \"2020-10-18T16:16:21.453Z\",\n        \"passport_observations/height_length/language|code\": \"en\",\n        \"passport_observations/height_length/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/height_length/encoding|code\": \"UTF-8\",\n        \"passport_observations/height_length/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/body_weight/weight|magnitude\": 380.49,\n        \"passport_observations/body_weight/weight|unit\": \"kg\",\n        \"passport_observations/body_weight/time\": \"2020-10-18T16:16:21.453Z\",\n        \"passport_observations/body_weight/language|code\": \"en\",\n        \"passport_observations/body_weight/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/body_weight/encoding|code\": \"UTF-8\",\n        \"passport_observations/body_weight/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/blood_glucose/test_name|code\": \"14743-9\",\n        \"passport_observations/blood_glucose/test_name|value\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n        \"passport_observations/blood_glucose/test_name|terminology\": \"LOINC\",\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|code\": \"14743-9\",\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|value\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|terminology\": \"LOINC\",\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_result|magnitude\": 52.61,\n        \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_result|unit\": \"mmol/L\",\n        \"passport_observations/blood_glucose/time\": \"2020-10-18T16:16:21.453Z\",\n        \"passport_observations/blood_glucose/language|code\": \"en\",\n        \"passport_observations/blood_glucose/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/blood_glucose/encoding|code\": \"UTF-8\",\n        \"passport_observations/blood_glucose/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/pulse_oximetry/spo|numerator\": 0.0,\n        \"passport_observations/pulse_oximetry/spo|denominator\": 100.0,\n        \"passport_observations/pulse_oximetry/spo|type\": 2,\n        \"passport_observations/pulse_oximetry/spo\": 0.0,\n        \"passport_observations/pulse_oximetry/time\": \"2020-10-18T16:16:21.455Z\",\n        \"passport_observations/pulse_oximetry/language|code\": \"en\",\n        \"passport_observations/pulse_oximetry/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/pulse_oximetry/encoding|code\": \"UTF-8\",\n        \"passport_observations/pulse_oximetry/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/body_temperature/temperature|magnitude\": 72.7,\n        \"passport_observations/body_temperature/temperature|unit\": \"[degF]\",\n        \"passport_observations/body_temperature/time\": \"2020-10-18T16:16:21.455Z\",\n        \"passport_observations/body_temperature/language|code\": \"en\",\n        \"passport_observations/body_temperature/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/body_temperature/encoding|code\": \"UTF-8\",\n        \"passport_observations/body_temperature/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/clinical_synopsis/notes\": \"Notes 9\",\n        \"passport_observations/clinical_synopsis/language|code\": \"en\",\n        \"passport_observations/clinical_synopsis/language|terminology\": \"ISO_639-1\",\n        \"passport_observations/clinical_synopsis/encoding|code\": \"UTF-8\",\n        \"passport_observations/clinical_synopsis/encoding|terminology\": \"IANA_character-sets\",\n        \"passport_observations/category|code\": \"433\",\n        \"passport_observations/category|value\": \"event\",\n        \"passport_observations/category|terminology\": \"openehr\",\n        \"passport_observations/composer|name\": \"moh-jamaica_4cce5a07-be4d-4318-a94f-3b8401853a20\"\n    },\n    \"deleted\": false,\n    \"lastVersion\": true,\n    \"ehrId\": \"b4a4577f-7496-4053-ae60-45e22cfc9952\",\n    \"lifecycleState\": \"COMPLETE\"\n}```\n\n#### Other data formats\n\nThe Better Ehrscape API offers several other serialisation formats. You can have a look at these by simply changing the `format` parameter on the `GET / composition` call, and the call Header `Accept` to switch between JSON and XML.\n\n##### 'FLAT JSON'\n\nThis uses the same path-shortening mechanism as structured JSON but flattens all of the tree structure to a set of name-value pairs. Some developers prefer this to the STRUCTURED format.\n</code></pre> format=FLAT Accept : `application/json'</p> <p><pre><code>##### 'RAW JSON'\n\nThis is very similar to, but not identical to the openEHR Canonical JSON format, which essentially supercedes it. It very closely adheres tothe openEHR Reference model specification but is pretty voluminous\n</code></pre> format=RAW Accept : <code>application/json' <pre><code>##### 'RAW XML'\n\nThis is 'canonical' openEHR XML which is also accepted by the openEHR REST  API. It is the lingu-franca for all openEHR CDRs, even thosewhich do not support the REST CDR API, will normally accept and expose data in this XML format. \n</code></pre> format=RAW Accept :</code>application/xml' ```</p>"},{"location":"passport/JPASS11-updating-observation-data/","title":"Updating Patient Observations data","text":"<p>All new data committed to an openEHR CDR is done so via a <code>POST /composition call</code> - as a JSON or XML 'blob'.</p> <p>Most compositions will only need to be updated if an error or omission needs to be corrected. All openEHR data is strictly audited and version controlled, so an Update operation requires a <code>PUT /composition call</code>.</p> <p>You will nearly always with to first retrieve the original version of the composition via a <code>GET /composition</code> call, update the JSON or XML object and then perform the <code>PUT</code></p>"},{"location":"passport/JPASS11-updating-observation-data/#better-ehrscape-put-composition-update-composition","title":"Better Ehrscape <code>PUT /composition - Update composition</code>","text":""},{"location":"passport/JPASS11-updating-observation-data/#parameters","title":"Parameters","text":"<p><code>compositionId</code>:  This is is the <code>composition UID</code> for the previous version of the composition i.e the version that you are about to overwrite. Don't worry about how we find this, just use the <code>uid</code> for the composition you just committed in the last section.</p> <p><code>format</code>: This defines the format of JSON or XML that you are requesting. Use <code>FLAT</code> for this example.</p> <p><code>templateId</code>:  This is the identifier of the openEHR template, against which you need to validate the composition, in this case, ``.</p>"},{"location":"passport/JPASS11-updating-observation-data/#request","title":"Request","text":"PostmancURLNodeJS/AxiosPython/requests <pre><code>   curl --location \\\n--request PUT 'https://cdr.code4health.org/rest/v1/composition/7b20dc2b-6494-467d-8986-469367f7c75b::4cce5a07-be4d-4318-a94f-3b8401853a20::1?format=FLAT&amp;templateId=JMOHW%20-%20Passport%20observations.v0' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==' \\\n--data-raw '{\n{\n\"passport_observations/_uid\": \"7b20dc2b-6494-467d-8986-469367f7c75b::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n    \"passport_observations/language|code\": \"en\",\n    \"passport_observations/language|terminology\": \"ISO_639-1\",\n    \"passport_observations/territory|code\": \"JM\",\n    \"passport_observations/territory|terminology\": \"ISO_3166-1\",\n    \"passport_observations/context/start_time\": \"2020-10-18T16:16:21.449Z\",\n    \"passport_observations/context/setting|code\": \"238\",\n    \"passport_observations/context/setting|value\": \"other care\",\n    \"passport_observations/context/setting|terminology\": \"openehr\",\n    \"passport_observations/blood_pressure/systolic|magnitude\": 169.0,\n    \"passport_observations/blood_pressure/systolic|unit\": \"mm[Hg]\",\n    \"passport_observations/blood_pressure/diastolic|magnitude\": 692.0,\n    \"passport_observations/blood_pressure/diastolic|unit\": \"mm[Hg]\",\n    \"passport_observations/blood_pressure/time\": \"2020-10-18T16:16:21.452Z\",\n    \"passport_observations/blood_pressure/language|code\": \"en\",\n    \"passport_observations/blood_pressure/language|terminology\": \"ISO_639-1\",\n    \"passport_observations/blood_pressure/encoding|code\": \"UTF-8\",\n    \"passport_observations/blood_pressure/encoding|terminology\": \"IANA_character-sets\",\n    \"passport_observations/height_length/height_length|magnitude\": 609.33,\n    \"passport_observations/height_length/height_length|unit\": \"cm\",\n    \"passport_observations/height_length/time\": \"2020-10-18T16:16:21.453Z\",\n    \"passport_observations/height_length/language|code\": \"en\",\n    \"passport_observations/height_length/language|terminology\": \"ISO_639-1\",\n    \"passport_observations/height_length/encoding|code\": \"UTF-8\",\n    \"passport_observations/height_length/encoding|terminology\": \"IANA_character-sets\",\n    \"passport_observations/body_weight/weight|magnitude\": 380.49,\n    \"passport_observations/body_weight/weight|unit\": \"kg\",\n    \"passport_observations/body_weight/time\": \"2020-10-18T16:16:21.453Z\",\n    \"passport_observations/body_weight/language|code\": \"en\",\n    \"passport_observations/body_weight/language|terminology\": \"ISO_639-1\",\n    \"passport_observations/body_weight/encoding|code\": \"UTF-8\",\n    \"passport_observations/body_weight/encoding|terminology\": \"IANA_character-sets\",\n    \"passport_observations/blood_glucose/test_name|code\": \"14743-9\",\n    \"passport_observations/blood_glucose/test_name|value\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n    \"passport_observations/blood_glucose/test_name|terminology\": \"LOINC\",\n    \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|code\": \"14743-9\",\n    \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|value\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n    \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|terminology\": \"LOINC\",\n    \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_result|magnitude\": 52.61,\n    \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_result|unit\": \"mmol/L\",\n    \"passport_observations/blood_glucose/time\": \"2020-10-18T16:16:21.453Z\",\n    \"passport_observations/blood_glucose/language|code\": \"en\",\n    \"passport_observations/blood_glucose/language|terminology\": \"ISO_639-1\",\n    \"passport_observations/blood_glucose/encoding|code\": \"UTF-8\",\n    \"passport_observations/blood_glucose/encoding|terminology\": \"IANA_character-sets\",\n    \"passport_observations/pulse_oximetry/spo|numerator\": 0.0,\n    \"passport_observations/pulse_oximetry/spo|denominator\": 100.0,\n    \"passport_observations/pulse_oximetry/spo|type\": 2,\n    \"passport_observations/pulse_oximetry/spo\": 0.0,\n    \"passport_observations/pulse_oximetry/time\": \"2020-10-18T16:16:21.455Z\",\n    \"passport_observations/pulse_oximetry/language|code\": \"en\",\n    \"passport_observations/pulse_oximetry/language|terminology\": \"ISO_639-1\",\n    \"passport_observations/pulse_oximetry/encoding|code\": \"UTF-8\",\n    \"passport_observations/pulse_oximetry/encoding|terminology\": \"IANA_character-sets\",\n    \"passport_observations/body_temperature/temperature|magnitude\": 72.7,\n    \"passport_observations/body_temperature/temperature|unit\": \"[degF]\",\n    \"passport_observations/body_temperature/time\": \"2020-10-18T16:16:21.455Z\",\n    \"passport_observations/body_temperature/language|code\": \"en\",\n    \"passport_observations/body_temperature/language|terminology\": \"ISO_639-1\",\n    \"passport_observations/body_temperature/encoding|code\": \"UTF-8\",\n    \"passport_observations/body_temperature/encoding|terminology\": \"IANA_character-sets\",\n    \"passport_observations/clinical_synopsis/notes\": \"Notes 9\",\n    \"passport_observations/clinical_synopsis/language|code\": \"en\",\n    \"passport_observations/clinical_synopsis/language|terminology\": \"ISO_639-1\",\n    \"passport_observations/clinical_synopsis/encoding|code\": \"UTF-8\",\n    \"passport_observations/clinical_synopsis/encoding|terminology\": \"IANA_character-sets\",\n    \"passport_observations/category|code\": \"433\",\n    \"passport_observations/category|value\": \"event\",\n    \"passport_observations/category|terminology\": \"openehr\",\n    \"passport_observations/composer|name\": \"moh-jamaica_4cce5a07-be4d-4318-a94f-3b8401853a20\"\n}\n</code></pre> <pre><code>  var axios = require('axios');\nvar config = {\nmethod: 'put',\nurl: 'https://rest.ehrscape.com/rest/v1/rest/v1/composition/7b20dc2b-6494-467d-8986-469367f7c75b::4cce5a07-be4d-4318-a94f-3b8401853a20::1?format=FLAT&amp;templateId=JMOHW%20-%20Passport%20observations.v0',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Authorization: {{ authToken }}', }\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code> url = \"https://rest.ehrscape.com/rest/v1/composition/7b20dc2b-6494-467d-8986-469367f7c75b::4cce5a07-be4d-4318-a94f-3b8401853a20::1?format=FLAT&amp;templateId=JMOHW%20-%20Passport%20observations.v0\"\npayload = {}\nheaders = {\n'Content-Type': 'application/json',\n'Authorization: {{ authToken }}',\n}'\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"passport/JPASS11-updating-observation-data/#response","title":"Response","text":"<pre><code>{\n\"meta\": {\n\"href\": \"https://rest.ehrscape.com/rest/v1/composition/b0d7f6cb-a429-49b2-b5f3-9637b409eebd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::2\"\n},\n\"action\": \"UPDATE\",\n\"compositionUid\": \"b0d7f6cb-a429-49b2-b5f3-9637b409eebd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::2\"\n}\n</code></pre> <p>If the update is successful a <code>200</code> code will be returned.</p>"},{"location":"passport/JPASS12-composition-constraints/","title":"Understanding composition Constraints and validation","text":"<p>As it is committed, the data will be validated against both the appropriate openEHR template and the underlying Reference Model schema.</p> <p>If the data is valid, it will be stored in the CDR and is allocated a unique <code>compositionID</code>, which is returned by the POST /composition call on a successful call.</p> <p>One of the key challenges in working with openEHR, is in understanding the complexities of the various datatypes and the other validation rules that apply for any particular template.</p> <p>The constraint and validation rules are applied in by</p> <ol> <li> <p>The Reference model</p> </li> <li> <p>Archetype-level constraints</p> </li> <li> <p>Template-level constraints</p> </li> </ol>"},{"location":"passport/JPASS12-composition-constraints/#how-to-figure-out-which-constraints-apply","title":"How to figure out which constraints apply?","text":"<p>As an example, I know that a particular coded entry list (perhaps drop-down) allows only a fixed selection of possible answers, which are probably coded ( a good example being a PROMS score). Where can I find how these are defined?</p> <p>The ultimate source of truth is the <code>.opt</code> 'Operational template' which is uploaded to the CDR. It is essentially an aggregation of all the archetype constraints, and any local template constraints, which are than applied ot the underlying RM to give the full validation target.</p> <p>The .opt is a faithful representation of the underlying in-memory objects but is a pretty difficult beast to parse and understand.</p> <p>Fortunately Better provide a 'web template' utility which generates a JSON version of the validation statement but in a much more understandable format -both for human consumption and parsing. The web template facility is available both from the Ehrscape API, and as an export option from the openEHR Archetype Designer. We understand that ehrBase are developing a similar export facility and we expect this to become part of the openEHR standard in due course.</p>"},{"location":"passport/JPASS12-composition-constraints/#better-ehrscape-get-template-retrieve-a-web-template","title":"Better Ehrscape: `GET /template - Retrieve a web template'","text":""},{"location":"passport/JPASS12-composition-constraints/#parameters","title":"Parameters","text":"<p><code>templateId</code>: This is the identifier of the openEHR template, against which you need to validate the composition, in this case <code>DHI - Urology_PROMs-v0</code> </p> <p><code>format</code>: This defines the format of JSON or XML that you are sending. Use <code>STRUCTURED</code> for this example.</p>"},{"location":"passport/JPASS12-composition-constraints/#request","title":"Request","text":"PostmancURLNodeJS/AxiosPython/requests <pre><code>    curl --location \\\n--request GET 'https://rest.ehrscape.com/rest/v1/template/JMOHW - Passport observations.v0' \\\n--header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==' \\\n</code></pre> <pre><code>    var axios = require('axios');\nvar config = {\nmethod: 'get',\nurl: 'https://rest.ehrscape.com/rest/v1/template/JMOHW - Passport observations.v0',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==', };\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>```python\nimport requests\n\nurl = \"https://rest.ehrscape.com/rest/v1/template/JMOHW - Passport observations.v0\"\n\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ==',\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text.encode('utf8'))\n</code></pre> <p>```</p>"},{"location":"passport/JPASS12-composition-constraints/#response","title":"Response","text":"<pre><code>{\n\"meta\": {\n\"href\": \"https://cdr.code4health.org/rest/v1/template/JMOHW%20-%20Passport%20observations.v0\"\n},\n\"webTemplate\": {\n\"templateId\": \"JMOHW - Passport observations.v0\",\n\"version\": \"2.3\",\n\"defaultLanguage\": \"en\",\n\"languages\": [\n\"en\"\n],\n\"tree\": {\n\"id\": \"passport_observations\",\n\"name\": \"Passport observations\",\n\"localizedName\": \"Passport observations\",\n\"rmType\": \"COMPOSITION\",\n\"nodeId\": \"openEHR-EHR-COMPOSITION.encounter.v1\",\n\"min\": 1,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Passport observations\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Interaction, contact or care event between a subject of care and healthcare provider(s).\"\n},\n\"aqlPath\": \"\",\n\"children\": [\n{\n\"id\": \"context\",\n\"rmType\": \"EVENT_CONTEXT\",\n\"nodeId\": \"\",\n\"min\": 1,\n\"max\": 1,\n\"aqlPath\": \"/context\",\n\"children\": [\n{\n\"id\": \"start_time\",\n\"name\": \"Start_time\",\n\"rmType\": \"DV_DATE_TIME\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/context/start_time\",\n\"inputs\": [\n{\n\"type\": \"DATETIME\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"setting\",\n\"name\": \"Setting\",\n\"rmType\": \"DV_CODED_TEXT\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/context/setting\",\n\"inputs\": [\n{\n\"suffix\": \"code\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"value\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n},\n{\n\"id\": \"blood_pressure\",\n\"name\": \"Blood pressure\",\n\"localizedName\": \"Blood pressure\",\n\"rmType\": \"OBSERVATION\",\n\"nodeId\": \"openEHR-EHR-OBSERVATION.blood_pressure.v2\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Blood pressure\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The local measurement of arterial blood pressure which is a surrogate for arterial pressure in the systemic circulation.\"\n},\n\"annotations\": {\n\"comment\": \"Most commonly, use of the term 'blood pressure' refers to measurement of brachial artery pressure in the upper arm.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.blood_pressure.v2]\",\n\"children\": [\n{\n\"id\": \"systolic\",\n\"name\": \"Systolic\",\n\"localizedName\": \"Systolic\",\n\"rmType\": \"DV_QUANTITY\",\n\"nodeId\": \"at0004\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Systolic\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Peak systemic arterial blood pressure  - measured in systolic or contraction phase of the heart cycle.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.blood_pressure.v2]/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value\",\n\"inputs\": [\n{\n\"suffix\": \"magnitude\",\n\"type\": \"DECIMAL\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;\",\n\"max\": 1000.0\n},\n\"precision\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0,\n\"maxOp\": \"&lt;=\",\n\"max\": 0\n}\n}\n},\n{\n\"suffix\": \"unit\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"mm[Hg]\",\n\"label\": \"mm[Hg]\",\n\"localizedLabels\": {\n\"en\": \"mmHg\"\n},\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;\",\n\"max\": 1000.0\n},\n\"precision\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0,\n\"maxOp\": \"&lt;=\",\n\"max\": 0\n}\n}\n}\n]\n}\n],\n\"termBindings\": {\n\"SNOMED-CT\": {\n\"value\": \"[SNOMED-CT(2003)::271649006]\",\n\"terminologyId\": \"SNOMED-CT\"\n}\n}\n},\n{\n\"id\": \"diastolic\",\n\"name\": \"Diastolic\",\n\"localizedName\": \"Diastolic\",\n\"rmType\": \"DV_QUANTITY\",\n\"nodeId\": \"at0005\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Diastolic\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Minimum systemic arterial blood pressure - measured in the diastolic or relaxation phase of the heart cycle.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.blood_pressure.v2]/data[at0001]/events[at0006]/data[at0003]/items[at0005]/value\",\n\"inputs\": [\n{\n\"suffix\": \"magnitude\",\n\"type\": \"DECIMAL\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;\",\n\"max\": 1000.0\n},\n\"precision\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0,\n\"maxOp\": \"&lt;=\",\n\"max\": 0\n}\n}\n},\n{\n\"suffix\": \"unit\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"mm[Hg]\",\n\"label\": \"mm[Hg]\",\n\"localizedLabels\": {\n\"en\": \"mmHg\"\n},\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;\",\n\"max\": 1000.0\n},\n\"precision\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0,\n\"maxOp\": \"&lt;=\",\n\"max\": 0\n}\n}\n}\n]\n}\n],\n\"termBindings\": {\n\"SNOMED-CT\": {\n\"value\": \"[SNOMED-CT(2003)::271650006]\",\n\"terminologyId\": \"SNOMED-CT\"\n}\n}\n},\n{\n\"id\": \"time\",\n\"name\": \"Time\",\n\"rmType\": \"DV_DATE_TIME\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.blood_pressure.v2]/data[at0001]/events[at0006]/time\",\n\"inputs\": [\n{\n\"type\": \"DATETIME\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.blood_pressure.v2]/language\",\n\"inContext\": true\n},\n{\n\"id\": \"encoding\",\n\"name\": \"Encoding\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.blood_pressure.v2]/encoding\",\n\"inContext\": true\n},\n{\n\"id\": \"subject\",\n\"name\": \"Subject\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.blood_pressure.v2]/subject\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n],\n\"termBindings\": {\n\"SNOMED-CT\": {\n\"value\": \"[SNOMED-CT(2003)::364090009]\",\n\"terminologyId\": \"SNOMED-CT\"\n}\n}\n},\n{\n\"id\": \"height_length\",\n\"name\": \"Height/Length\",\n\"localizedName\": \"Height/Length\",\n\"rmType\": \"OBSERVATION\",\n\"nodeId\": \"openEHR-EHR-OBSERVATION.height.v2\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Height/Length\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Height, or body length, is measured from crown of head to sole of foot.\"\n},\n\"annotations\": {\n\"comment\": \"Height is measured with the individual in a standing position and body length in a recumbent position.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.height.v2]\",\n\"children\": [\n{\n\"id\": \"height_length\",\n\"name\": \"Height/Length\",\n\"localizedName\": \"Height/Length\",\n\"rmType\": \"DV_QUANTITY\",\n\"nodeId\": \"at0004\",\n\"min\": 1,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Height/Length\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The length of the body from crown of head to sole of foot.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.height.v2]/data[at0001]/events[at0002]/data[at0003]/items[at0004]/value\",\n\"inputs\": [\n{\n\"suffix\": \"magnitude\",\n\"type\": \"DECIMAL\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;=\",\n\"max\": 1000.0\n}\n}\n},\n{\n\"suffix\": \"unit\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"cm\",\n\"label\": \"cm\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;=\",\n\"max\": 1000.0\n}\n}\n}\n]\n}\n]\n},\n{\n\"id\": \"time\",\n\"name\": \"Time\",\n\"rmType\": \"DV_DATE_TIME\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.height.v2]/data[at0001]/events[at0002]/time\",\n\"inputs\": [\n{\n\"type\": \"DATETIME\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.height.v2]/language\",\n\"inContext\": true\n},\n{\n\"id\": \"encoding\",\n\"name\": \"Encoding\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.height.v2]/encoding\",\n\"inContext\": true\n},\n{\n\"id\": \"subject\",\n\"name\": \"Subject\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.height.v2]/subject\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n},\n{\n\"id\": \"body_weight\",\n\"name\": \"Body weight\",\n\"localizedName\": \"Body weight\",\n\"rmType\": \"OBSERVATION\",\n\"nodeId\": \"openEHR-EHR-OBSERVATION.body_weight.v2\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Body weight\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Measurement of the body weight of an individual.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_weight.v2]\",\n\"children\": [\n{\n\"id\": \"weight\",\n\"name\": \"Weight\",\n\"localizedName\": \"Weight\",\n\"rmType\": \"DV_QUANTITY\",\n\"nodeId\": \"at0004\",\n\"min\": 1,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Weight\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The weight of the individual.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_weight.v2]/data[at0002]/events[at0003]/data[at0001]/items[at0004]/value\",\n\"inputs\": [\n{\n\"suffix\": \"magnitude\",\n\"type\": \"DECIMAL\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;=\",\n\"max\": 1000.0\n}\n}\n},\n{\n\"suffix\": \"unit\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"kg\",\n\"label\": \"kg\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;=\",\n\"max\": 1000.0\n}\n}\n}\n]\n}\n]\n},\n{\n\"id\": \"time\",\n\"name\": \"Time\",\n\"rmType\": \"DV_DATE_TIME\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_weight.v2]/data[at0002]/events[at0003]/time\",\n\"inputs\": [\n{\n\"type\": \"DATETIME\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_weight.v2]/language\",\n\"inContext\": true\n},\n{\n\"id\": \"encoding\",\n\"name\": \"Encoding\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_weight.v2]/encoding\",\n\"inContext\": true\n},\n{\n\"id\": \"subject\",\n\"name\": \"Subject\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_weight.v2]/subject\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n},\n{\n\"id\": \"blood_glucose\",\n\"name\": \"Blood glucose\",\n\"localizedName\": \"Blood glucose\",\n\"rmType\": \"OBSERVATION\",\n\"nodeId\": \"openEHR-EHR-OBSERVATION.laboratory_test_result.v1\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Blood glucose\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The result, including findings and the laboratory's interpretation, of an investigation performed on specimens collected from an individual or related to that individual.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']\",\n\"children\": [\n{\n\"id\": \"test_name\",\n\"name\": \"Test name\",\n\"localizedName\": \"Test name\",\n\"rmType\": \"DV_CODED_TEXT\",\n\"nodeId\": \"at0005\",\n\"min\": 1,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Test name\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Name of the laboratory investigation performed on the specimen(s).\"\n},\n\"annotations\": {\n\"comment\": \"A test result may be for a single analyte, or a group of items, including panel tests. It is strongly recommended that 'Test name' be coded with a terminology, for example LOINC or SNOMED CT. For example: 'Glucose', 'Urea and Electrolytes', 'Swab', 'Cortisol (am)', 'Potassium in perspiration' or 'Melanoma histopathology'. The name may sometimes include specimen type and patient state, for example 'Fasting blood glucose' or include other information, as 'Potassium (PNA blood gas)'.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/data[at0001]/events[at0002]/data[at0003]/items[at0005]/value\",\n\"inputs\": [\n{\n\"suffix\": \"code\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"14743-9\",\n\"label\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n\"localizedLabels\": {\n\"en\": \"\"\n}\n}\n],\n\"defaultValue\": \"14743-9\",\n\"terminology\": \"LOINC\"\n}\n]\n},\n{\n\"id\": \"laboratory_analyte_result\",\n\"name\": \"Laboratory analyte result\",\n\"localizedName\": \"Laboratory analyte result\",\n\"rmType\": \"CLUSTER\",\n\"nodeId\": \"openEHR-EHR-CLUSTER.laboratory_test_analyte.v1\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Laboratory analyte result\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The result of a laboratory test for a single analyte value.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]\",\n\"children\": [\n{\n\"id\": \"analyte_name\",\n\"name\": \"Analyte name\",\n\"localizedName\": \"Analyte name\",\n\"rmType\": \"DV_CODED_TEXT\",\n\"nodeId\": \"at0024\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Analyte name\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The name of the analyte result.\"\n},\n\"annotations\": {\n\"comment\": \"The value for this element is normally supplied in a specialisation, in a template or at run-time to reflect the actual analyte. For example: 'Serum sodium', 'Haemoglobin'. Coding with an external terminology is strongly recommended, such as LOINC, NPU, SNOMED CT, or local lab terminologies.\",\n\"hl7v2_mapping\": \"OBX.3\",\n\"fhir_mapping\": \"Observation.code\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0024]/value\",\n\"inputs\": [\n{\n\"suffix\": \"code\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"14743-9\",\n\"label\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n\"localizedLabels\": {\n\"en\": \"\"\n}\n}\n],\n\"defaultValue\": \"14743-9\",\n\"terminology\": \"LOINC\"\n}\n]\n},\n{\n\"id\": \"analyte_result\",\n\"name\": \"Analyte result\",\n\"localizedName\": \"Analyte result\",\n\"rmType\": \"DV_QUANTITY\",\n\"nodeId\": \"at0001\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Analyte result\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The value of the analyte result.\"\n},\n\"annotations\": {\n\"comment\": \"For example '7.3 mmol/l', 'Raised'. The 'Any' data type will need to be constrained to an appropriate data type in a specialisation, a template or at run-time to reflect the actual analyte result. The Quantity data type has reference model attributes that include flags for normal/abnormal, reference ranges and approximations - see https://specifications.openehr.org/releases/RM/latest/data_types.html#_dv_quantity_class for more details.\",\n\"hl7v2_mapping\": \"OBX.2, OBX.5, OBX.6, OBX.7, OBX.8\",\n\"fhir_mapping\": \"Observation.value[x]\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/data[at0001]/events[at0002]/data[at0003]/items[openEHR-EHR-CLUSTER.laboratory_test_analyte.v1]/items[at0001]/value\",\n\"inputs\": [\n{\n\"suffix\": \"magnitude\",\n\"type\": \"DECIMAL\"\n},\n{\n\"suffix\": \"unit\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"mmol/L\",\n\"label\": \"mmol/L\"\n}\n]\n}\n]\n}\n]\n},\n{\n\"id\": \"time\",\n\"name\": \"Time\",\n\"rmType\": \"DV_DATE_TIME\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/data[at0001]/events[at0002]/time\",\n\"inputs\": [\n{\n\"type\": \"DATETIME\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/language\",\n\"inContext\": true\n},\n{\n\"id\": \"encoding\",\n\"name\": \"Encoding\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/encoding\",\n\"inContext\": true\n},\n{\n\"id\": \"subject\",\n\"name\": \"Subject\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.laboratory_test_result.v1,'Blood glucose']/subject\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n},\n{\n\"id\": \"pulse_oximetry\",\n\"name\": \"Pulse oximetry\",\n\"localizedName\": \"Pulse oximetry\",\n\"rmType\": \"OBSERVATION\",\n\"nodeId\": \"openEHR-EHR-OBSERVATION.pulse_oximetry.v1\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Pulse oximetry\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Blood oxygen and related measurements, measured by pulse oximetry or pulse CO-oximetry.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.pulse_oximetry.v1]\",\n\"children\": [\n{\n\"id\": \"spo\",\n\"name\": \"SpO\u2082\",\n\"localizedName\": \"SpO\u2082\",\n\"rmType\": \"DV_PROPORTION\",\n\"nodeId\": \"at0006\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"SpO\u2082\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The saturation of oxygen in the peripheral blood, measured via pulse oximetry.\"\n},\n\"annotations\": {\n\"comment\": \"SpO\u2082 is defined as the percentage of oxyhaemoglobin (HbO\u2082) to the total concentration of haemoglobin (HbO\u2082 + deoxyhaemoglobin) in peripheral blood.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.pulse_oximetry.v1]/data[at0001]/events[at0002]/data[at0003]/items[at0006]/value\",\n\"proportionTypes\": [\n\"percent\"\n],\n\"inputs\": [\n{\n\"suffix\": \"numerator\",\n\"type\": \"DECIMAL\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 0.0,\n\"maxOp\": \"&lt;=\",\n\"max\": 100.0\n}\n},\n\"defaultValue\": 0.0\n},\n{\n\"suffix\": \"denominator\",\n\"type\": \"DECIMAL\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 100.0,\n\"maxOp\": \"&lt;=\",\n\"max\": 100.0\n}\n}\n}\n],\n\"termBindings\": {\n\"SNOMED-CT\": {\n\"value\": \"[SNOMED-CT::431314004]\",\n\"terminologyId\": \"SNOMED-CT\"\n},\n\"LOINC\": {\n\"value\": \"[LOINC::59408-5]\",\n\"terminologyId\": \"LOINC\"\n}\n}\n},\n{\n\"id\": \"time\",\n\"name\": \"Time\",\n\"rmType\": \"DV_DATE_TIME\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.pulse_oximetry.v1]/data[at0001]/events[at0002]/time\",\n\"inputs\": [\n{\n\"type\": \"DATETIME\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.pulse_oximetry.v1]/language\",\n\"inContext\": true\n},\n{\n\"id\": \"encoding\",\n\"name\": \"Encoding\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.pulse_oximetry.v1]/encoding\",\n\"inContext\": true\n},\n{\n\"id\": \"subject\",\n\"name\": \"Subject\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.pulse_oximetry.v1]/subject\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n},\n{\n\"id\": \"body_temperature\",\n\"name\": \"Body temperature\",\n\"localizedName\": \"Body temperature\",\n\"rmType\": \"OBSERVATION\",\n\"nodeId\": \"openEHR-EHR-OBSERVATION.body_temperature.v2\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Body temperature\"\n},\n\"localizedDescriptions\": {\n\"en\": \"A measurement of the body temperature, which is a surrogate for the core body temperature of the individual.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_temperature.v2]\",\n\"children\": [\n{\n\"id\": \"temperature\",\n\"name\": \"Temperature\",\n\"localizedName\": \"Temperature\",\n\"rmType\": \"DV_QUANTITY\",\n\"nodeId\": \"at0004\",\n\"min\": 1,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Temperature\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The measured body temperature (as a surrogate for the core of the body).\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_temperature.v2]/data[at0002]/events[at0003]/data[at0001]/items[at0004]/value\",\n\"inputs\": [\n{\n\"suffix\": \"magnitude\",\n\"type\": \"DECIMAL\",\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 30.0,\n\"maxOp\": \"&lt;\",\n\"max\": 200.0\n},\n\"precision\": {\n\"minOp\": \"&gt;=\",\n\"min\": 1,\n\"maxOp\": \"&lt;=\",\n\"max\": 1\n}\n}\n},\n{\n\"suffix\": \"unit\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"[degF]\",\n\"label\": \"[degF]\",\n\"localizedLabels\": {\n\"en\": \"\u00b0F\"\n},\n\"validation\": {\n\"range\": {\n\"minOp\": \"&gt;=\",\n\"min\": 30.0,\n\"maxOp\": \"&lt;\",\n\"max\": 200.0\n},\n\"precision\": {\n\"minOp\": \"&gt;=\",\n\"min\": 1,\n\"maxOp\": \"&lt;=\",\n\"max\": 1\n}\n}\n}\n]\n}\n],\n\"termBindings\": {\n\"LNC205\": {\n\"value\": \"[LNC205::8310-5]\",\n\"terminologyId\": \"LNC205\"\n},\n\"SNOMED-CT\": {\n\"value\": \"[SNOMED-CT::386725007]\",\n\"terminologyId\": \"SNOMED-CT\"\n}\n}\n},\n{\n\"id\": \"time\",\n\"name\": \"Time\",\n\"rmType\": \"DV_DATE_TIME\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_temperature.v2]/data[at0002]/events[at0003]/time\",\n\"inputs\": [\n{\n\"type\": \"DATETIME\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_temperature.v2]/language\",\n\"inContext\": true\n},\n{\n\"id\": \"encoding\",\n\"name\": \"Encoding\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_temperature.v2]/encoding\",\n\"inContext\": true\n},\n{\n\"id\": \"subject\",\n\"name\": \"Subject\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-OBSERVATION.body_temperature.v2]/subject\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n},\n{\n\"id\": \"clinical_synopsis\",\n\"name\": \"Clinical synopsis\",\n\"localizedName\": \"Clinical synopsis\",\n\"rmType\": \"EVALUATION\",\n\"nodeId\": \"openEHR-EHR-EVALUATION.clinical_synopsis.v1\",\n\"min\": 0,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Clinical synopsis\"\n},\n\"localizedDescriptions\": {\n\"en\": \"Narrative summary or overview about a patient, specifically from the perspective of a healthcare provider, and with or without associated interpretations.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-EVALUATION.clinical_synopsis.v1]\",\n\"children\": [\n{\n\"id\": \"notes\",\n\"name\": \"Notes\",\n\"localizedName\": \"Notes\",\n\"rmType\": \"DV_TEXT\",\n\"nodeId\": \"at0002\",\n\"min\": 1,\n\"max\": 1,\n\"localizedNames\": {\n\"en\": \"Notes\"\n},\n\"localizedDescriptions\": {\n\"en\": \"The summary, assessment, conclusions or evaluation of the clinical findings.\"\n},\n\"aqlPath\": \"/content[openEHR-EHR-EVALUATION.clinical_synopsis.v1]/data[at0001]/items[at0002,'Notes']/value\",\n\"inputs\": [\n{\n\"type\": \"TEXT\"\n}\n]\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-EVALUATION.clinical_synopsis.v1]/language\",\n\"inContext\": true\n},\n{\n\"id\": \"encoding\",\n\"name\": \"Encoding\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-EVALUATION.clinical_synopsis.v1]/encoding\",\n\"inContext\": true\n},\n{\n\"id\": \"subject\",\n\"name\": \"Subject\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/content[openEHR-EHR-EVALUATION.clinical_synopsis.v1]/subject\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n},\n{\n\"id\": \"category\",\n\"rmType\": \"DV_CODED_TEXT\",\n\"nodeId\": \"\",\n\"min\": 1,\n\"max\": 1,\n\"aqlPath\": \"/category\",\n\"inputs\": [\n{\n\"suffix\": \"code\",\n\"type\": \"CODED_TEXT\",\n\"list\": [\n{\n\"value\": \"433\",\n\"label\": \"event\",\n\"localizedLabels\": {\n\"en\": \"event\"\n}\n}\n],\n\"terminology\": \"openehr\"\n}\n],\n\"inContext\": true\n},\n{\n\"id\": \"language\",\n\"name\": \"Language\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/language\",\n\"inContext\": true\n},\n{\n\"id\": \"territory\",\n\"name\": \"Territory\",\n\"rmType\": \"CODE_PHRASE\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/territory\",\n\"inContext\": true\n},\n{\n\"id\": \"composer\",\n\"name\": \"Composer\",\n\"rmType\": \"PARTY_PROXY\",\n\"min\": 0,\n\"max\": 1,\n\"aqlPath\": \"/composer\",\n\"inputs\": [\n{\n\"suffix\": \"id\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_scheme\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"id_namespace\",\n\"type\": \"TEXT\"\n},\n{\n\"suffix\": \"name\",\n\"type\": \"TEXT\"\n}\n],\n\"inContext\": true\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"passport/JPASS13-openehr-datatypes/","title":"openEHR Datatypes","text":""},{"location":"passport/JPASS13-openehr-datatypes/#key-openehr-datatypes","title":"Key openEHR datatypes","text":"<p>The openEHR Reference model defines a relatively small set of information model constructs which openEHR back-ends must support. This includes a number of generic classes and datatypes.</p> <p>The Reference model contains virtually no clinical content e.g concepts for Medication, or Diagnosis. These are defined and managed separately as <code>archetypes</code>.</p> <p>openEHR has a very rich set of allowable datatypes. A full definition is beyond the scope of this document but developers new to this field may find the following notes helpful. You can refer to the  openEHR Specification  and UML for full details.</p> <p>The formal Class names for all datatypes in openEHR start with <code>DV_</code></p>"},{"location":"passport/JPASS13-openehr-datatypes/#datatype-text-dv_text","title":"Datatype: text (<code>DV_TEXT</code>)","text":"<p>Allows the recording of simple, unformatted text. Newlines and carriage returns are allowed. openEHR does not normally constrain the length of string.</p> <p>The example shows how a multiple occurrence Element is handled.</p> RM SpecsCANONICAL JSONSTRUCTURED JSONFLAT JSON <p>The rm.data_types.text package contains classes for representing all textual values in the health record, including plain text, coded terms, and narrative text. </p> <pre><code>   {\n{\n\"items\": [\n{\n\"_type\": \"ELEMENT\",\n\"name\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"What matters to me\"\n},\n\"archetype_node_id\": \"at0004\",\n\"value\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"Parents\"\n}\n},\n{\n\"_type\": \"ELEMENT\",\n\"name\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"What matters to me #2\"\n},\n\"archetype_node_id\": \"at0004\",\n\"value\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"Mood\"\n}\n},\n{\n\"_type\": \"ELEMENT\",\n\"name\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"What matters to me #3\"\n},\n\"archetype_node_id\": \"at0004\",\n\"value\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"Isolation\"\n}\n}\n]\n}\n</code></pre> <pre><code>     \"what_matters_to_me\": [\n\"Parents\",\n\"Mood\",\n\"Isolation\"\n]\n}\n</code></pre> <pre><code>    ```json\n{\n\"what_matters_to_me:0\": \"Parents\",\n\"what_matters_to_me:1\": \"Mood\",\n\"what_matters_to_me:2\": \"Isolation\"\n}\n</code></pre> <p>Hint</p> <p><code>DV_TEXT</code> can always be sub-classed to <code>DV_CODED_TEXT</code>, so when you see a text constraint in an archetype , this can normally always be converted to a codedText in a template or at run-time.  As an example, the primary element in the Adverse reaction risk archetype is a <code>DV_TEXT</code> but in most circumstances a DV_CODED_TEXT will actually be used.</p>"},{"location":"passport/JPASS13-openehr-datatypes/#datatype-codedtext-dv_coded_text","title":"Datatype: codedText (<code>DV_CODED_TEXT</code>)","text":"<p>Is a commonly used datatype in openEHR systems and is a sub-class of text. i.e wherever text is specified codedText can be used instead.</p> <p>Codes may be 'external' e.g. SNOMED CT, LOINC, ICD-10 or 'local', where they are defined within archetypes, have the form <code>atxxxxx</code> and are commonly referred to as 'atCodes'.</p> <p>A codedText element always includes the terminologyID, the code itself and the text of the coded concept (Rubric). In the patient data this is a carried in the <code>defining_code</code> attribute of the datatype.</p> RM Specs <p>The rm.data_types.text package contains classes for representing all textual values in the health record, including plain text, coded terms, and narrative text.     </p> CANONICAL JSONSTRUCTURED JSONFLAT JSON <pre><code>   {\n\"_type\": \"ELEMENT\",\n\"name\": {\n\"_type\": \"DV_TEXT\",\n\"value\": \"Status\"\n},\n\"archetype_node_id\": \"at0004\",\n\"value\": {\n\"_type\": \"DV_CODED_TEXT\",\n\"value\": \"Unknown\",\n\"defining_code\": {\n\"_type\": \"CODE_PHRASE\",\n\"terminology_id\": {\n\"_type\": \"TERMINOLOGY_ID\",\n\"value\": \"local\"\n},\n\"code_string\": \"at0007\"\n}\n}\n}\n</code></pre> <pre><code>    \"legal_welfare_proxy_in_place\": [\n{\n\"status\": [\n{\n\"|code\": \"at0007\",\n\"|value\": \"Unknown\",\n\"|terminology\": \"local\"\n}\n],\n}\n]\n</code></pre> <pre><code>  \"legal_welfare_proxy_in_place/status|value\": \"Unknown\",\n\"legal_welfare_proxy_in_place/status|code\": \"at0007\",\n\"legal_welfare_proxy_in_place/status|terminology\": \"local\"\n</code></pre>"},{"location":"passport/JPASS13-openehr-datatypes/#using-local-atcodes","title":"Using local 'atCodes'","text":"<p>e.g <code>local::at0007| normal|</code></p> <p>When a codedText item is added to a FLAT or STRUCTURED JSON format document, you must give the code, value and terminology, unless this is a local 'atCode', in which case only the code needs to be provided, as the terminologyId and text value will be supplied as defaults, based on the known values in the template. </p> <p>Only the code needs to be specified - the value and terminology are not required since they are pre-defined in the openEHR template..</p> FLAT JSON <pre><code>asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/test_result_name|code': 'at0071'\n</code></pre>"},{"location":"passport/JPASS13-openehr-datatypes/#using-external-terminology","title":"Using external terminology","text":"<p>e.g. <code>SNOMED-CT::23924001| chest tightness |</code></p> <p>If an external terminology is used, the code, terminology and value must be specified</p> FLAT JSON <p>```json    'asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|code': '23924001',    'asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|value': 'chest tightness',    'asthma_diary_entry/history:0/story_history/symptom:0/symptom_name|terminology': 'SNOMED-CT',</p> <p>```</p>"},{"location":"passport/JPASS13-openehr-datatypes/#handling-multiple-codes-mappings","title":"Handling multiple codes - Mappings","text":"<p>Both DV_TEXT and DV_CODED_TEXT allow for other codes to be recorded in the patient record alongside the text value or defining code. THis is done via the <code>mappings</code> attribute in the DV_TEXT/DV_CODED_TEXT datatype.</p> RM Specs <p>openEHR DV_TEXT mappings </p> CANONICAL JSONSTRUCTURED JSONFLAT JSON <pre><code>\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre>"},{"location":"passport/JPASS13-openehr-datatypes/#datatype-ordinal-dv_ordinaland-scale-dv_scale","title":"Datatype: ordinal <code>DV_ORDINAL</code>and scale <code>DV_SCALE</code>","text":"<p>Combines codedText with a score, expressed as an integer (DV_ORDINAL) or a real number (DV_SCALE). </p> <p>DV_SCALE is just being introduced in the latest version of the Reference Model to support the small number of scales and scores that need real numbers. We expect DV_SCALE to be used in preference to DV_ORDINAL for new archetypes. </p> <pre><code>0: Green  `local::at0022::Green`\n1: Amber  `local::at0023::Amber`\n2: Red    `local::at0024::Red`\n\n'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|code': 'at0024',\n'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|ordinal': 2,\n'community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|value': 'Red',\n</code></pre>"},{"location":"passport/JPASS13-openehr-datatypes/#datatype-count","title":"Datatype: count","text":"<p>count is a simple integer.</p> <pre><code>'community_dental_final_assessment_letter/investigations_and_results:0/imaging_examination_result:0/result_group/decayed_teeth/decayed_teeth': 4,\n</code></pre>"},{"location":"passport/JPASS13-openehr-datatypes/#datatype-datetime","title":"Datatype: datetime","text":"<p>Records a date or date and time using the ISO8061 format.</p> <pre><code>'ctx/time': '2014-09-23T00:11:02.518+02:00'\n</code></pre>"},{"location":"passport/JPASS13-openehr-datatypes/#datatype-quantity","title":"Datatype: quantity","text":"<p>Records a physical quantity along with the appropriate SI units, which should normally be compliant with UCUM.</p> <pre><code>\"asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/actual_result|magnitude\": 550,\n\"asthma_diary_entry/examination_findings:0/pulmonary_function_testing:0/result_details/pulmonary_flow_rate_result/actual_result|unit\": \"l/min\",\n</code></pre>"},{"location":"passport/JPASS13-openehr-datatypes/#key-openehr-reference-model-attributes","title":"Key openEHR Reference model attributes","text":"<p>A number of key data points need to be populated in an openEHR composition, which may not be apparent from the archetypes or templates. Developers can largely use the example instance documents and APIs for guidance but these notes may give useful background in addition to viewing the UML view of the openEHR reference model.</p>"},{"location":"passport/JPASS13-openehr-datatypes/#committer","title":"committer","text":"<p>This is the name of the person physically committing the document ie. the person logged on to the account. If omitted from API calls, Ehrscape will use the domain login name.</p>"},{"location":"passport/JPASS13-openehr-datatypes/#compositioncomposer","title":"composition/composer","text":"<p>This is the clinical author of the document i.e the person with clinical responsibility. Ehrscape FLAT and STRCTURTED formats handle this as <code>composer_name</code>.</p>"},{"location":"passport/JPASS13-openehr-datatypes/#compositioncontextstart_time","title":"composition/context/start_time","text":"<p>This is the time that the clinical interaction with the patient began. Ehrscape FLAT and STRUCTURED formats handle this as ctx/time.</p>"},{"location":"passport/JPASS13-openehr-datatypes/#compositioncontexthealth_care_facility","title":"composition/context/health_care_facility","text":"<p>This is the healthcare facility / oragnisation under who\u2019s remit the encounter took place.</p>"},{"location":"passport/JPASS13-openehr-datatypes/#observationtime","title":"observation/time","text":"<p>This is the time that a patient\u2019s signs and symptoms were observed or a test was run. It is set automatically by the value of the ctx/time attribute. If you need to set the time of a specific observation you can use</p> <p>The Ehrscape FLAT and STRUCTURED formats hide much of the complexity of these attributes, providing sensible defaults. In particular the <code>ctx</code> header common to both JSON STRUCTURED and FLAT formats, considerably simplifies the composition header \u2026</p> <pre><code>'ctx/composer_name': 'Rebecca Wassall',\n'ctx/health_care_facility|id': '999999-345',\n'ctx/health_care_facility|name': 'Northumbria Community NHS',\n'ctx/id_namespace': 'NHS-UK',\n'ctx/id_scheme': '2.16.840.1.113883.2.1.4.3',\n'ctx/language': 'en',\n'ctx/territory': 'GB',\n'ctx/time': '2014-09-23T00:11:02.518+02:00',\n</code></pre>"},{"location":"passport/JPASS13-openehr-datatypes/#handling-specific-openehr-datatypes","title":"Handling specific openEHR datatypes","text":""},{"location":"passport/JPASS13-openehr-datatypes/#text","title":"text","text":"<p>Text handling is normally straightforward.</p> <p>FLAT + STRUCTURED</p> <pre><code>\"synopsis\": [\n \"Significant dental issues.\"\n ]\n</code></pre>"},{"location":"passport/JPASS13-openehr-datatypes/#codedtext","title":"codedText","text":"<p>For an external terminology, the terminologyId, code and text value must be supplied but in JSON FLAT and STRUCTURED formats only the local 'atcode' needs to be supplied.</p> <p>STRUCTURED JSON format</p> <pre><code> Internal (local) code:\n \"dental_swelling\": [\n {\n \"|code\": \"at0006\",\n }\n ]\n\n External terminology:\n \"symptom_name\": [\n {\n \"|code\": \"102616008\",\n \"|terminology\": \"SNOMED-CT\",\n \"|value\": \"Painful mouth\"\n }\n ]\n</code></pre> <p>FLAT JSON format</p> <pre><code> Internal (local) code:\n\"community_dental_final_assessment_letter/examination_findings:0/physical_examination_findings:0/oral_examination/dental_swelling|code\": \"at0006\"\nExternal terminology:\n\"community_dental_final_assessment_letter/history:0/story_history:0/symptom:0/symptom_name|value\": \"Painful mouth\",\n\"community_dental_final_assessment_letter/history:0/story_history:0/symptom:0/symptom_name|code\": \"102616008\",\n\"community_dental_final_assessment_letter/history:0/story_history:0/symptom:0/symptom_name|terminology\": \"SNOMED-CT\"\n</code></pre>"},{"location":"passport/JPASS13-openehr-datatypes/#ordinal","title":"ordinal","text":"<p>For JSON FLAT and STRUCTURED formats only the local 'atcode' needs to be supplied although the ordinal and text value are also accepted FLAT JSON format</p> <pre><code>\"community_dental_final_assessment_letter/assessment_scales/dental_rag_score:0/caries_tooth_decay/caries_risk|code\": \"at0024\"\n</code></pre> <p>STRUCTURED format</p> <pre><code> \"caries_risk\": [\n{\n\"|code\": \"at0024\",\n}\n]\n</code></pre> <p>or</p> <pre><code> \"caries_risk\": [\n{\n\"|code\": \"at0024\",\n\"|ordinal\": 2,\n\"|value\": \"Red\"\n}\n]\n</code></pre>"},{"location":"passport/JPASS13-openehr-datatypes/#date","title":"date","text":"<p>Dates need to be persisted in the ISO8061format and should be displayed in CUI format e.g. 12-Nov-1958</p>"},{"location":"passport/JPASS13-openehr-datatypes/#tricky-issues","title":"Tricky issues","text":""},{"location":"passport/JPASS13-openehr-datatypes/#converting-ui-checkboxes-tofrom-codedtext","title":"Converting UI checkboxes to/from codedText","text":"<p>In a number of places, the UI may best be represented as a set of checkboxes, while the underlying data is modelled as codedText.</p> <p>e.g. Symptoms</p> <p>While it may seem more easier and more logical to use a boolean datatype, this is a common pattern in openEHR datasets which are designed to be interoperable and extensible. Experience has shown that expansion of the target valueset and alignment to external terminologies is easier if an enumerated list of codedText is used rather than boolean.</p> <p>In the case of 'Symptom' the rule is \u2026</p> <ul> <li> <p>If the checkbox is ticked, populate the Symptom name with the     SNOMED-CT term</p> </li> <li> <p>If the checkbox is unticked, omit the Symptom name element     completely.</p> </li> </ul> <p>Conversely when loading a persisted dataset, the checkbox should only be checked if the Symptom name element is present and contains SNOMED-CT term 102616008.</p>"},{"location":"passport/JPASS13-openehr-datatypes/#multiple-occurrence-data","title":"Multiple occurrence data","text":"<p>Some aspects of the form e.g Symptoms are handled as multiple occurrences of the same data point in the underlying dataset.</p>"},{"location":"passport/JPASS14-openehr-rm-attributes/","title":"Key openEHR RM attributes","text":""},{"location":"passport/JPASS14-openehr-rm-attributes/#key-openehr-rm-attributes","title":"Key openEHR RM attributes","text":"<p>The openEHR Reference model defines a relatively small set of information model constructs which openEHR back-ends must support. This includes a number of generic classes and datatypes.</p> <p>The Reference model contains virtually no clinical content e.g concepts for Medication, or Diagnosis. These are defined and managed separately as <code>archetypes</code>.</p> <p>A number of key data points need to be populated in an openEHR composition, which may not be apparent from the archetypes or templates. Developers can largely use the example instance documents and APIs for guidance but these notes may give useful background in addition to viewing the UML view of the openEHR reference model.</p>"},{"location":"passport/JPASS14-openehr-rm-attributes/#committer","title":"committer","text":"<p>This is the name of the person physically committing the document ie. the person logged on to the account. If omitted from API calls, Ehrscape will use the domain login name.</p>"},{"location":"passport/JPASS14-openehr-rm-attributes/#compositioncomposer","title":"composition/composer","text":"<p>This is the clinical author of the document i.e the person with clinical responsibility. Ehrscape FLAT and STRCTURTED formats handle this as <code>composer_name</code>.</p>"},{"location":"passport/JPASS14-openehr-rm-attributes/#compositioncontextstart_time","title":"composition/context/start_time","text":"<p>This is the time that the clinical interaction with the patient began. Ehrscape FLAT and STRUCTURED formats handle this as ctx/time.</p>"},{"location":"passport/JPASS14-openehr-rm-attributes/#compositioncontexthealth_care_facility","title":"composition/context/health_care_facility","text":"<p>This is the healthcare facility / oragnisation under who\u2019s remit the encounter took place.</p>"},{"location":"passport/JPASS14-openehr-rm-attributes/#observationtime","title":"observation/time","text":"<p>This is the time that a patient\u2019s signs and symptoms were observed or a test was run. It is set automatically by the value of the ctx/time attribute. If you need to set the time of a specific observation you can use</p> <p>The Ehrscape FLAT and STRUCTURED formats hide much of the complexity of these attributes, providing sensible defaults. In particular the <code>ctx</code> header common to both JSON STRUCTURED and FLAT formats, considerably simplifies the composition header \u2026</p> <pre><code>'ctx/composer_name': 'Rebecca Wassall',\n'ctx/health_care_facility|id': '999999-345',\n'ctx/health_care_facility|name': 'Northumbria Community NHS',\n'ctx/id_namespace': 'NHS-UK',\n'ctx/id_scheme': '2.16.840.1.113883.2.1.4.3',\n'ctx/language': 'en',\n'ctx/territory': 'GB',\n'ctx/time': '2014-09-23T00:11:02.518+02:00',\n</code></pre>"},{"location":"passport/JPASS2-retrieving-an-ehrid/","title":"Retrieving the patient's ehrId","text":"<p>When a patient is registered with an openCDR, a '<code>subjectId</code> (normally a real-word identifier like an National identifier e.g. a Jamaican NIN number or hospital MRI) is submitted by a <code>POST /ehr | create EHR from SubjectId</code>  call.  </p> <p>A top-level openEHR <code>EHR</code> object is then created in the CDR along with a unique internal <code>ehrId</code> identifier for that patient.</p> <p>Most openCDR API calls require an 'ehrId' to identify the correct patient, so normally the first activity required if interacting with a patient record is to retrieve their <code>ehrId</code>, and then often to cache that identifier so it can be used for subsequent calls, until a new patient is being accessed.</p>"},{"location":"passport/JPASS2-retrieving-an-ehrid/#get-ehr-retrieve-ehr-from-subjectidsubjectnamespace","title":"<code>GET /ehr - retrieve ehr from subjectId/subjectNamespace</code>","text":""},{"location":"passport/JPASS2-retrieving-an-ehrid/#parameters","title":"Parameters","text":""},{"location":"passport/JPASS2-retrieving-an-ehrid/#subjectid","title":"<code>subjectId</code>","text":"<p>This is the external identifier by which the patient is known within the CDR. It is normally a real-word identifier like a Jamaica NIN number or Hospital 'MRI' number, and will have been supplied to the CDR when the patients' <code>EHR</code> object was created in the datastore.</p> <p>Example value : <code>9999999000</code></p>"},{"location":"passport/JPASS2-retrieving-an-ehrid/#subjectnamespace","title":"<code>subjectNamespace</code>","text":"<p>This is just a unique string used to identify the numbering scheme used for the <code>subjectId</code>. It will commonly be some sort of URI such as <code>uk_nhs_nhs_number</code> and will have been agreed at national level.</p> <p>Example value : <code>uk_nhs_nhs_number</code></p> PostmancURLNodeJs - AxiosPython/requests <p></p> <pre><code>    curl --location \\\n--request GET '/ehr/?subjectId=https://rest.ehrscape.com/rest/openehr/v19999999000&amp;subjectNamespace=uk.nhs.nhs_number' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n--header 'PREFER: return=minimal' \\\n</code></pre> <pre><code>    var axios = require('axios');\nvar config = {\nmethod: 'get',\nurl: 'https://rest.ehrscape.com/rest/openehr/v1/ehr?subject_id=9999999000&amp;subject_namespace=uk.nhs.nhs_number',\nheaders: { 'Accept': 'application/json', 'Content-Type': 'application/json', 'PREFER': 'return=minimal', 'Authorization': Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"https://rest.ehrscape.com/rest/openehr/v1/ehr?subject_id=9999999000&amp;subject_namespace=uk.nhs.nhs_number\"\npayload = {}\nheaders = {\n'Accept': 'application/json',\n'Content-Type': 'application/json',\n'PREFER': 'return=minimal',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\nresponse = requests.request(\"GET\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"passport/JPASS2-retrieving-an-ehrid/#response","title":"Response","text":"<p>An openCDR will give a <code>200</code> response code and this structure. </p> <p>The <code>ehrId</code> that you need to capture is <code>ehr_id.value</code> item in the response.</p> <p>Hint</p> <p>You may want to consider caching this for the session, so that it can be used for a number of subsequent calls.</p> <pre><code>{\n\"_type\": \"EHR\",\n\"system_id\": {\n\"_type\": \"HIER_OBJECT_ID\",\n\"value\": \"4cce5a07-be4d-4318-a94f-3b8401853a20\"\n},\n\"ehr_id\": {\n\"_type\": \"HIER_OBJECT_ID\",\n\"value\": \"5dd03bc9-4419-4981-8798-ff4dda8ee9de\"\n},\n\"time_created\": {\n\"_type\": \"DV_DATE_TIME\",\n\"value\": \"2020-07-21T09:00:24.977Z\"\n},\n\"ehr_status\": {\n\"_type\": \"EHR_STATUS\",\n\"uid\": {\n\"_type\": \"HIER_OBJECT_ID\",\n\"value\": \"09bcd903-1565-44db-9087-2ff5e5bc7194::4cce5a07-be4d-4318-a94f-3b8401853a20::1\"\n},\n\"subject\": {\n\"_type\": \"PARTY_SELF\",\n\"external_ref\": {\n\"_type\": \"PARTY_REF\",\n\"id\": {\n\"_type\": \"HIER_OBJECT_ID\",\n\"value\": \"9999999000\"\n},\n\"namespace\": \"uk.nhs.nhs_number\"\n}\n},\n\"is_queryable\": true,\n\"is_modifiable\": true\n}\n}\n</code></pre>"},{"location":"passport/JPASS3-querying-allergies/","title":"Querying for patient allergies","text":"<p>This section will take you through how to query for Current allergies held on the CDR, using AQL (Archetype Query Language)</p> <p>The initial proposed dataset is - the allergy name (code if available)  - date of onset - manifestation (the type of Reaction -rash, nausea etc) - </p> <p>Exact query dataset to be finalised</p> <p>The exact dataset and/or queryString may change pending discussion with clinicians but the principles will remain identical</p>"},{"location":"passport/JPASS3-querying-allergies/#querying-an-openehr-cdr-archetype-query-language-aql","title":"Querying an openEHR CDR - Archetype Query language (AQL)","text":"<p>A CDR can be best thought of in terms of a exposing a complex object tree with the <code>EHR</code> object at the top, <code>Compositions</code> objects handling commits, but where all of the information in the tree can be traversed and accessed. Conceptually this is a logical query/graph language like SPARQL, the key difference being that the exact paths to the objects you might need to access are defined in the archetypes and templates you use to define and validate the data.</p> <p>AQL can be written by hand but is normally done using a tool like the Better Studio </p> <p>Understanding AQL is not generally important for third-party developers. Normally the correct AQL will be supplied by the CDR owner, indeed in production it is much more likely that server-side stored queries would be used.</p>"},{"location":"passport/JPASS3-querying-allergies/#post-query-run-an-ad-hoc-aql-query","title":"<code>POST /query</code> | Run an ad-hoc AQL query","text":"<p>This example will retrieve the data requirement above. To run the query - a <code>querystring</code> needs to be carried in the <code>body</code> of the POST call as raw data with the Header <code>Content-Type</code> set to `application/json'</p> <p>This is the <code>queryString:</code> that we need to send.</p> <pre><code>SELECT SELECT c/uid/value as compositionId,\nj/data[at0001]/items[at0002]/value/value as allergy_name,\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\nj/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\nj/data[at0001]/items[at0009]/items[at0027]/value as onset\nFROM EHR e [ehr_id/value = '{{ ehrId }}']\nCONTAINS COMPOSITION c\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] ORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\n</code></pre> <p>Note the ehrId substitution</p> <p>You will need to make sure that the <code>ehrId</code> variable in the queryString is substituted with the correct <code>ehrId</code> for the patient concerned.</p> <p>Don't worry about this seemingly odd format -it is essentially a mix of SQL and a path-based syntax, like SPARQL or XQuery.</p> <p>Running the query is easy- just call the <code>POST /query</code> call, sending the AQL string in the body of the request but note that you should strip the string of any linefeed and carriage returns etc. </p> <p>The Postman 'Ad-hoc query' request has a utility function under 'Pre-req' that sanitises the string and sets it into an environment variable before inserting it into the request body.</p> PostmancURLNodeJs - AxiosPython/requests <p></p> <pre><code>curl --location --request POST 'https://rest.ehrscape.com/rest/openehr/v1/query' \\\n    --header 'Content-Type: application/json' \\\n    --header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ== \\\n    --data-raw '{\n        \"q\": \"{{ queryString }}\"\n    }'\n</code></pre> <pre><code>  var axios = require('axios');\nvar data = JSON.stringify({\"q\":\"{{ queryString }}\"});\nvar config = {\nmethod: 'post',\nurl: 'https://rest.ehrscape.com/rest/openehr/v1/query',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n},\ndata : data\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"https://https://rest.ehrscape.com/rest/openehr/v1/query\"\npayload = \"{\\n    \\\"q\\\": \\\"{{ queryString }}\\\"\\n}\"\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"passport/JPASS3-querying-allergies/#response","title":"Response","text":"<p>The AQL response comes as back as an openEHR <code>resultSet</code>, which is a tabular shape, the exact format being determined by the AQL itself.</p> <p>In this example we have asked for scalar values only, but it is possible for AQL to return objects.</p> <p>The <code>columns</code> object shows the openEHR paths and aliases that are are returned in each row. </p> <pre><code>{\n\"meta\": {\n\"_type\": \"RESULTSET\",\n\"_created\": \"2020-10-18T15:28:31.403Z\",\n\"_executed_aql\": \"SELECT c/uid/value as compositionId,j/data[at0001]/items[at0002]/value/value as allergy_name,\\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\\n       j/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\\n       j/data[at0001]/items[at0009]/items[at0027]/value as onset\\nFROM EHR e \\nCONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1]\\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] \\nORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\"\n},\n\"q\": \"SELECT c/uid/value as compositionId,j/data[at0001]/items[at0002]/value/value as allergy_name,\\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\\n       j/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\\n       j/data[at0001]/items[at0009]/items[at0027]/value as onset\\nFROM EHR e \\nCONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1]\\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] \\nORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\",\n\"columns\": [\n{\n\"name\": \"compositionId\",\n\"path\": \"/uid/value\"\n},\n{\n\"name\": \"allergy_name\",\n\"path\": \"/data[at0001]/items[at0002]/value/value\"\n},\n{\n\"name\": \"allergy_code\",\n\"path\": \"/data[at0001]/items[at0002]/value/defining_code/code_string\"\n},\n{\n\"name\": \"allergy_terminology\",\n\"path\": \"/data[at0001]/items[at0002]/value/defining_code/terminology_id/value\"\n},\n{\n\"name\": \"manifestation\",\n\"path\": \"/data[at0001]/items[at0009]/items[at0011]/value\"\n},\n{\n\"name\": \"onset\",\n\"path\": \"/data[at0001]/items[at0009]/items[at0027]/value\"\n}\n],\n\"rows\": [\n[\n\"b960a98f-f799-4f98-b8f1-a3e86e33035e::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Peniccilin\",\nnull,\nnull,\nnull,\nnull\n],\n[\n\"371c5ff7-5078-4c17-b426-92e7351028d0::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Tetracycline\",\nnull,\nnull,\nnull,\nnull\n],\n[\n\"371c5ff7-5078-4c17-b426-92e7351028d0::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Erythromicin\",\nnull,\nnull,\nnull,\nnull\n]\n]\n}\n</code></pre>"},{"location":"passport/JPASS4-querying-medications/","title":"Querying for patient medications","text":"<p>This section will take you through how to query for Current allergies held on the CDR, using AQL (Archetype Query Language)</p> <p>The initial proposed dataset is - the allergy name (code if available)  - date of onset - manifestation (the type of Reaction -rash, nausea etc) - </p> <p>Exact query dataset to be finalised</p> <p>The exact dataset and/or queryString may change pending discussion with clinicians but the principles will remain identical</p>"},{"location":"passport/JPASS4-querying-medications/#querying-an-openehr-cdr-archetype-query-language-aql","title":"Querying an openEHR CDR - Archetype Query language (AQL)","text":"<p>A CDR can be best thought of in terms of a exposing a complex object tree with the <code>EHR</code> object at the top, <code>Compositions</code> objects handling commits, but where all of the information in the tree can be traversed and accessed. Conceptually this is a logical query/graph language like SPARQL, the key difference being that the exact paths to the objects you might need to access are defined in the archetypes and templates you use to define and validate the data.</p> <p>AQL can be written by hand but is normally done using a tool like the Better Studio </p> <p>Understanding AQL is not generally important for third-party developers. Normally the correct AQL will be supplied by the CDR owner, indeed in production it is much more likely that server-side stored queries would be used.</p>"},{"location":"passport/JPASS4-querying-medications/#post-query-run-an-ad-hoc-aql-query","title":"<code>POST /query</code> | Run an ad-hoc AQL query","text":"<p>This example will retrieve the data requirement above. To run the query - a <code>querystring</code> needs to be carried in the <code>body</code> of the POST call as raw data with the Header <code>Content-Type</code> set to `application/json'</p> <p>This is the <code>queryString:</code> that we need to send.</p> <pre><code>SELECT SELECT c/uid/value as compositionId,\nj/data[at0001]/items[at0002]/value/value as allergy_name,\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\nj/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\nj/data[at0001]/items[at0009]/items[at0027]/value as onset\nFROM EHR e [ehr_id/value = '{{ ehrId }}']\nCONTAINS COMPOSITION c\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] ORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\n</code></pre> <p>Note the ehrId substitution</p> <p>You will need to make sure that the <code>ehrId</code> variable in the queryString is substituted with the correct <code>ehrId</code> for the patient concerned.</p> <p>Don't worry about this seemingly odd format -it is essentially a mix of SQL and a path-based syntax, like SPARQL or XQuery.</p> <p>Running the query is easy- just call the <code>POST /query</code> call, sending the AQL string in the body of the request but note that you should strip the string of any linefeed and carriage returns etc. </p> <p>The Postman 'Ad-hoc query' request has a utility function under 'Pre-req' that sanitises the string and sets it into an environment variable before inserting it into the request body.</p> PostmancURLNodeJs - AxiosPython/requests <p></p> <pre><code>curl --location --request POST 'https://rest.ehrscape.com/rest/v1/query' \\\n    --header 'Content-Type: application/json' \\\n    --header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ== \\\n    --data-raw '{\n        \"aql\": \"{{ queryString }}\"\n    }'\n</code></pre> <pre><code>  var axios = require('axios');\nvar data = JSON.stringify({\"aql\":\"SELECT ... FROM ... CONTAINS ... WHERE\"});\nvar config = {\nmethod: 'post',\nurl: 'https://rest.ehrscape.com/rest/v1/query',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n},\ndata : data\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"https://https://rest.ehrscape.com/rest/v1/query\"\npayload = \"{\\n    \\\"aql\\\": \\\"{{ queryString }}\\\"\\n}\"\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"passport/JPASS4-querying-medications/#response","title":"Response","text":"<p>The AQL response comes as back as an openEHR <code>resultSet</code>, which is a tabular shape, the exact format being determined by the AQL itself.</p> <p>In this example we have asked for scalar values only, but it is possible for AQL to return objects.</p> <p>The <code>columns</code> object shows the openEHR paths and aliases that are are returned in each row. </p> <pre><code>{\n\"meta\": {\n\"_type\": \"RESULTSET\",\n\"_created\": \"2020-10-18T15:28:31.403Z\",\n\"_executed_aql\": \"SELECT c/uid/value as compositionId,j/data[at0001]/items[at0002]/value/value as allergy_name,\\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\\n       j/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\\n       j/data[at0001]/items[at0009]/items[at0027]/value as onset\\nFROM EHR e \\nCONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1]\\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] \\nORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\"\n},\n\"q\": \"SELECT c/uid/value as compositionId,j/data[at0001]/items[at0002]/value/value as allergy_name,\\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\\n       j/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\\n       j/data[at0001]/items[at0009]/items[at0027]/value as onset\\nFROM EHR e \\nCONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1]\\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] \\nORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\",\n\"columns\": [\n{\n\"name\": \"compositionId\",\n\"path\": \"/uid/value\"\n},\n{\n\"name\": \"allergy_name\",\n\"path\": \"/data[at0001]/items[at0002]/value/value\"\n},\n{\n\"name\": \"allergy_code\",\n\"path\": \"/data[at0001]/items[at0002]/value/defining_code/code_string\"\n},\n{\n\"name\": \"allergy_terminology\",\n\"path\": \"/data[at0001]/items[at0002]/value/defining_code/terminology_id/value\"\n},\n{\n\"name\": \"manifestation\",\n\"path\": \"/data[at0001]/items[at0009]/items[at0011]/value\"\n},\n{\n\"name\": \"onset\",\n\"path\": \"/data[at0001]/items[at0009]/items[at0027]/value\"\n}\n],\n\"rows\": [\n[\n\"b960a98f-f799-4f98-b8f1-a3e86e33035e::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Peniccilin\",\nnull,\nnull,\nnull,\nnull\n],\n[\n\"371c5ff7-5078-4c17-b426-92e7351028d0::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Tetracycline\",\nnull,\nnull,\nnull,\nnull\n],\n[\n\"371c5ff7-5078-4c17-b426-92e7351028d0::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Erythromicin\",\nnull,\nnull,\nnull,\nnull\n]\n]\n}\n</code></pre>"},{"location":"passport/JPASS5-querying-hospitalisations/","title":"Querying for patient hospitalizations","text":"<p>This section will take you through how to query for Current allergies held on the CDR, using AQL (Archetype Query Language)</p> <p>The initial proposed dataset is - the allergy name (code if available)  - date of onset - manifestation (the type of Reaction -rash, nausea etc) - </p> <p>Exact query dataset to be finalised</p> <p>The exact dataset and/or queryString may change pending discussion with clinicians but the principles will remain identical</p>"},{"location":"passport/JPASS5-querying-hospitalisations/#querying-an-openehr-cdr-archetype-query-language-aql","title":"Querying an openEHR CDR - Archetype Query language (AQL)","text":"<p>A CDR can be best thought of in terms of a exposing a complex object tree with the <code>EHR</code> object at the top, <code>Compositions</code> objects handling commits, but where all of the information in the tree can be traversed and accessed. Conceptually this is a logical query/graph language like SPARQL, the key difference being that the exact paths to the objects you might need to access are defined in the archetypes and templates you use to define and validate the data.</p> <p>AQL can be written by hand but is normally done using a tool like the Better Studio </p> <p>Understanding AQL is not generally important for third-party developers. Normally the correct AQL will be supplied by the CDR owner, indeed in production it is much more likely that server-side stored queries would be used.</p>"},{"location":"passport/JPASS5-querying-hospitalisations/#post-query-run-an-ad-hoc-aql-query","title":"<code>POST /query</code> | Run an ad-hoc AQL query","text":"<p>This example will retrieve the data requirement above. To run the query - a <code>querystring</code> needs to be carried in the <code>body</code> of the POST call as raw data with the Header <code>Content-Type</code> set to `application/json'</p> <p>This is the <code>queryString:</code> that we need to send.</p> <pre><code>SELECT SELECT c/uid/value as compositionId,\nj/data[at0001]/items[at0002]/value/value as allergy_name,\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\nj/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\nj/data[at0001]/items[at0009]/items[at0027]/value as onset\nFROM EHR e [ehr_id/value = '{{ ehrId }}']\nCONTAINS COMPOSITION c\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] ORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\n</code></pre> <p>Note the ehrId substitution</p> <p>You will need to make sure that the <code>ehrId</code> variable in the queryString is substituted with the correct <code>ehrId</code> for the patient concerned.</p> <p>Don't worry about this seemingly odd format -it is essentially a mix of SQL and a path-based syntax, like SPARQL or XQuery.</p> <p>Running the query is easy- just call the <code>POST /query</code> call, sending the AQL string in the body of the request but note that you should strip the string of any linefeed and carriage returns etc. </p> <p>The Postman 'Ad-hoc query' request has a utility function under 'Pre-req' that sanitises the string and sets it into an environment variable before inserting it into the request body.</p> PostmancURLNodeJs - AxiosPython/requests <p></p> <pre><code>curl --location --request POST 'https://rest.ehrscape.com/rest/v1/query' \\\n    --header 'Content-Type: application/json' \\\n    --header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ== \\\n    --data-raw '{\n        \"aql\": \"{{ queryString }}\"\n    }'\n</code></pre> <pre><code>  var axios = require('axios');\nvar data = JSON.stringify({\"aql\":\"SELECT ... FROM ... CONTAINS ... WHERE\"});\nvar config = {\nmethod: 'post',\nurl: 'https://rest.ehrscape.com/rest/v1/query',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n},\ndata : data\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"https://https://rest.ehrscape.com/rest/v1/query\"\npayload = \"{\\n    \\\"aql\\\": \\\"{{ queryString }}\\\"\\n}\"\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"passport/JPASS5-querying-hospitalisations/#response","title":"Response","text":"<p>The AQL response comes as back as an openEHR <code>resultSet</code>, which is a tabular shape, the exact format being determined by the AQL itself.</p> <p>In this example we have asked for scalar values only, but it is possible for AQL to return objects.</p> <p>The <code>columns</code> object shows the openEHR paths and aliases that are are returned in each row. </p> <pre><code>{\n\"meta\": {\n\"_type\": \"RESULTSET\",\n\"_created\": \"2020-10-18T15:28:31.403Z\",\n\"_executed_aql\": \"SELECT c/uid/value as compositionId,j/data[at0001]/items[at0002]/value/value as allergy_name,\\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\\n       j/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\\n       j/data[at0001]/items[at0009]/items[at0027]/value as onset\\nFROM EHR e \\nCONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1]\\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] \\nORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\"\n},\n\"q\": \"SELECT c/uid/value as compositionId,j/data[at0001]/items[at0002]/value/value as allergy_name,\\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\\n       j/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\\n       j/data[at0001]/items[at0009]/items[at0027]/value as onset\\nFROM EHR e \\nCONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1]\\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] \\nORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\",\n\"columns\": [\n{\n\"name\": \"compositionId\",\n\"path\": \"/uid/value\"\n},\n{\n\"name\": \"allergy_name\",\n\"path\": \"/data[at0001]/items[at0002]/value/value\"\n},\n{\n\"name\": \"allergy_code\",\n\"path\": \"/data[at0001]/items[at0002]/value/defining_code/code_string\"\n},\n{\n\"name\": \"allergy_terminology\",\n\"path\": \"/data[at0001]/items[at0002]/value/defining_code/terminology_id/value\"\n},\n{\n\"name\": \"manifestation\",\n\"path\": \"/data[at0001]/items[at0009]/items[at0011]/value\"\n},\n{\n\"name\": \"onset\",\n\"path\": \"/data[at0001]/items[at0009]/items[at0027]/value\"\n}\n],\n\"rows\": [\n[\n\"b960a98f-f799-4f98-b8f1-a3e86e33035e::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Peniccilin\",\nnull,\nnull,\nnull,\nnull\n],\n[\n\"371c5ff7-5078-4c17-b426-92e7351028d0::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Tetracycline\",\nnull,\nnull,\nnull,\nnull\n],\n[\n\"371c5ff7-5078-4c17-b426-92e7351028d0::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Erythromicin\",\nnull,\nnull,\nnull,\nnull\n]\n]\n}\n</code></pre>"},{"location":"passport/JPASS6-querying-immunizations/","title":"Querying for patient immunizations","text":"<p>This section will take you through how to query for Current allergies held on the CDR, using AQL (Archetype Query Language)</p> <p>The initial proposed dataset is - the allergy name (code if available)  - date of onset - manifestation (the type of Reaction -rash, nausea etc) - </p> <p>Exact query dataset to be finalised</p> <p>The exact dataset and/or queryString may change pending discussion with clinicians but the principles will remain identical</p>"},{"location":"passport/JPASS6-querying-immunizations/#querying-an-openehr-cdr-archetype-query-language-aql","title":"Querying an openEHR CDR - Archetype Query language (AQL)","text":"<p>A CDR can be best thought of in terms of a exposing a complex object tree with the <code>EHR</code> object at the top, <code>Compositions</code> objects handling commits, but where all of the information in the tree can be traversed and accessed. Conceptually this is a logical query/graph language like SPARQL, the key difference being that the exact paths to the objects you might need to access are defined in the archetypes and templates you use to define and validate the data.</p> <p>AQL can be written by hand but is normally done using a tool like the Better Studio </p> <p>Understanding AQL is not generally important for third-party developers. Normally the correct AQL will be supplied by the CDR owner, indeed in production it is much more likely that server-side stored queries would be used.</p>"},{"location":"passport/JPASS6-querying-immunizations/#post-query-run-an-ad-hoc-aql-query","title":"<code>POST /query</code> | Run an ad-hoc AQL query","text":"<p>This example will retrieve the data requirement above. To run the query - a <code>querystring</code> needs to be carried in the <code>body</code> of the POST call as raw data with the Header <code>Content-Type</code> set to `application/json'</p> <p>This is the <code>queryString:</code> that we need to send.</p> <pre><code>SELECT SELECT c/uid/value as compositionId,\nj/data[at0001]/items[at0002]/value/value as allergy_name,\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\nj/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\nj/data[at0001]/items[at0009]/items[at0027]/value as onset\nFROM EHR e [ehr_id/value = '{{ ehrId }}']\nCONTAINS COMPOSITION c\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] ORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\n</code></pre> <p>Note the ehrId substitution</p> <p>You will need to make sure that the <code>ehrId</code> variable in the queryString is substituted with the correct <code>ehrId</code> for the patient concerned.</p> <p>Don't worry about this seemingly odd format -it is essentially a mix of SQL and a path-based syntax, like SPARQL or XQuery.</p> <p>Running the query is easy- just call the <code>POST /query</code> call, sending the AQL string in the body of the request but note that you should strip the string of any linefeed and carriage returns etc. </p> <p>The Postman 'Ad-hoc query' request has a utility function under 'Pre-req' that sanitises the string and sets it into an environment variable before inserting it into the request body.</p> PostmancURLNodeJs - AxiosPython/requests <p></p> <pre><code>curl --location --request POST 'https://rest.ehrscape.com/rest/v1/query' \\\n    --header 'Content-Type: application/json' \\\n    --header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ== \\\n    --data-raw '{\n        \"aql\": \"{{ queryString }}\"\n    }'\n</code></pre> <pre><code>  var axios = require('axios');\nvar data = JSON.stringify({\"aql\":\"SELECT ... FROM ... CONTAINS ... WHERE\"});\nvar config = {\nmethod: 'post',\nurl: 'https://rest.ehrscape.com/rest/v1/query',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n},\ndata : data\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"https://https://rest.ehrscape.com/rest/v1/query\"\npayload = \"{\\n    \\\"aql\\\": \\\"{{ queryString }}\\\"\\n}\"\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"passport/JPASS6-querying-immunizations/#response","title":"Response","text":"<p>The AQL response comes as back as an openEHR <code>resultSet</code>, which is a tabular shape, the exact format being determined by the AQL itself.</p> <p>In this example we have asked for scalar values only, but it is possible for AQL to return objects.</p> <p>The <code>columns</code> object shows the openEHR paths and aliases that are are returned in each row. </p> <pre><code>{\n\"meta\": {\n\"_type\": \"RESULTSET\",\n\"_created\": \"2020-10-18T15:28:31.403Z\",\n\"_executed_aql\": \"SELECT c/uid/value as compositionId,j/data[at0001]/items[at0002]/value/value as allergy_name,\\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\\n       j/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\\n       j/data[at0001]/items[at0009]/items[at0027]/value as onset\\nFROM EHR e \\nCONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1]\\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] \\nORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\"\n},\n\"q\": \"SELECT c/uid/value as compositionId,j/data[at0001]/items[at0002]/value/value as allergy_name,\\nj/data[at0001]/items[at0002]/value/defining_code/code_string as allergy_code,\\nj/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as allergy_terminology,\\n       j/data[at0001]/items[at0009]/items[at0011]/value as manifestation,\\n       j/data[at0001]/items[at0009]/items[at0027]/value as onset\\nFROM EHR e \\nCONTAINS COMPOSITION c[openEHR-EHR-COMPOSITION.encounter.v1]\\nCONTAINS EVALUATION j[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] \\nORDER BY j/data[at0001]/items[at0009]/items[at0027]/value DESC\",\n\"columns\": [\n{\n\"name\": \"compositionId\",\n\"path\": \"/uid/value\"\n},\n{\n\"name\": \"allergy_name\",\n\"path\": \"/data[at0001]/items[at0002]/value/value\"\n},\n{\n\"name\": \"allergy_code\",\n\"path\": \"/data[at0001]/items[at0002]/value/defining_code/code_string\"\n},\n{\n\"name\": \"allergy_terminology\",\n\"path\": \"/data[at0001]/items[at0002]/value/defining_code/terminology_id/value\"\n},\n{\n\"name\": \"manifestation\",\n\"path\": \"/data[at0001]/items[at0009]/items[at0011]/value\"\n},\n{\n\"name\": \"onset\",\n\"path\": \"/data[at0001]/items[at0009]/items[at0027]/value\"\n}\n],\n\"rows\": [\n[\n\"b960a98f-f799-4f98-b8f1-a3e86e33035e::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Peniccilin\",\nnull,\nnull,\nnull,\nnull\n],\n[\n\"371c5ff7-5078-4c17-b426-92e7351028d0::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Tetracycline\",\nnull,\nnull,\nnull,\nnull\n],\n[\n\"371c5ff7-5078-4c17-b426-92e7351028d0::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",\n\"Erythromicin\",\nnull,\nnull,\nnull,\nnull\n]\n]\n}\n</code></pre>"},{"location":"passport/JPASS7-querying-compositions/","title":"Querying for recent compositions","text":"<p>This section will take you through how to query for recent Compositions held on the CDR, using AQL (Archetype Query Language)</p> <p>The initial proposed dataset is - the name of Composition - the composition identifier  - the start date of the Composition - the name of the clinical author (composer) - the name of the healthcare facility</p>"},{"location":"passport/JPASS7-querying-compositions/#querying-an-openehr-cdr-archetype-query-language-aql","title":"Querying an openEHR CDR - Archetype Query language (AQL)","text":"<p>A CDR can be best thought of in terms of a exposing a complex object tree with the <code>EHR</code> object at the top, <code>Compositions</code> objects handling commits, but where all of the information in the tree can be traversed and accessed. Conceptually this is a logical query/graph language like SPARQL, the key difference being that the exact paths to the objects you might need to access are defined in the archetypes and templates you use to define and validate the data.</p> <p>AQL can be written by hand but is normally done using a tool like the Better Studio </p> <p>Understanding AQL is not generally important for third-party developers. Normally the correct AQL will be supplied by the CDR owner, indeed in production it is much more likely that server-side stored queries would be used.</p>"},{"location":"passport/JPASS7-querying-compositions/#post-query-run-an-ad-hoc-aql-query","title":"<code>POST /query</code> | Run an ad-hoc AQL query","text":"<p>This example will retrieve the data requirement above. To run the query - a <code>querystring</code> needs to be carried in the <code>body</code> of the POST call as raw data with the Header <code>Content-Type</code> set to `application/json'</p> <p>This is the <code>queryString:</code> that we need to send.</p> <pre><code>SELECT c/uid/value as compositionId, c/name/value as compositionName,\nc/context/start_time/value as startTime, c/composer/name as authorName, c/context/health_care_facility/name as facilityName\nFROM EHR e [ehr_id/value = '{{ ehrId }}']\nCONTAINS COMPOSITION c\nORDER BY c/context/start_time/value DESC\n</code></pre> <p>Note the ehrId substitution</p> <p>You will need to make sure that the <code>ehrId</code> variable in the queryString is substituted with the correct <code>ehrId</code> for the patient concerned.</p> <p>Don't worry about this seemingly odd format -it is essentially a mix of SQL and a path-based syntax, like SPARQL or XQuery.</p> <p>Running the query is easy- just call the <code>POST /query</code> call, sending the AQL string in the body of the request but note that you should strip the string of any linefeed and carriage returns etc. </p> <p>The Postman 'Ad-hoc query' request has a utility function under 'Pre-req' that sanitises the string and sets it into an environment variable before inserting it into the request body.</p> PostmancURLNodeJs - AxiosPython/requests <p></p> <pre><code>curl --location --request POST 'https://rest.ehrscape.com/rest/v1/query' \\\n    --header 'Content-Type: application/json' \\\n    --header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ== \\\n    --data-raw '{\n        \"aql\": \"{{ queryString }}\"\n    }'\n</code></pre> <pre><code>  var axios = require('axios');\nvar data = JSON.stringify({\"aql\":\"SELECT ... FROM ... CONTAINS ... WHERE\"});\nvar config = {\nmethod: 'post',\nurl: 'https://rest.ehrscape.com/rest/v1/query',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n},\ndata : data\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"https://https://rest.ehrscape.com/rest/v1/query\"\npayload = \"{\\n    \\\"aql\\\": \\\"{{ queryString }}\\\"\\n}\"\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"passport/JPASS7-querying-compositions/#response","title":"Response","text":"<p>The AQL response comes as back as an openEHR <code>resultSet</code>, which is a tabular shape, the exact format being determined by the AQL itself.</p> <p>In this example we have asked for scalar values only, but it is possible for AQL to return objects.</p> <p>The <code>columns</code> object shows the openEHR paths and aliases that are are returned in each row. </p> <p><code>json {     \"meta\": {         \"_type\": \"RESULTSET\",         \"_created\": \"2020-10-18T15:46:37.208Z\",         \"_executed_aql\": \"SELECT c/uid/value as compositionId, c/name/value as compositionName,\\nc/context/start_time/value as startTime, c/composer/name as authorName, c/context/health_care_facility/name as facilityName\\nFROM EHR e \\nCONTAINS COMPOSITION c\\n \\nORDER BY c/context/start_time/value DESC\"     },     \"q\": \"SELECT c/uid/value as compositionId, c/name/value as compositionName,\\nc/context/start_time/value as startTime, c/composer/name as authorName, c/context/health_care_facility/name as facilityName\\nFROM EHR e \\nCONTAINS COMPOSITION c\\n \\nORDER BY c/context/start_time/value DESC\",     \"columns\": [         {             \"name\": \"compositionId\",             \"path\": \"/uid/value\"         },         {             \"name\": \"compositionName\",             \"path\": \"/name/value\"         },         {             \"name\": \"startTime\",             \"path\": \"/context/start_time/value\"         },         {             \"name\": \"authorName\",             \"path\": \"/composer/name\"         },         {             \"name\": \"facilityName\",             \"path\": \"/context/health_care_facility/name\"         }     ],     \"rows\": [         [             \"687d40df-57d1-4d29-ab41-88396f810de0::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",             \"Passport observations\",             \"2020-10-13T14:31:17.878Z\",             \"moh-jamaica_4cce5a07-be4d-4318-a94f-3b8401853a20\",             null         ],         [             \"845db76d-cf06-4fca-9b62-22a7c231f31b::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",             \"NCD - first visit\",             \"2020-07-22T15:17:03.696Z\",             \"Dr Murphy\",             null         ]     ] }</code></p>"},{"location":"passport/JPASS8-querying-diagnoses/","title":"Querying for diagnoses","text":"<p>This section will take you through how to query for recent Compositions held on the CDR, using AQL (Archetype Query Language)</p> <p>The initial proposed dataset is - the name of Composition - the composition identifier  - the start date of the Composition - the name of the clinical author (composer) - the name of the healthcare facility - the name of the diagnosis - the date of onset of the problem - the date of diagnosis</p>"},{"location":"passport/JPASS8-querying-diagnoses/#querying-an-openehr-cdr-archetype-query-language-aql","title":"Querying an openEHR CDR - Archetype Query language (AQL)","text":"<p>A CDR can be best thought of in terms of a exposing a complex object tree with the <code>EHR</code> object at the top, <code>Compositions</code> objects handling commits, but where all of the information in the tree can be traversed and accessed. Conceptually this is a logical query/graph language like SPARQL, the key difference being that the exact paths to the objects you might need to access are defined in the archetypes and templates you use to define and validate the data.</p> <p>AQL can be written by hand but is normally done using a tool like the Better Studio </p> <p>Understanding AQL is not generally important for third-party developers. Normally the correct AQL will be supplied by the CDR owner, indeed in production it is much more likely that server-side stored queries would be used.</p>"},{"location":"passport/JPASS8-querying-diagnoses/#post-query-run-an-ad-hoc-aql-query","title":"<code>POST /query</code> | Run an ad-hoc AQL query","text":"<p>This example will retrieve the data requirement above. To run the query - a <code>querystring</code> needs to be carried in the <code>body</code> of the POST call as raw data with the Header <code>Content-Type</code> set to `application/json'</p> <p>This is the <code>queryString:</code> that we need to send.</p> <pre><code>SELECT c/uid/value as compositionId, c/name/value as compositionName,\nc/context/start_time/value as startTime, c/composer/name as authorName, c/context/health_care_facility/name as facilityName\nFROM EHR e [ehr_id/value = '{{ ehrId }}']\nCONTAINS COMPOSITION c\nORDER BY c/context/start_time/value DESC\n</code></pre> <p>Note the ehrId substitution</p> <p>You will need to make sure that the <code>ehrId</code> variable in the queryString is substituted with the correct <code>ehrId</code> for the patient concerned.</p> <p>Don't worry about this seemingly odd format -it is essentially a mix of SQL and a path-based syntax, like SPARQL or XQuery.</p> <p>Running the query is easy- just call the <code>POST /query</code> call, sending the AQL string in the body of the request but note that you should strip the string of any linefeed and carriage returns etc. </p> <p>The Postman 'Ad-hoc query' request has a utility function under 'Pre-req' that sanitises the string and sets it into an environment variable before inserting it into the request body.</p> PostmancURLNodeJs - AxiosPython/requests <p></p> <pre><code>curl --location --request POST 'https://rest.ehrscape.com/rest/v1/query' \\\n    --header 'Content-Type: application/json' \\\n    --header 'Authorization: Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ== \\\n    --data-raw '{\n        \"aql\": \"{{ queryString }}\"\n    }'\n</code></pre> <pre><code>  var axios = require('axios');\nvar data = JSON.stringify({\"aql\":\"SELECT ... FROM ... CONTAINS ... WHERE\"});\nvar config = {\nmethod: 'post',\nurl: 'https://rest.ehrscape.com/rest/v1/query',\nheaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n},\ndata : data\n};\naxios(config)\n.then(function (response) {\nconsole.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\nconsole.log(error);\n});\n</code></pre> <pre><code>import requests\nurl = \"https://https://rest.ehrscape.com/rest/v1/query\"\npayload = \"{\\n    \\\"aql\\\": \\\"{{ queryString }}\\\"\\n}\"\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Basic YTgxZjQ3YzYtYTc1Ny00ZTM0LWI2NDQtM2NjYzYyYjRhMDFjOiQyYSQxMCQ2MTlraQ=='\n}\nresponse = requests.request(\"POST\", url, headers=headers, data = payload)\nprint(response.text.encode('utf8'))\n</code></pre>"},{"location":"passport/JPASS8-querying-diagnoses/#response","title":"Response","text":"<p>The AQL response comes as back as an openEHR <code>resultSet</code>, which is a tabular shape, the exact format being determined by the AQL itself.</p> <p>In this example we have asked for scalar values only, but it is possible for AQL to return objects.</p> <p>The <code>columns</code> object shows the openEHR paths and aliases that are are returned in each row. </p> <p><code>json {     \"meta\": {         \"_type\": \"RESULTSET\",         \"_created\": \"2020-10-18T15:46:37.208Z\",         \"_executed_aql\": \"SELECT c/uid/value as compositionId, c/name/value as compositionName,\\nc/context/start_time/value as startTime, c/composer/name as authorName, c/context/health_care_facility/name as facilityName\\nFROM EHR e \\nCONTAINS COMPOSITION c\\n \\nORDER BY c/context/start_time/value DESC\"     },     \"q\": \"SELECT c/uid/value as compositionId, c/name/value as compositionName,\\nc/context/start_time/value as startTime, c/composer/name as authorName, c/context/health_care_facility/name as facilityName\\nFROM EHR e \\nCONTAINS COMPOSITION c\\n \\nORDER BY c/context/start_time/value DESC\",     \"columns\": [         {             \"name\": \"compositionId\",             \"path\": \"/uid/value\"         },         {             \"name\": \"compositionName\",             \"path\": \"/name/value\"         },         {             \"name\": \"startTime\",             \"path\": \"/context/start_time/value\"         },         {             \"name\": \"authorName\",             \"path\": \"/composer/name\"         },         {             \"name\": \"facilityName\",             \"path\": \"/context/health_care_facility/name\"         }     ],     \"rows\": [         [             \"687d40df-57d1-4d29-ab41-88396f810de0::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",             \"Passport observations\",             \"2020-10-13T14:31:17.878Z\",             \"moh-jamaica_4cce5a07-be4d-4318-a94f-3b8401853a20\",             null         ],         [             \"845db76d-cf06-4fca-9b62-22a7c231f31b::4cce5a07-be4d-4318-a94f-3b8401853a20::1\",             \"NCD - first visit\",             \"2020-07-22T15:17:03.696Z\",             \"Dr Murphy\",             null         ]     ] }</code></p>"},{"location":"passport/JPASS9-committing-observation-data/","title":"Committing Observation data","text":"<p>All data committed to an openEHR CDR is done so via a POST /composition call - as a JSON or XML 'blob'. </p> <p>As it is committed, the data will be validated against both the appropriate openEHR template and the underlying Reference model schema.</p> <p>If the data is valid, it will be stored in the CDR and is allocated a unique ID, which is returned by the POST /composition call</p> <p>This section will submit an example Composition to the CDR by running a <code>POST / composition</code> call.</p> <p>A number of data serialisation options, can be used. In this case we will use the Better <code>STRUCTURED JSON</code> format, as it is somewhat easier to use than the current openEHR <code>CANONICAL JSON or XML</code> formats.</p> <p>Note</p> <p>Note that this example uses the Better <code>Better Ehrscape API</code> which has a slightly different base URL and parameters than the <code>openEHR REST API</code>,though the data is stored identically and can be accessed from both end points.</p>"},{"location":"passport/JPASS9-committing-observation-data/#ehrscape-post-composition-example","title":"Ehrscape POST /composition example","text":""},{"location":"passport/JPASS9-committing-observation-data/#parameters","title":"Parameters","text":"<p><code>ehrId</code>: </p> <p>This is is the internal CDR identifier for a specific patient. When a patient is registered with the CDR,an EHR object is created with a unique <code>ehr_id</code> identifier, and is associated with an external <code>subjectId</code> and subjectNamespace e.g an NHS Number, CHI number, or a local hospital number.</p> <p>We will find out how to work out the correct ehrId for a patient in the next section.</p> <p>Generally when you first open a patient record session, you will retrieve their <code>ehrId</code> via their <code>subjectID</code> and <code>subjectNamespace</code>. We will explain how to do that in the next section.</p> <p>For testing purposes, you should use a known <code>ehrId</code>. If you have a Postman environment file, an example will be in there, otherwise you can find out how to identify valid ehrIds here</p> <p><code>templateId</code>: </p> <p>This is the identifier of the openEHR template, against which you need to validate the composition. Use <code>DHI - Urology_PROMs-v0</code> for this example.  </p> <p><code>format</code>: </p> <p>This defines the format of JSON or XML that you are sending. Use <code>FLAT</code> for this example.</p>"},{"location":"passport/JPASS9-committing-observation-data/#a-commit-an-openehr-composition-flat-json","title":"A. Commit an openEHR Composition (<code>FLAT JSON</code>)","text":"cURL <pre><code>    curl --location --request POST '{{ ehrscapeBaseUrl }}/composition?ehrId={{ ehrId }}&amp;templateId={{ templateId }}&amp;format=STRUCTURED' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: {{ auth_token }}' \\\n--data-raw '{\n    \"{\n      \"passport_observations/context/start_time\": \"2020-10-18T16:16:21.449Z\",\n      \"passport_observations/context/setting|code\": \"238\",\n      \"passport_observations/context/setting|value\": \"other care\",\n      \"passport_observations/context/setting|terminology\": \"openehr\",\n      \"passport_observations/blood_pressure/systolic|magnitude\": 169.0,\n      \"passport_observations/blood_pressure/systolic|unit\": \"mm[Hg]\",\n      \"passport_observations/blood_pressure/diastolic|magnitude\": 692.0,\n      \"passport_observations/blood_pressure/diastolic|unit\": \"mm[Hg]\",\n      \"passport_observations/blood_pressure/time\": \"2020-10-18T16:16:21.452Z\",\n      \"passport_observations/blood_pressure/language|code\": \"en\",\n      \"passport_observations/blood_pressure/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/blood_pressure/encoding|code\": \"UTF-8\",\n      \"passport_observations/blood_pressure/encoding|terminology\": \"IANA_character-sets\",\n      \"passport_observations/height_length/height_length|magnitude\": 609.33,\n      \"passport_observations/height_length/height_length|unit\": \"cm\",\n      \"passport_observations/height_length/time\": \"2020-10-18T16:16:21.453Z\",\n      \"passport_observations/height_length/language|code\": \"en\",\n      \"passport_observations/height_length/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/height_length/encoding|code\": \"UTF-8\",\n      \"passport_observations/height_length/encoding|terminology\": \"IANA_character-sets\",\n      \"passport_observations/body_weight/weight|magnitude\": 380.49,\n      \"passport_observations/body_weight/weight|unit\": \"kg\",\n      \"passport_observations/body_weight/time\": \"2020-10-18T16:16:21.453Z\",\n      \"passport_observations/body_weight/language|code\": \"en\",\n      \"passport_observations/body_weight/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/body_weight/encoding|code\": \"UTF-8\",\n      \"passport_observations/body_weight/encoding|terminology\": \"IANA_character-sets\",\n      \"passport_observations/blood_glucose/test_name|code\": \"14743-9\",\n      \"passport_observations/blood_glucose/test_name|value\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n      \"passport_observations/blood_glucose/test_name|terminology\": \"LOINC\",\n      \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|code\": \"14743-9\",\n      \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|value\": \"Glucose [Moles/volume] in Capillary blood by Glucometer\",\n      \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_name|terminology\": \"LOINC\",\n      \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_result|magnitude\": 52.61,\n      \"passport_observations/blood_glucose/laboratory_analyte_result/analyte_result|unit\": \"mmol/L\",\n      \"passport_observations/blood_glucose/time\": \"2020-10-18T16:16:21.453Z\",\n      \"passport_observations/blood_glucose/language|code\": \"en\",\n      \"passport_observations/blood_glucose/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/blood_glucose/encoding|code\": \"UTF-8\",\n      \"passport_observations/blood_glucose/encoding|terminology\": \"IANA_character-sets\",\n      \"passport_observations/pulse_oximetry/spo|numerator\": 0.0,\n      \"passport_observations/pulse_oximetry/spo|denominator\": 100.0,\n      \"passport_observations/pulse_oximetry/spo|type\": 2,\n      \"passport_observations/pulse_oximetry/spo\": 0.0,\n      \"passport_observations/pulse_oximetry/time\": \"2020-10-18T16:16:21.455Z\",\n      \"passport_observations/pulse_oximetry/language|code\": \"en\",\n      \"passport_observations/pulse_oximetry/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/pulse_oximetry/encoding|code\": \"UTF-8\",\n      \"passport_observations/pulse_oximetry/encoding|terminology\": \"IANA_character-sets\",\n      \"passport_observations/body_temperature/temperature|magnitude\": 72.7,\n      \"passport_observations/body_temperature/temperature|unit\": \"[degF]\",\n      \"passport_observations/body_temperature/time\": \"2020-10-18T16:16:21.455Z\",\n      \"passport_observations/body_temperature/language|code\": \"en\",\n      \"passport_observations/body_temperature/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/body_temperature/encoding|code\": \"UTF-8\",\n      \"passport_observations/body_temperature/encoding|terminology\": \"IANA_character-sets\",\n      \"passport_observations/clinical_synopsis/notes\": \"Notes 9\",\n      \"passport_observations/clinical_synopsis/language|code\": \"en\",\n      \"passport_observations/clinical_synopsis/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/clinical_synopsis/encoding|code\": \"UTF-8\",\n      \"passport_observations/clinical_synopsis/encoding|terminology\": \"IANA_character-sets\",\n      \"passport_observations/category|code\": \"433\",\n      \"passport_observations/category|value\": \"event\",\n      \"passport_observations/category|terminology\": \"openehr\",\n      \"passport_observations/language|code\": \"en\",\n      \"passport_observations/language|terminology\": \"ISO_639-1\",\n      \"passport_observations/territory|code\": \"JM\",\n      \"passport_observations/territory|terminology\": \"ISO_3166-1\"\n  }'\n</code></pre> NodeJS + Axios <p>```js</p> <pre><code>var axios = require('axios');\n\nvar data = JSON.stringify({\"prostate_cancer_proms_report\": // trimmed for brevity}\");\n\nvar config = {\n  method: 'post',\n  url: '{{ ehrscapeBaseUrl }}/composition?ehrId={{ ehrId }}&amp;templateId={{ templateId }}&amp;format=STRUCTURED',\n  headers: { \n    'Content-Type': 'application/json', \n    'Authorization': '{{ authToken }}'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n</code></pre> <p>```</p>"},{"location":"passport/JPASS9-committing-observation-data/#response-for-post-composition","title":"Response for POST /composition","text":"<pre><code>{\n\"meta\": {\n\"href\": \"https://cdr.code4health.org/rest/v1/composition/59e8f5a2-6fb6-47d5-9acd-ae6309d0f1dd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::1\"\n},\n\"action\": \"CREATE\",\n\"compositionUid\": \"59e8f5a2-6fb6-47d5-9acd-ae6309d0f1dd::a81f47c6-a757-4e34-b644-3ccc62b4a01c::1\"\n}\n</code></pre>"},{"location":"passport/JPASS9-committing-observation-data/#the-composition-id","title":"The <code>Composition Id</code>","text":"<p>The compositionUid is the unique identifier allocated to (and held within) every composition by the CDR.</p> <p>You will see that it ends in <code>...::1</code>. The <code>1</code> is the version of this composition instance. If you need to update the instance (perhaps because of an error), you need to do so via a PUT / composition call and if successful the composition version number will clock up to <code>::2</code>.</p> <p>In essence every commit is versioned and retained for medico-legal reasons. </p> <p>Similarly when a composition is deleted, this is a logical delete and the composition can always be retrieved, though is not normally accessible via querying.</p> <p>We will go through the process of updating a composition later.</p> <p>For now let's just retrieve the composition we just committed, via the GET /composition call.</p>"},{"location":"postman/PM1-postman-getting-ready/","title":"Getting ready with Postman","text":"<p>First you need to install a copy of the API runner application Postman (Chrome/MacOS/Windows) Get Postman Application</p> <p>This lets you send and receive data from the openEHR REST API or Better Ehrscape API without the need for a specific programming language.</p> <p>Postman also allows you to import a preset collection of API calls which we can use to supply a copy of the Ehrscape API and associated 'environment' file, which contains settings for a specific C4H Platform domain domain.</p>"},{"location":"postman/PM1-postman-getting-ready/#a-run-postman","title":"A. Run Postman","text":"<p>Click the 'Run Postman Button' to import the Postman 'Apperta C4H openEHR REST APIs' collection and the associated 'dhi-scotland' environment.</p> <p></p>"},{"location":"postman/PM1-postman-getting-ready/#or-b-download-postman-files-from-git","title":"or B. Download Postman files from Git","text":"<p>Click on these links to download the files to your system:</p> <p>TBD</p>"},{"location":"postman/PM1-postman-getting-ready/#or-c-download-your-collection-files-from-email","title":"or C. Download your collection files from email","text":"<p>If you have received an email containing the collection and environment files to use with Postman. The first step is to download these files ready to then be imported into Postman.</p> <p>Find <code>Apperta C4H openEHR REST API.postman_collection</code> in your email and download it to a folder of your choice (normally the Download folder).</p> <p>Find <code>&lt;your_environment_name&gt;.postman_environment</code> in your email and download it to a folder of your choice (normally the Download folder). Please note that for demonstration purposes we are using the <code>C4H Ripple OSI</code> environment in this document.</p>"},{"location":"postman/PM1-postman-getting-ready/#import-downloaded-files-into-postman","title":"Import Downloaded files into Postman","text":"<p>If you have downloaded files from Github of from your email, these now need to be installed in Postman.</p> <p>Open Postman and select Import</p> <p></p> <p>Locate your two save files and import them. You can either use the Choose Files option to import one at a time or drag and drop the files into the window</p> <p></p> <p>In the top right hand corner, change the environment to your environment (in the screenshot below that\u2019s the C4H Ripple OSI environment)</p> <p></p> <p>On the left hand side you can now see the collection files ...</p> <p></p>"},{"location":"postman/PM2-navigate-postman/","title":"Navigate Postman","text":"<p>Something else Click on the openEHR Ehrscape Clinical Data Repository to reveal the folders, and then click on individual folders to expand and reveal the contents</p> <p></p> <p>Selecting one of the API calls displays more detail on the right hand side</p> <p></p> <p>Clicking on the \"x\" icon in the top right hand corner reveals a number of pre-set variables for your selected environment (again the C4H Ripple environment is used just as an example). These pre-sets are used in some of the API calls as defaults.</p> <p></p>"},{"location":"postman/PM3-using-postman/","title":"Create Session (Ripple Ethercis only)","text":"<p>You can skip this step if you are not using the Ripple Ethercis CDR.</p> <p>The first step is to create an openEHR session and retrieve the\u00a0sessionId\u00a0token. This allows subsequent API calls to be made without needing to login on each occasion.</p> <p>Navigate to the session folder and highlight Create Session on the left, then click on the Send button. The required credentials are automatically filled in from the Pre-sets file (see Navigating Postman section above)</p> <p></p> <p>Click the Scroll to responses button in the bottom right hand corner to display the response details.</p> <p>The screenshot below shows the session Id which has been returned in the call.</p> <p></p>"},{"location":"postman/PM3-using-postman/#get-ehr-identifier","title":"Get EHR Identifier","text":"<p>The next step is to get the patient\u2019s internal EHR identifier by sending their external identifier (in this case an NHS Number). The ehrId is a unique string which, for security reasons, cannot be associated with the patient, if for instance their openEHR records were leaked.</p> <p>Select Get ehrStatus from subjectId in the ehr folder and then click on the Send button. Again, the patient\u2019s NHS number is taken from the Pre-sets file and is therefore filled in automatically.</p> <p></p> <p>Click on the Scroll to responses button in the bottom right hand corner to display the response details.</p> <p>The JSON snippet below shows the ehrId for our dummy patient.</p> <p></p> <p>To store the returned ehrId as a pre-set for the selected environment, highlight the string in the response details, right mouse click, set the environment (C4H Ripple OSI in this example) and then select ehrId from the list of attributes.</p> <p></p>"},{"location":"postman/PM3-using-postman/#retrieve-composition-id","title":"Retrieve Composition ID","text":"<p>Now that we have the patient\u2019s EHR identifier, we can use it to locate and retrieve some clinical details. We use an Archetype Query Language (AQL) call to retrieve a list of the identifiers and dates of existing\u00a0Nursing Vital Signs Observations\u00a0Composition records. Compositions are document-level records which act as the container for all openEHR patient data.</p> <p>The\u00a0name/value\u00a0of the Composition is the root name of the templates composition archetype (case-sensitive). In a real-world example we would query on other factors to ensure we had the \u2018correct\u2019 list.</p> <p>The query we need to run in order to get the composition Id for the most recent vital signs composition for the selected patient is as follows:</p> <p></p> <p>At this stage you don\u2019t need to worry about the exact syntax and how to create an AQL query. These topics are covered elsewhere, and the Specifications provide the required details.</p> <p>Open the query folder and select Ad-hoc query</p> <p></p> <p>This is the query string in a format which can be copied and pasted:</p> <pre><code>select\na/uid/value as compositionId,\na/context/start_time/value as start_time\nfrom EHR e[ehr_id/value='{{ ehrId }}']\ncontains COMPOSITION a[openEHR-EHR-COMPOSITION.encounter.v1]\nwhere a/name/value= 'Nursing Vital Signs Observations'\norder by a/context/start_time/value desc\noffset 0 limit 1\n</code></pre> <p>In the Ad-hoc Query window click on Param and paste the query string above into the Value field, then click on the Send button.</p> <p></p> <p>Click the Scroll to response button in the bottom right hand corner to display the response details. The compositionId element in the response is the unqique identifier for the composition and the start_time is the time that the document was authored.</p> <p></p> <p>We will use the results of this query to retrieve the full composition, so the final action is to store the composition Id as a pre-set.</p> <p>Highlight the string in the response details, right mouse click, set the environment (C4H Ripple OSI in this example) and then select compositionId from the list of attributes</p> <p></p>"},{"location":"postman/PM3-using-postman/#retrieve-composition","title":"Retrieve Composition","text":"<p>The next step is to retrieve the composition itself, based on the compositionId we stored in the previous step.</p> <p>Navigate to the composition folder and highlight Read Composition JSON FLAT, then click the Send button</p> <p></p> <p>The result is shown as a FLAT JSON file below</p> <p></p> <p>Other formats are JSON RAW, XML RAW or JSON STRUCTURED \u2013 the snippets below show part of the Pulse data</p> <p></p> <p></p> <p></p>"},{"location":"postman/PM3-using-postman/#persist-composition","title":"Persist Composition","text":"<p>The next step is to persist a new composition. The data in the composition is validated against a template, and the first action is to set the correct template Id for composition to be persisted.</p> <p>Navigate to the Template folder and highlight List available templates, then click the Send button. Highlight the Vital Signs Encounter template in the list of available templates, right mouse click, set the environment (C4H Ripple OSI in this example) and then select templateId from the list of attributes</p> <p></p> <p>Once the template Id is set, we can commit a composition. The following string is an example of a vital signs composition:</p> <pre><code>\"ctx/language\": \"en\",\n\"ctx/territory\": \"GB\",\n\"ctx/composer_name\": \"Hazel Smith\",\n\"ctx/time\": \"2015-12-10T02:19:00.000Z\",\n\"ctx/health_care_facility|id\": \"999999-345\",\n\"ctx/health_care_facility|name\": \"Northumbria Community NHS\",\n\"ctx/id_namespace\": \"NHS-UK\",\n\"ctx/id_scheme\": \"2.16.840.1.113883.2.1.4.3\",\n\"nursing_vital_signs_observations/vital_signs:0/respirations:0/any_event:0/rate|magnitude\": 22,\n\"nursing_vital_signs_observations/vital_signs:0/respirations:0/any_event:0/rate|unit\": \"/min\",\n\"nursing_vital_signs_observations/vital_signs:0/pulse:0/any_event:0/heart_rate|magnitude\": 101,\n\"nursing_vital_signs_observations/vital_signs:0/pulse:0/any_event:0/heart_rate|unit\": \"/min\",\n\"nursing_vital_signs_observations/vital_signs:0/body_temperature:0/any_event:0/temperature|magnitude\": 36.6,\n\"nursing_vital_signs_observations/vital_signs:0/body_temperature:0/any_event:0/temperature|unit\": \"\u00b0C\",\n\"nursing_vital_signs_observations/vital_signs:0/blood_pressure:0/any_event:0/systolic|magnitude\": 100,\n\"nursing_vital_signs_observations/vital_signs:0/blood_pressure:0/any_event:0/systolic|unit\": \"mm[Hg]\",\n\"nursing_vital_signs_observations/vital_signs:0/blood_pressure:0/any_event:0/diastolic|magnitude\": 60,\n\"nursing_vital_signs_observations/vital_signs:0/blood_pressure:0/any_event:0/diastolic|unit\": \"mm[Hg]\",\n\"nursing_vital_signs_observations/vital_signs:0/indirect_oximetry:0/any_event:0/spo2|numerator\": 94,\n\"nursing_vital_signs_observations/vital_signs:0/indirect_oximetry:0/any_event:0/spo2|denominator\": 100,\n\"nursing_vital_signs_observations/vital_signs:0/national_early_warning_score_rcp_uk:0/total_score\": 3_*\n</code></pre> <p>As mentioned before, the exact syntax and how to create a composition will be covered elsewhere. At this stage you should just use the syntax string provided above.</p> <p>Navigate to the Composition folder and highlight Commit Composition JSON FLAT. Paste the text above into the Body text box on the right hand side and click on the Send button.</p> <p></p> <p>The result shows the composition Id for the newly committed composition.</p> <p></p>"},{"location":"postman/PM3-using-postman/#run-aql-query","title":"Run AQL Query","text":"<p>The next step is to run a query on recent vital signs compositions and return a set of key data.</p> <p>Navigate to the query folder and select Ad-hoc Query.</p> <p>This is the query string we are going to use to retrieve the last 5 vital signs compositions and return the relevant readings. Once again, just to clarify: the exact syntax and how to create an AQL query will be covered elsewhere. At this stage you can just copy and paste the query syntax string shown below:</p> <pre><code>select\na/uid/value as compositionId,\na/context/start_time/value as start_time,\nb_a/data[at0001]/events[at0002]/data[at0003]/items[at0004]/value/magnitude as Rate_magnitude,\nb_b/data[at0002]/events[at0003]/data[at0001]/items[at0004]/value/magnitude as Heart_Rate_magnitude,\nb_c/data[at0002]/events[at0003]/data[at0001]/items[at0004]/value/magnitude as Temperature_magnitude,\nb_f/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value/magnitude as Systolic_magnitude,\nb_f/data[at0001]/events[at0006]/data[at0003]/items[at0005]/value/magnitude as Diastolic_magnitude,\nb_g/data[at0001]/events[at0002]/data[at0003]/items[at0006]/value/numerator as spO2_numerator,\nb_h/data[at0001]/events[at0002]/data[at0003]/items[at0028]/value/magnitude as Total_Score_magnitude\nfrom EHR e[ehr_id/value='{{ ehrId }}']\ncontains COMPOSITION a[openEHR-EHR-COMPOSITION.encounter.v1]\ncontains (OBSERVATION b_a[openEHR-EHR-OBSERVATION.respiration.v1]\nor OBSERVATION b_b[openEHR-EHR-OBSERVATION.pulse.v1]\nor OBSERVATION b_c[openEHR-EHR-OBSERVATION.body_temperature.v1]\nor OBSERVATION b_f[openEHR-EHR-OBSERVATION.blood_pressure.v1]\nor OBSERVATION b_g[openEHR-EHR-OBSERVATION.indirect_oximetry.v1]\nor OBSERVATION b_h[openEHR-EHR-OBSERVATION.news_rcp_uk.v1])\nwhere a/name/value= 'Nursing Vital Signs Observations'\norder by a/context/start_time/value desc\n</code></pre> <p>In the Ad-hoc query window click on Params and enter the query string into the Value field on the right hand side, then click the Send button.</p> <p></p> <p>The result set contains the last 5 vital signs compositions and the data points within the compositions.</p> <p></p>"},{"location":"postman/PM3-using-postman/#close-sessionripple-ethercis-only","title":"Close Session(Ripple EtherCis only)","text":"<p>The final step is to close the openEHR session.</p> <p>To do this, navigate to the session folder and select Delete Session. Click on the Send button.</p> <p>The result will show a null sessionId, indicating that there is no open session.</p> <p></p>"}]}